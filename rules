#!/usr/bin/make -f
###################################################################################
# OpenOffice.org source package rules flie
#
# Please see debian/README for detailed documentation about the build system, and
# how to build OpenOffice.org.
###################################################################################
# Originally by Stephen Early <sde1000@debian.org>
# Modified by Mark W. Eichin <eichin@kitten.gen.ma.us>
# Modified by Adam Heath <doogie@debian.org>
# Modified by Branden Robinson <branden@debian.org>
# Modified by Peter Novodvorsky <nidd@debian.org>
# Modified by Filip Van Raemdonck <mechanix@debian.org>
# Modified by Jan-Hendrik Palic <jan.palic@linux-debian.de>
# Modified by Chris Halls <chris.halls@gmx.de>
# Copyright 1996-2001,2002 Software in the Public Interest, Inc.
# Licensed under the GNU General Public License, version 2.  See the file
# /usr/share/common-licenses/GPL or <http://www.gnu.org/copyleft/gpl.txt>.
# Acknowlegements to Branden Robinson, Stephen Early, Mark Eichin, and Manoj Srivastava.
###################################################################################

# Read in important variables.
include debian/scripts/vars
BUILD_DIR=$(SOURCE_DIR)/$(TAR_DIR)


# default rule to keep things from going nuts by accident
default: environment

checksource: source.make
	$(checksource_command)

define checksource_command
	# make sure all the patches applied cleanly
	@if grep -v '^patch' debian/stampdir/patches/*.log; then echo "Some patches did not apply cleanly.  Please investigate." >&2; exit 1; fi
	# yes, they did
endef

# Include Adam Heath's source archive/patch handling system.
include debian/doogie-build-system

# oh my God, this is a gross hack
ELSE:=else

# This is a horrendous kludge to ensure that some scripts we need are executable.
DUMMY:=$(shell if [ ! -x debian/setperms ]; then chmod 755 debian/setperms; fi)
DUMMY:=$(shell debian/setperms)

#XDISPLAY:=$(shell debian/local/scripts/find-free-display)
#export DISPLAY=$(XDISPLAY)
export XAUTHORITY=

# hacked xvfb-run automatically finds a display
# and checks that Xvfb didn't die
XVFB=$(CURDIR)/debian/local/scripts/oo-xvfb-run -a -w 5

# debhelper
export DH_OPTIONS
export DH_ALWAYS_EXCLUDE=CVS

# Get package version info.
SOURCE_VERSION:=$(shell head -1 debian/changelog | cut -d\( -f2 | cut -d\) -f1)
# Determine our architecture.
ARCH := $(shell dpkg-architecture -qDEB_HOST_ARCH)

# Read in architecture-specific variables of importance.
include debian/scripts/vars.$(ARCH)

# include variable -- where is Java? ;)
JDK_HOME := $(shell debian/scripts/detect_java.sh)

# This is where the upstream install rules will put their stuff.
DEBTREEDIR:=$(CURDIR)/debian/tmp
OPENOFFICEDIR:=/usr/lib/openoffice
PKGOPENOFFICEDIR:=$(DEBTREEDIR)/$(OPENOFFICEDIR)

# Package install directory
MAINPKGDIR:=$(CURDIR)/debian/openoffice.org

# Use GCC version 3? USE_GCC=3 in vars or vars.<arch>. 
# Set GCC3VER in vars or vars.<arch> 
# to 3.0 if you use gcc-3.0 oer 3.1, if you use gcc-3.1.
ifeq "$(USE_GCC3)" "y"
  # we can't use 'CC' - it confuses dpkg, so use _CC and pass CC to configure.  CXX is OK.
  _CC=gcc-$(GCC3VER)
  CXX=g++-$(GCC3VER)
  export CXX
  GCC3 := --enable-gcc3
  ifeq "$(ARCHBUILDDIR)" "unxlngi3.pro"
    # Build directory is different for GCC3
    ARCHBUILDDIR=unxlngi4.pro
  endif
else
  _CC=gcc-2.95
  CXX=g++-2.95
  GCC3 :=
  export CXX
endif

# Default build.pl flags

ifeq (build=,$(findstring build=,$(DEB_BUILD_OPTIONS)))
  BUILD_PL_FLAGS=$(shell echo "$(DEB_BUILD_OPTIONS)," | sed -n 's/^.*build=\([^,]*\),.*/\1/p')
else
  BUILD_PL_FLAGS=-all
endif


BUILD_PL_DMAKEFLAGS=product=full
PARALLEL=

#if debug is set into DEB_BUILD_OPTIONS, debug=yes will added to buildprj, so you can
#build single projects with debugging symbols
ifeq (debug,$(findstring debug,$(DEB_BUILD_OPTIONS)))
   BUILD_PL_FLAGS+= debug=yes
endif

# Extract -PP or -P options from command line
PARALLEL:=$(shell echo $(DEB_BUILD_OPTIONS) | tr ',' '\n' | grep "^-PP\?[0-9]\+$$" | tr '\n' ' ')

# distcc will be used if DISTCC_HOSTS is set
# The number of processes (-PP) will be set to the number of DISTCC_HOSTS, unless you
# override it with -PPn or -Pn in DEB_BUILD_OPTIONS
#ifdef DISTCC_HOSTS
#  # If there were no -PP or -P options, set to number of distcc hosts
#  ifeq "$(PARALLEL)" ""
#    PARALLEL:=-PP$(strip $(shell echo $(DISTCC_HOSTS) | wc -w))
#  fi
#
#  _CC:=distcc $(_CC)
#  CXX:=distcc $(CXX)
#endif

# Use compiler cache?  Include ccache in DEB_BUILD_OPTIONS for much faster rebuild times
# A complete build uses about 200Mb of compiler cache.
ifeq (ccache,$(findstring ccache,$(DEB_BUILD_OPTIONS)))
  CCACHE=ccache
  CCACHE_LOGFILE=$(STAMP_DIR)/ccache.log
  _CC:=ccache $(_CC)
  CXX:=ccache $(CXX)
  export CCACHE_LOGFILE
else
  CCACHE=
endif

#command to use to build OOo
BUILDCMD:=$(CURDIR)/$(SOURCE_TREE)/solenv/bin/build.pl $(BUILD_PL_FLAGS) $(PARALLEL) $(BUILD_PL_DMAKEFLAGS)

# Because of the stampdir magic, when you actually want to run a rule
# over, you would have to remove the stamp manually.  Now, just do
# 'debian/rules <target> <target> ... FORCE=1', and the stamp files
# that match the given targets will be removed automagically.
stampdir_targets=build.prepare configure bootstrap instsetoo build 
stampdir_targets+=setup install binary-arch binary-indep
stampdir_targets+=source.make patchapply
stampdir_targets+=source.build source.unpack fix.source.patch source.patch
stampdir_targets+=unfix.source.patch
ifdef FORCE
 DUMMY:=$(shell rm -f $(patsubst %,$(STAMP_DIR)/%,$(filter $(stampdir_targets),$(MAKECMDGOALS))))
endif

# If this is defined, then none of the 'long' commands will be run.  Useful
# for testing.
# test_rules=1

# Since the final stages use up a large amount of diskspace, provide targets to
# remove them without needing a full rebuild

# Clean up the package directories (about 830M) 
clean-debdir:
	dh_testdir
	rm -f debian/*.postinst debian/*.postrm debian/*.preinst debian/*.prerm
	rm -f $(STAMP_DIR)/setup
	dh_clean

# Clean up the installation sets and package directories (about 2.5 Gb!)
clean-instsetoo: clean-debdir
	dh_testdir
	rm -f $(STAMP_DIR)/instsetoo
	# Remove all installation sets
	rm -rf $(SOURCE_TREE)/instsetoo/$(ARCHBUILDDIR)

# Clean compilation results, but leave solver (about 600Mb in addition to instsetoo)
clean-objectdirs: clean-instsetoo
	dh_testdir
	find $(SOURCE_TREE) -maxdepth 2 -name $(ARCHBUILDDIR) -type d -exec rm -rf {} \;
	
clean: source.clean clean-debdir
	dh_testdir
	rm -rf $(STAMP_DIR) $(DEBTREEDIR)
	rm -rf debian/local/stlport-home
	chmod a+x debian/local/openoffice-*-lang debian/scripts/*.sh
	$(MAKE) -f debian/rules control


# Generate control file, because we have so many different languages
# Based on script by Martin Quinson <Martin.Quinson@tuxfamily.org>
control: debian/control
debian/control: debian/control.in debian/control.lang.in
	cat > debian/control < debian/control.in

	for LNUM in `debian/local/openoffice-xlate-lang -p all ` ; do \
	    LNAME=`debian/local/openoffice-xlate-lang -l $$LNUM`; \
	    LCODE=`debian/local/openoffice-xlate-lang -i $$LNUM | tr A-Z a-z`; \
	    SUGGESTS=; \
	    sed -e "s|@LNAME@|$$LNAME|g" -e "s|@LCODE@|$$LCODE|g" \
	        -e "s|@SUGGESTS@|$$SUGGESTS|g" \
	        >> debian/control < debian/control.lang.in; \
	done

.DELETE_ON_ERROR: debian/control

# All 'important' targets have 2 lines.  The one that is run by
# dpkg-buildpackage or the user, and the one that does the actual work.  This
# indirection is needed so that the 'stamp' files that signify when a rule is
# done can be located in a separate 'stampdir'.  Recall that make has no way to
# know when a goal has been met for a phony target (like "build" or "install").
#
# At the end of each stampdir target, be sure to run the command 'touch $@'
# so that the target will not be run again.  Removing the file will make
# make run the target over.

# Build step 1 - prepare source tree
build.prepare: $(STAMP_DIR)/build.prepare
$(STAMP_DIR)/build.prepare: $(STAMP_DIR)/source.make
	dh_testdir

	chmod a+x debian/local/openoffice-*-lang debian/scripts/*.sh

	$(MAKE) -f debian/rules control

	#rm -rf $(SOURCE_TREE)/external/gpc

	# making stlport home
#	if [ ! -d debian/local/stlport-home ]; then \
#	  mkdir debian/local/stlport-home ;\
#	  ln -s /usr/include debian/local/stlport-home/include ;\
#	  ln -s /usr/lib debian/local/stlport-home/lib ;\
#	fi

	# WorkArounds to fix the buildbugs

	#Workaround for buildbug in 641c
	#mkdir -p $(SOURCE_TREE)/solver/$(BUILDNUM)/unxl
	mkdir -p $(SOURCE_TREE)/solver/$(BUILDNUM)/$(ARCHBUILDDIR)/inc
	touch $(SOURCE_TREE)/solver/$(BUILDNUM)/$(ARCHBUILDDIR)/inc/minormkchanged.flg

	#Workaround for builder on PPC belongs to mozilla codes
ifneq "$(ARCH)" "i386"
	cp -rvf ../mozlibs/* $(SOURCE_TREE)/moz/zipped/
endif
	#mkdir -p $(SOURCE_TREE)/solver/$(BUILDNUM)/$(ARCHBUILDDIR)/inc/external/gpc
	#cp -f $(SOURCE_TREE)/external/gpc/gpc.c $(SOURCE_TREE)/external/gpc/gpc.h \
	#	$(SOURCE_TREE)/solver/$(BUILDNUM)/$(ARCHBUILDDIR)/inc/external/gpc

	#Workaround for xml files
	#mkdir -p $(SOURCE_TREE)/solver/$(BUILDNUM)/$(ARCHBUILDDIR)/xml
	#cp -r debian/local/office $(SOURCE_TREE)/solver/$(BUILDNUM)/$(ARCHBUILDDIR)/

	#If using compiler cache, place links to ccache on the path before the compilers
	#if [ -n "$(CCACHE)" ];then \
	#  for I in gcc gcc-3.0 gcc-3.1 gcc-3.2 g++ g++-3.0 g++-3.1 g++-3.2 ; \
	#  do ln -sf "`which ccache`" $(SOURCE_TREE)/solenv/bin/$$I;done;\
	#fi

	# OK, If we want to use the new bison-1.35 package in sid we need
	# this hack
	if [ -x /usr/bin/bison-1.35 ]; then ln -sf "`which bison-1.35`" \
		$(SOURCE_TREE)/solenv/bin/bison; fi
	
	# In the 1.0.1 tarball, some scripts are not executable
	chmod ugo+x $(SOURCE_TREE)/solenv/bin/*.pl

	touch $@

# Build step 2 - configure
configure: $(STAMP_DIR)/configure
$(STAMP_DIR)/configure: $(STAMP_DIR)/build.prepare
	dh_testdir

	# Make sure we have a valid JDK.  If this test fails, please install the JDK
	# package (j2sdk1.3), or add the path to debian/scripts/detect_java.sh
	test -d $(JDK_HOME)

	# Remove config.cache so we always generate config again
	rm -f $(SOURCE_TREE)/config_office/config.cache

	export CC="$(_CC)" ; cd $(SOURCE_TREE)/config_office && autoconf && \
	  sh ./configure $(GCC3) \
	    --with-lang=ALL \
	    --with-jdk-home=$(JDK_HOME)
#	    --with-stlport4-home=$(CURDIR)/debian/local/stlport-home 
	touch $@
	

# Build step 3 - bootstrap
bootstrap: $(STAMP_DIR)/bootstrap
$(STAMP_DIR)/bootstrap: $(STAMP_DIR)/configure
	dh_testdir

	export CC="$(_CC)" ; cd $(SOURCE_TREE) && tcsh -c 'source $(ENVFILE); ./bootstrap'

	# Copy files needed when building with libgpc (this is non-free and
	# therefore not part of the official Debian packages)
	#mkdir -p $(SOURCE_TREE)/solver/$(BUILDNUM)/$(ARCHBUILDDIR)/inc/external/gpc
	#mkdir -p $(SOURCE_TREE)/solver/$(BUILDNUM)/$(ARCHBUILDDIR)/lib
	#cp /usr/include/gpcl/gpc.h $(SOURCE_TREE)/solver/$(BUILDNUM)/$(ARCHBUILDDIR)/inc/external/gpc
	#cp /usr/lib/libgpcl*.so  $(SOURCE_TREE)/solver/$(BUILDNUM)/$(ARCHBUILDDIR)/lib

	touch $@

# Build step 4 - instsetoo (build complete project and installation sets)
instsetoo: $(STAMP_DIR)/instsetoo
$(STAMP_DIR)/instsetoo: $(STAMP_DIR)/bootstrap
	dh_testdir

	rm -rf $(SOURCE_TREE)/instsetoo/$(ARCHBUILDDIR)

	echo DISTCC_HOSTS:$(DISTCC_HOSTS)
	export CC="$(_CC)" ; cd $(SOURCE_TREE) && \
	    tcsh -c 'source $(ENVFILE); cd instsetoo &&	$(BUILDCMD)'

	touch $@

# Build step 4a - project (build individual project)
# for an overview, see:
#	http://www.openoffice.org/dev_docs/source/build_linux.html#BuildingIndividualProjects
# This target is not used by the main build, but may be useful to just build a troublesome project.
# You need to specify a project like this:
#   debian/rules buildprj PRJ=<module>
PRJ=unknown-project
# See http://tools.openoffice.org/modules.html for a list of modules that can be built.

buildprj: $(STAMP_DIR)/bootstrap
	dh_testdir

	# run dmake with xfvb-run
	export CC="$(_CC)" ; cd $(SOURCE_TREE) && \
	    tcsh -c 'source $(ENVFILE); cd $(PRJ) &&	$(XVFB) $(BUILDCMD)'

	-echo Project $(PRJ) build successful

#
# Build step 5 - generate maintainer scripts
build: $(STAMP_DIR)/build
$(STAMP_DIR)/build: $(STAMP_DIR)/instsetoo
	dh_testdir

	# there is a problem that uno_writerdb.rdb does not exist, so setup does not work.
	# This is a workaround
	#cp $(SOURCE_TREE)/solver/$(BUILDNUM)/$(ARCHBUILDDIR)/bin/setup_services.rdb \
	#   $(SOURCE_TREE)/solver/$(BUILDNUM)/$(ARCHBUILDDIR)/bin/uno_writerdb.rdb
	#zip -j -5 "f0_061" $(SOURCE_TREE)/solver/$(BUILDNUM)/$(ARCHBUILDDIR)/bin/uno_writerdb.rdb
	#mv f0_061.zip $(SOURCE_TREE)/instsetoo/$(ARCHBUILDDIR)/$(BUILDLANG)/normal

	# generate maintainer scripts from *.in
	# or generate default script which calls hook in openoffice.org-debian-files package
	for PKG in `dh_listpackages`; do \
	  for FILE in postinst postrm preinst prerm; do \
	    MAINTSCRIPT=debian/$$PKG.$$FILE ; \
	    if [ -e $$MAINTSCRIPT.in ]; then \
	      sed -n '1,/^#INCLUDE_SHELL_LIB#$$/p' < $$MAINTSCRIPT.in | sed -e '/^#INCLUDE_SHELL_LIB#$$/d' > $$MAINTSCRIPT; \
	      cat debian/shell-lib.sh >> $$MAINTSCRIPT; \
	      sed -n '/^#INCLUDE_SHELL_LIB#$$/,$$p' < $$MAINTSCRIPT.in | sed -e '/^#INCLUDE_SHELL_LIB#$$/d' >> $$MAINTSCRIPT; \
	    else \
	      echo '#!/bin/sh' > $$MAINTSCRIPT ; \
	      echo THIS_PACKAGE=$$PKG >> $$MAINTSCRIPT ;\
	      echo THIS_SCRIPT=$$FILE >> $$MAINTSCRIPT ;\
	      cat debian/shell-lib.sh >> $$MAINTSCRIPT; \
	    fi; \
	  done; \
	done
	touch $@

# Run openoffice setup for net install
setup: $(STAMP_DIR)/setup
$(STAMP_DIR)/setup: $(STAMP_DIR)/build
	dh_testdir
	dh_testroot
	umask 022
	dh_clean -k

	# Packagers - if you are working on improving the .debs, you can
	# run setup and rebuild over and over like this:
	# rm debian/stampdir/setup ; dpkg-buildpackage -nc -rfakeroot

	rm -rf $(DEBTREEDIR)
	rm -f $(STAMP_DIR)/install.log
	mkdir -p $(PKGOPENOFFICEDIR)

	sed -e "s#@DESTDIR@#$(PKGOPENOFFICEDIR)#" \
	    -e "s#@LOGFILE@#$(CURDIR)/$(STAMP_DIR)/install.log#" \
		debian/local/rsfile.global.txt > debian/local/rsfile.txt

	# Run OOo setup using response file.
	$(XVFB) $(SOURCE_TREE)/instsetoo/$(ARCHBUILDDIR)/$(BUILDLANG)/normal/setup -v \
				-R:$(CURDIR)/debian/local/rsfile.txt

	rm -f debian/local/rsfile.txt

	touch $@

# Install files generated by setup into package directories
install: $(STAMP_DIR)/install
$(STAMP_DIR)/install: debian/openoffice.org.install debian/openoffice.org-bin.install
$(STAMP_DIR)/install: debian/MANIFEST.$(ARCH) debian/openoffice.org.dirs
$(STAMP_DIR)/install: $(STAMP_DIR)/setup
	dh_testdir
	dh_testroot
	umask 022

	# Remove package directories
	rm -rf debian/openoffice.org debian/openoffice.org-bin
	rm -f debian/openoffice.org.*.debhelper
	rm -f debian/openoffice.org-bin.*.debhelper

	dh_installdirs

	# compare manifests
	(cd debian/tmp && find -type f | LC_ALL=C sort | cut -c3-) > debian/MANIFEST.$(ARCH).new
	# confirm that the installed file list has not changed
	if [ -e debian/MANIFEST.$(ARCH) ]; then \
	  if ! cmp -s debian/MANIFEST.$(ARCH) debian/MANIFEST.$(ARCH).new; then \
	    diff -u -0 debian/MANIFEST.$(ARCH) debian/MANIFEST.$(ARCH).new; \
	    if [ -n "$$IGNORE_MANIFEST_CHANGES" ]; then \
	      echo 'MANIFEST check failed; ignoring problem because \$$IGNORE_MANIFEST_CHANGES set' >&2; \
	      echo 'Please ensure that the package maintainer has an up-to-date version of the' >&2; \
	      echo 'MANIFEST.$(ARCH) file.' >&2; \
	    $(ELSE) \
	      echo 'MANIFEST check failed; please see debian/README' >&2; \
	      exit 1; \
	    fi; \
	  fi; \
	fi;

	dh_install --sourcedir=debian/tmp

	# Disable desktop (KDE, GNOME, CDE) integration for user installs
	# Copied from Mandrake.  Thanks, Gwenole!
	for module in GID_MODULE_OPTIONAL_GNOME gid_Module_Optional_Kde gid_Module_Optional_Cde; do \
	   perl -pi -e "/^Module $$module/ .. /^End/ and s|(Installed.*)=.*|\1= NO;|" \
	       debian/openoffice.org-bin/usr/lib/openoffice/program/instdb.ins ;\
	done

	# convert program/icon paths in desktop shortcuts
	for I in debian/openoffice.org/usr/share/applnk/*/*.desktop debian/openoffice.org/usr/share/gnome/apps/net/*.desktop ;do \
	    sed -e 's,Exec="\?/.*\(/usr/lib/openoffice/program/setup\)"\?,Exec=\1,' \
	        -e 's,Exec="\?/.*/usr/lib/openoffice/program/s\([^"]*\)"\?,Exec=/usr/bin/oo\1,' \
	        -e 's,Icon=.*/\([^/]*\.png\),Icon=/usr/lib/openoffice/share/icons/\1,' \
	        < "$$I" > "$$I.new" ;\
	    rm "$$I"; mv "$$I.new" "$$I" ;\
	done
	 
ifeq "$(ARCH)" "i386"
	cp -rf $(PKGOPENOFFICEDIR)/program/libmozab2.so $(CURDIR)/debian/openoffice.org-bin/usr/lib/openoffice/program/libmozab2.so
	cp -rf $(PKGOPENOFFICEDIR)/program/libmozabdrv2.so $(CURDIR)/debian/openoffice.org-bin/usr/lib/openoffice/program/libmozabdrv2.so
endif

	# Remove packaging prefix from configuration files
	# and set default install directory to ~/.openoffice/<version>
	for FILE in debian/openoffice.org-bin/$(OPENOFFICEDIR)/program/instdb.ins \
		    debian/openoffice.org/$(OPENOFFICEDIR)/share/config/registry/instance/org/openoffice/Setup.xml \
		    debian/openoffice.org/$(OPENOFFICEDIR)/share/config/registry/instance/org/openoffice/Office/Common.xml; do \
	  sed -e 's#$(PKGOPENOFFICEDIR)#$(OPENOFFICEDIR)#g' \
	      -e 's#\(DefaultDestPath *= *"\)OpenOffice.org#\1.openoffice/#' \
	     "$$FILE" > "$$FILE".new; \
	  mv "$$FILE".new "$$FILE"; \
	done

	# there are some wrong permissions; fix them ourselves
	find debian/openoffice.org debian/openoffice.org-bin \
		-type f \( -name "*.xpt" -o -name "*.js" -o -name "*en_US.*" \
		        -o -name "component.reg" -o -name "xpti*.dat" \) -exec chmod ugo-x {} \;
	for FILE in editpic poll savepic show webcast; do\
	    chmod ugo+x debian/openoffice.org/usr/lib/openoffice/share/config/webcast/$$FILE.pl ;\
	done

	# install regcomp utilility
	install -m755 $(SOURCE_TREE)/solver/$(BUILDNUM)/$(ARCHBUILDDIR)/bin/regcomp \
		debian/openoffice.org-bin/$(OPENOFFICEDIR)/program

	touch $@

# Install files generated by setup into package directories
langpacks: $(STAMP_DIR)/langpacks
$(STAMP_DIR)/langpacks: $(STAMP_DIR)/setup
	for ext in `debian/local/openoffice-xlate-lang -i all|tr A-Z a-z` ; do \
	  rm -rf debian/openoffice.org-l10n-$$ext;\
	  rm -rf debian/openoffice.org-l10n-$$ext.*.debhelper;\
	done

	# Install the lang packs
	for prefix in `debian/local/openoffice-xlate-lang -p all`; do  \
          echo "Unpack "`debian/local/openoffice-xlate-lang -l $$prefix`" l10n..."; \
          langiso=`debian/local/openoffice-xlate-lang -i $$prefix|tr A-Z a-z`;      \
	  debian/local/openoffice-dpack-lang                                        \
                -d="debian/openoffice.org-l10n-$$langiso/$(OPENOFFICEDIR)"                     \
                -i=$(SOURCE_TREE)/instsetoo/$(ARCHBUILDDIR)/$$prefix/normal/setup.ins \
	        >/dev/null;                                                           \
	  rm -rf debian/openoffice.org-l10n-$$langiso/$(OPENOFFICEDIR)/help/main_transform.xsl;\
	  ln -s ooo$(BUILDNUM)$$prefix.res \
	        debian/openoffice.org-l10n-$$langiso/$(OPENOFFICEDIR)/program/resource/iso$(BUILDNUM)$$prefix.res ;\
	done

	# move the help and templates to the extra package
	#for prefix in `debian/local/openoffice-xlate-lang -p all|sed 's#01##'`; do  \
	#  echo "prefix=$$prefix"; \
        #  langiso=`debian/local/openoffice-xlate-lang -i $$prefix|tr A-Z a-z`;      \
	#  mkdir -p debian/ooo-ui-extra-$$langiso/usr/lib/openoffice/share;            \
	#  for FILE in help share/template ; do                                        \
        #    if [ -e debian/ooo-ui-$$langiso/usr/lib/openoffice/$$FILE ] ; then        \
	#      mv -v debian/ooo-ui-$$langiso/usr/lib/openoffice/$$FILE \
	#            debian/ooo-ui-extra-$$langiso/usr/lib/openoffice/;                \
	#    fi;                                                                       \
	#  done;                                                                       \
	#done
	# move the lex stuff to the right directory
	#for prefix in `debian/local/openoffice-xlate-lang -p all|sed 's#01##'`; do  \
	#  echo "prefix=$$prefix"; \
        #  langiso=`debian/local/openoffice-xlate-lang -i $$prefix|tr A-Z a-z`;      \
	#  mkdir -p debian/ooo-lex-$$langiso/usr/lib/openoffice;                       \
	#  for FILE in share user ; do                                                 \
        #    if [ -e debian/ooo-ui-$$langiso/usr/lib/openoffice/$$FILE ] ; then        \
	#      mv -v debian/ooo-ui-$$langiso/usr/lib/openoffice/$$FILE \
        #            debian/ooo-lex-$$langiso/usr/lib/openoffice/;                     \
        #    fi;                                                                       \
	#  done;                                                                       \
	#done

	# remove empty packages
	#for pkg in ui ui-extra lex ; do                                               \
	# for iso in `debian/local/openoffice-xlate-lang -i all| \
        #             sed 's#en##'|tr A-Z a-z`; do                                     \
	#  data=`find debian/ooo-$${pkg}-$$iso/usr/lib/openoffice -type f`;            \
	#  if [ -z $$data ]; then echo "$$pkg"-"$$iso est vide"; fi;                   \
	# done;                                                                        \
	#done

	touch $@


# This single target is used to build all the packages, all at once, or
# one at a time. So keep in mind: any options passed to commands here will
# affect _all_ packages. Anything you want to only affect one package
# should be put in another target, such as the install target.
binary-common:
	dh_testdir
	dh_testroot

	for pkg in `dh_listpackages` ; do \
	  rm -f debian/$$pkg.*.debhelper;\
	  rm -rf debian/$$pkg/DEBIAN;\
	done

	dh_installdocs
	dh_installman
	dh_installchangelogs
	dh_installmime
	dh_installmenu
	dh_link
	dh_strip
	dh_compress
	dh_fixperms
	dh_installdeb
	dh_shlibdeps
	dh_gencontrol
	dh_md5sums
	dh_builddeb

# Build architecture independant packages using the common target.
binary-indep: $(STAMP_DIR)/binary-indep control
$(STAMP_DIR)/binary-indep: $(STAMP_DIR)/install $(STAMP_DIR)/langpacks
	$(MAKE) -f debian/rules DH_OPTIONS=-i binary-common

	touch $@

# Build architecture dependant packages using the common target.
binary-arch: $(STAMP_DIR)/binary-arch control
$(STAMP_DIR)/binary-arch: $(STAMP_DIR)/install
	$(MAKE) -f debian/rules DH_OPTIONS=-a binary-common
	touch $@

# Any other binary targets build just one binary package at a time.
binary-%: $(STAMP_DIR)/install
	make -f debian/rules binary-common DH_OPTIONS=-p$*

binary: binary-arch binary-indep

# Use 'debian/rules environment' to help debug architecture-related problems
# with the rules file.
environment:

	@echo 'Package build environment (not all variables may be set):'
	@echo '$$(ARCH)' is "$(ARCH)"
	@echo '$$(DEB_HOST_ARCH)' is "$(DEB_HOST_ARCH)"
	@echo '$$(BUILD_ARCH)' is "$(BUILD_ARCH)"
	@echo '$$(CURDIR)' is "$(CURDIR)"
	@echo 'See debian/control for build dependencies.'


.PHONY: default build install clean-debian clean binary-arch binary-indep binary
.PHONY: default environment checksource control instsetoo

# vim:set noet ai sts=8 sw=8 tw=0:
