#!/usr/bin/make -f
###################################################################################
# OpenOffice.org source package rules flie
#
# Please see debian/README for detailed documentation about the build system, and
# how to build OpenOffice.org.
###################################################################################
# Authors:
# Chris Halls <halls@debian.org>
# Rene Engelhard <rene@debian.org>
# Copyright 2005 Software in the Public Interest, Inc.
# Licensed under the GNU General Public License, version 2.  See the file
# /usr/share/common-licenses/GPL or <http://www.gnu.org/copyleft/gpl.txt>.
###################################################################################

default: environment
#VER:=2
PKGDIR:=debian/openoffice.org$(VER)
OODIR:=usr/lib/openoffice$(VER)

SOURCE_VERSION:=$(shell head -1 debian/changelog | cut -d\( -f2 | cut -d\) -f1)
UPSTREAM_VERSION:=$(shell echo "$(SOURCE_VERSION)"| cut -d- -f1)
BINARY_VERSION=$(SOURCE_VERSION)
#BINARY_VERSION=1.9.125+2.0beta2-$(shell dpkg-parsechangelog  | grep urgency \
	| awk '{print $$2}' | sed -e s/"("// -e s/")"// | cut -d"-" -f2)
PACKAGES := $(shell dh_listpackages)

ARCH := $(shell dpkg-architecture -qDEB_HOST_ARCH)
DIST := $(shell lsb_release -is)
# Figure out who's building this package.
BUILDER:=$(shell echo $$LOGNAME)
OOO_VENDOR:=Debian
ifeq "$(DIST)" "Ubuntu"
OOO_VENDOR+= and Ubuntu
endif
ifneq "$(BUILDER)" "buildd"
OOO_VENDOR+= ($(BUILDER))
endif
export OOO_VENDOR

# ensure that some scripts we need are executable.
DUMMY:=$(shell if [ ! -x debian/scripts/setperms ]; then chmod 755 debian/scripts/setperms; fi)
DUMMY:=$(shell debian/scripts/setperms)

# debhelper
export DH_OPTIONS
export DH_ALWAYS_EXCLUDE=CVS
#export DH_VERBOSE=1

# work around tcsh bugs.debian.org/339034: tcsh: Unknown colorls variable `su'
unexport LS_COLORS

#TAG=src680-m$(MILESTONE)
#MILESTONE:=$(shell echo "$(UPSTREAM_VERSION)"| cut -d. -f3)
TAG=oob680-m5
SOURCE_TREE=ooo-build/build/$(TAG)
STAMP_DIR=debian/stampdir

# Read in architecture-specific variables of importance.
#include debian/scripts/vars.$(ARCH)

SARGE_BACKPORT=n

ifneq "$(USE_EXTERNAL_MYTHES)" "y"
  ifeq ($(ARCH),$(findstring $(ARCH),$(shell dpkg-architecture -L | sed -e s/i386// -e s/powerpc// -e s/sparc//)))
       BUILD_ONLY_LIBMYTHES=y
  else
    ifeq "$(ARCH)" "amd64"
      ifneq "$(BUILD_AMD64)" "y"
               BUILD_ONLY_LIBMYTHES=y
      endif
    endif
  endif
endif

ifeq "$(SARGE_BACKPORT)" "y"
OS:= $(shell dpkg-architecture -qDEB_HOST_GNU_SYSTEM)
else
OS:= $(shell dpkg-architecture -qDEB_HOST_ARCH_OS)
endif

# Which patchset?
ifeq ($(ARCH),amd64)
  PATCHSET=$(DIST)64
else
  ifeq "$(DIST)" "Debian"
    ifeq "$(SARGE_BACKPORT)" "y"
      PATCHSET=$(DIST)Sarge
    else
      PATCHSET=$(DIST)
    endif
  else
    PATCHSET=$(DIST)
  endif
endif

BUILD_DEPS=

ifeq "$(DIST)" "Ubuntu"
	BUILD_AMD64=y
	OOO_ARCHS+= amd64
endif

ifeq "$(ARCH)" "amd64"
	BUILD_PYUNO=n
else
	BUILD_PYUNO=y
	WRITER_PYUNO_DEP=, python-uno (>> $(UPSTREAM_VERSION))
endif
ifeq "$(BUILD_PYUNO)" "n"
  DEBHELPER_OPTIONS+= -Npython-uno
endif

ifeq "$(SARGE_BACKPORT)" "y"
	BUILD_DBG_PACKAGE = n
else
	BUILD_DBG_PACKAGE = n
endif

ifneq "$(BUILD_DBG_PACKAGE)" "y"
	DH_COMPAT=4
	BUILD_DEPS += , debhelper (>= 4.2.21)
	SMALL_SYMBOLS = y
else
	DH_COMPAT=5
	BUILD_DEPS += , debhelper (>= 5)
	SMALL_SYMBOLS = n
endif
export DH_COMPAT

ifeq "$(DIST)" "Ubuntu"
	PACKAGE_QA_TOOLS=y
else
	PACKAGE_QA_TOOLS=n
endif

PACKAGE_TTF_OPENSYMBOL=y
PACKAGE_NPSOPLUGIN=n

#ifneq (,$(findstring $(ARCH), i386))
#	BUILD_JARS_NATIVE=y
#	REBUILD_JARS_NATIVE=y
#else
	BUILD_JARS_NATIVE=n
#	DEBHELPER_OPTIONS+= -Nopenoffice.org$(VER)-gcj
#endif

ifneq "$(PACKAGE_QA_TOOLS)" "y"
	DEBHELPER_OPTIONS+= -Nopenoffice.org$(VER)-qa-tools -Nopenoffice.org$(VER)-qa-api-tests
endif
ifneq "$(PACKAGE_TTF_OPENSYMBOL)" "y"
	DEBHELPER_OPTIONS+= -Nttf-opensymbol
endif

SHLIBS_OVERRIDE = --

# build the binfilters?
ifeq "$(ARCH)" "amd64"
	BUILD_BINFILTERS=n
else
	BUILD_BINFILTERS=y
endif

# we should be installed on sid/sarge, use libstdc++/libgcc_s internal for now
# This won't help for -officebean which needs libgcj6 but for the "normal"
# packages...
INTERNAL_STDLIBS=n
ifeq "$(INTERNAL_STDLIBS)" "y"
	SHLIBS_OVERRIDE+=-- -Ldebian/shlibs.override.stdlibs
endif

ifeq "$(DIST)" "Debian"
  # we don't need to build all languages and the thesaurus on the buildds;
  # they do binary-only builds anyway
  ifeq (buildd,$(shell whoami))
	BUILD_ONLY_EN_US=y
  endif
endif

ifneq "$(BUILD_ONLY_EN_US)" "y"
  ifeq (lang=,$(findstring lang=,$(DEB_BUILD_OPTIONS)))
    ISOS="$(shell echo "$(DEB_BUILD_OPTIONS)," | sed -n 's/^.*lang=\([^,]*\),.*/\1/p')"
    HELPISOS=$(shell echo "$(DEB_BUILD_OPTIONS)," | sed -n 's/^.*lang=\([^,]*\),.*/\1/p')
    LANGPACKISOS=$(shell echo "$(DEB_BUILD_OPTIONS)," | sed -n 's/^.*lang=\([^,]*\),.*/\1/p')
  else
    # Note that the first one here *has to be* en-US. the first one gets
    # gid_Module_Root as filelist later and the rest gid_Module_Root.$iso
    # but we can't/shouldn't do dynamic switching, so let en-US be the first
    # one to that gid_Module_Root always is english and the other langpacks
    # have gid_Module_Root.$iso
    #ISOS="$(shell ooo-build/bin/openoffice-xlate-lang -i all')"
    ISOS:="en-US af ar be-BY bg bn br bs ca cs cy da de el en-GB en-ZA es et fi fr ga gu-IN he hi-IN hr hu nb nl nn it ja km ko lo lt mk pa-IN pl pt-BR ru rw sk sl sr-CS st sv th tn tr ts vi xh zh-CN zh-TW zu"
    #HELPISOS:=$(shell ooo-build/bin/openoffice-xlate-lang -i all') 
    HELPISOS:=en-US cs da de en-GB es et fr hu it ja ko nl pt-BR sv zh-CN zh-TW
    #LANGPACKISOS:=$(shell ooo-build/bin/openoffice-xlate-lang -i all')
    LANGPACKISOS:=en-US af ar be-BY bg bn br bs ca cs cy da de el en-GB en-ZA es et fi fr ga gu-IN he hi-IN hr hu nb nl nn it ja km ko lo lt mk pa-IN pl pt-BR ru rw sk sl sr-CS st sv th tn tr ts vi xh zh-CN zh-TW zu
  endif
else
  ISOS="en-US"
  HELPISOS=en-US
  LANGPACKISOS=en-US
endif

# Default flags to pass to configure of ooo-build
CONFIGURE_FLAGS= --disable-post-install-scripts \
                 --with-tag=$(TAG) \
		 --with-system-gcc \
		 --with-distro=$(PATCHSET) \
		 --with-vendor=Debian \
		 --enable-package-directories \
		 --with-installed-ooo-dirname=openoffice$(VER) \
		 --mandir=/usr/share/man \
		 --with-lang=$(ISOS) \
		 --with-build-version="openoffice.org$(VER)-core $(BINARY_VERSION), `date`" \
		--disable-strip \
		--enable-atkbridge \
		--enable-lockdown

ifeq "$(VER)" ""
	CONFIGURE_FLAGS += --with-binsuffix=no
else
	CONFIGURE_FLAGS += --with-binsuffix=$(VER)
endif

# !m68k is just a placeholder to avoid syntax errors due to this being empty
NO_JAVA_ARCHS = !m68k
ifeq "$(ARCH)" "sparc"
  ifneq "$(SARGE_BACKPORT)" "y"
	ENABLE_JAVA=y
  else
	ENABLE_JAVA=n
  endif
else
	ENABLE_JAVA=y
endif

ifeq "$(ENABLE_JAVA)" "y"
ifneq "$(SARGE_BACKPORT)" "y"
	JAVA_HOME=/usr/lib/jvm/java-gcj
	CONFIGURE_FLAGS += --with-java=gij
	BUILD_DEPS += , java-gcj-compat-dev (>= 1.0.28-8) [$(NO_JAVA_ARCHS)], ant (>= 1.6.5) [$(NO_JAVA_ARCHS)]
  ifeq (,$(findstring sparc,$(NO_JAVA_ARCHS)))
		BUILD_DEPS += , java-gcj-compat-dev (>= 1.0.54-0) [sparc]
  endif
	SYSTEM_XT=y
	SYSTEM_XALAN=y
	SYSTEM_XERCES=y
	SYSTEM_XML_APIS=y
else
ifeq "$(ARCH)" "i386"
	JAVA_HOME=/usr/lib/j2se/1.4
else
	JAVA_HOME=/usr/lib/j2sdk1.4-ibm
endif
	BUILD_DEPS += , j2sdk1.4 [i386], j2sdk1.4-ibm [powerpc], ant [$(NO_JAVA_ARCHS)]
	CONFIGURE_FLAGS += --with-system-xml-apis
	SYSTEM_XT=n
	SYSTEM_XALAN=y
	SYSTEM_XERCES=y
	SYSTEM_XML_APIS=y
endif
export JAVA_HOME
	CONFIGURE_FLAGS += --with-jdk-home=$(JAVA_HOME)
	JAVA_COMMON_DEPENDS= , openoffice.org$(VER)-java-common
  ifeq "$(SYSTEM_XT)" "y"
	CONFIGURE_FLAGS += --with-system-xt	
	JAVA_COMMON_JAVA_DEPENDS+= , libxt-java (>= 0.20050823)
	BUILD_DEPS += , libxt-java (>= 0.20050823) [$(NO_JAVA_ARCHS)]
  endif
  ifeq "$(SYSTEM_XERCES)" "y"
	CONFIGURE_FLAGS += --with-system-xerces
	BUILD_DEPS += , libxerces2-java [$(NO_JAVA_ARCHS)]
	JAVA_COMMON_JAVA_DEPENDS+= , libxerces2-java
  endif
  ifeq "$(SYSTEM_XALAN)" "y"
	CONFIGURE_FLAGS += --with-system-xalan
	BUILD_DEPS += , libxalan2-java (>= 2.6.0-1) [$(NO_JAVA_ARCHS)]
	JAVA_COMMON_JAVA_DEPENDS+= , libxalan2-java (>= 2.6.0-1)
  endif
  ifeq "$(SYSTEM_XML_APIS)" "y"
	CONFIGURE_FLAGS += --with-system-xml-apis
	BUILD_DEPS += , libjaxp1.2-java [$(NO_JAVA_ARCHS)]
	JAVA_COMMON_JAVA_DEPENDS+= , libjaxp1.2-java
  endif
  ifneq "$(SARGE_BACKPORT)" "y"
	BUILD_DEPS += , libdb4.2-java (>= 4.2.52-21) [$(NO_JAVA_ARCHS)]
  else
	BUILD_DEPS += , libdb4.2-java [$(NO_JAVA_ARCHS)]
  endif
else
	CONFIGURE_FLAGS += --without-java
	DEBHELPER_OPTIONS += -Nopenoffice.org$(VER)-officebean -Nopenoffice.org$(VER)-java-common
	HELPISOS=
endif

#ifeq "$(DIST)" "Ubuntu"
#	USE_FIREFOX=y
#else
#	USE_FIREFOX=n
#endif
#ifeq "$(USE_FIREFOX)" "y"
#	CONFIGURE_FLAGS+= --with-firefox
#	BUILD_DEPS+= , firefox-dev, libnspr-dev
#else
	BUILD_DEPS+= , mozilla-dev
#endif
BUILD_DEPS+= , libnss-dev (>= 1.7.5)

ENABLE_MONO=n
ifeq "$(ENABLE_MONO)" "y"
       BUILD_DEPS += , mono-mcs (>= 1.1.8), libmono-dev (>= 1.1.8), cli-common (>= 0.2.0)
	# http://pkg-mono.alioth.debian.org/cli-policy/ch-mono.html#s7.3
	export MONO_SHARED_DIR=$(CURDIR)
else
       CONFIGURE_FLAGS+= --disable-mono
endif

ifeq "$(SARGE_BACKPORT)" "y"
	USE_SYSTEM_HUNSPELL=n
else
	USE_SYSTEM_HUNSPELL=y
endif
ifeq "$(USE_SYSTEM_HUNSPELL)" "y"
		BUILD_DEPS += , libhunspell-dev (>= 1.0.8-3)
		CONFIGURE_FLAGS+= --with-system-hunspell
endif

ifeq "$(SARGE_BACKPORT)" "y"
       SYSTEM_ALTLINUXHYPH=n
else
       SYSTEM_ALTLINUXHYPH=y
endif
ifeq "$(SYSTEM_ALTLINUXHYPH)" "y"
	BUILD_DEPS += , libaltlinuxhyph-dev (>= 0.1.1-8)
	CONFIGURE_FLAGS += --with-system-altlinuxhyph
endif

ifeq "$(SARGE_BACKPORT)" "y"
       SYSTEM_AGG=n
else
  ifeq "$(DIST)" "Debian"
       SYSTEM_AGG=y
  else
       SYSTEM_AGG=n
  endif
endif
ifeq "$(SYSTEM_AGG)" "y"
       BUILD_DEPS += , libagg-dev (>= 2.3-2)
       CONFIGURE_FLAGS += --with-system-agg
endif

USE_STLPORT=y
USE_SYSTEM_STLPORT=y
ifneq "$(USE_STLPORT)" "y"
	CONFIGURE_FLAGS += --without-stlport4
else
  ifeq "$(USE_SYSTEM_STLPORT)" "y"
    ifneq "$(SARGE_BACKPORT)" "y"
	BUILD_DEPS += , libstlport4.6-dev (>= 4.6.2-3)
	DEV_STL_DEPENDS=, libstlport4.6-dev (>= 4.6.2-3)
    else
	BUILD_DEPS += , libstlport4.6-dev
	DEV_STL_DEPENDS=, libstlport4.6-dev
    endif
	CONFIGURE_FLAGS+= --with-stlport4=$(CURDIR)/stlport4
  endif
endif

USE_SYSTEM_BOOST=y
ifeq "$(USE_SYSTEM_BOOST)" "y"
	BUILD_DEPS += , libboost-dev
	CONFIGURE_FLAGS += --with-system-boost
endif


ifeq "$(SARGE_BACKPORT)" "y"
	USE_SYSTEM_PORTAUDIO=n
else
	USE_SYSTEM_PORTAUDIO=y
endif
ifeq "$(USE_SYSTEM_PORTAUDIO)" "y"
	BUILD_DEPS += , libportaudio-dev
	CONFIGURE_FLAGS += --with-system-portaudio
endif

USE_EXTERNAL_CXXLIBS=y
ifeq "$(USE_EXTERNAL_CXXLIBS)" "y"
  ifeq "$(SARGE_BACKPORT)" "y"
       BUILD_DEPS += , libwpd8-dev
  else
       BUILD_DEPS += , libwpd8-dev (>= 0.8.3-3)
  endif
       CONFIGURE_FLAGS+=  --with-system-libwpd
USE_SYSTEM_SABLOT=n
ifeq "$(USE_SYSTEM_SABLOT)" "y"
	BUILD_DEPS += , libsablot0-dev (>= 1.0.2-4)
	CONFIGURE_FLAGS += --with-system-sablot
endif
USE_EXTERNAL_MYTHES=n
ifeq "$(USE_EXTERNAL_MYTHES)" "y"
	BUILD_DEPS += , libmythes-dev (>= 1.0-2)
	CONFIGURE_FLAGS += --with-system-mythes
	DEBHELPER_OPTIONS+= -Nlibmythes-dev
endif
endif

ifeq "$(SARGE_BACKPORT)" "y"
	USE_SYSTEM_ICU=n
else
	USE_SYSTEM_ICU=y
endif
ifeq "$(USE_SYSTEM_ICU)" "y"
	BUILD_DEPS += , libicu34-dev
	CONFIGURE_FLAGS += --with-system-icu
	# ICU utils are in /usr/sbin (!)
	PATH+=:/usr/sbin
endif

ifeq "$(DIST)" "Debian"
ifeq "$(SARGE_BACKPORT)" "y"
	USE_SYSTEM_XMLSEC=n
else
	USE_SYSTEM_XMLSEC=y
endif
else
	USE_SYSTEM_XMLSEC=n
endif
ifeq "$(USE_SYSTEM_XMLSEC)" "y"
	BUILD_DEPS += , libxmlsec1-dev (>= 1.2.9), libxmlsec1-nss (>= 1.2.9), libxmlsec1-openssl (>= 1.2.9)
	CONFIGURE_FLAGS += --with-system-xmlsec
else
	SHLIBS_OVERRIDE += -Ldebian/shlibs.override.xmlsec
endif

ifeq "$(SARGE_BACKPORT)" "y"
	BUILD_CAIROCANVAS=n
else
	BUILD_CAIROCANVAS=y
endif
USE_SYSTEM_CAIRO=y
ifeq "$(BUILD_CAIROCANVAS)" "y"
  ifeq "$(USE_SYSTEM_CAIRO)" "y"
    BUILD_DEPS+= , libcairo2-dev, libglitz-glx1-dev
    CONFIGURE_FLAGS+= --with-system-cairo
  endif
else
  CONFIGURE_FLAGS+= --disable-cairo
endif

BUILD_MDBTOOLS=n
ifeq "$(SARGE_BACKPORT)" "y"
	USE_SYSTEM_MDBTOOLS=n
else
	USE_SYSTEM_MDBTOOLS=y
endif
ifneq "$(BUILD_MDBTOOLS)" "y"
  CONFIGURE_FLAGS+= --disable-access
else
  ifeq "$(USE_SYSTEM_MDBTOOLS)" "y"
    BUILD_DEPS += , mdbtools-dev (>= 0.5.99.0.6pre1.0.20050409-1)
    CONFIGURE_FLAGS += --with-system-mdbtools
  endif
endif

BUILD_KDE=y
ifeq "$(BUILD_KDE)" "n"
		  CONFIGURE_FLAGS+= --disable-kde
		  DEBHELPER_OPTIONS+= -Nopenoffice.org$(VER)-kde
		  CONFIGURE_FLAGS+= --with-images="industrial crystal hicontrast"
else
ifeq "$(DIST)" "Debian"
ifneq "$(SARGE_BACKPORT)" "y"
# 02:59 < dato> _rene_: with kdelibs-dev 3.4.2-2, you should be able to install
#          libgamin-dev now, instead of libfam-dev. as a workaround till the
#          real solution comes, but some people would call it "the real
#          solution" :)
       BUILD_DEPS += , kdelibs4-dev (>= 4:3.4.3-2)
       BUILD_DEPS += , libgamin-dev
else
       BUILD_DEPS += , kdelibs4-dev
endif
else
       BUILD_DEPS += , kdelibs4-dev (>= 4:3.5-rc2)
endif
endif

ifeq "$(BUILD_BINFILTERS)" "y"
		CONFIGURE_FLAGS+= --enable-binfilter
		OOO_FILTER52_DEP = openoffice.org$(VER)-filter-so52
else
		DEBHELPER_OPTIONS+= -Nopenoffice.org$(VER)-filter-so52
endif

ifeq "$(ENABLE_JAVA)" "y"
  ifeq "$(SARGE_BACKPORT)" "y"
	USE_SYSTEM_HSQLDB=n
  else
	USE_SYSTEM_HSQLDB=y
  endif
  ifeq "$(USE_SYSTEM_HSQLDB)" "y"
	BUILD_DEPS += , libhsqldb-java (>= 1.8.0.0-2) [$(NO_JAVA_ARCHS)]
	BASE_HSQLDB_DEPENDS = libhsqldb-java (>= 1.8.0.0-2)
	CONFIGURE_FLAGS+= --with-system-hsqldb
  endif

  ifeq "$(DIST)" "Debian"
    ifeq "$(SARGE_BACKPORT)" "y"
	USE_SYSTEM_BSH=n
    else
	USE_SYSTEM_BSH=y
    endif
  else
	USE_SYSTEM_BSH=n
  endif
  ifeq "$(USE_SYSTEM_BSH)" "y"
	BUILD_DEPS += , bsh (>= 2.0b4-1) [$(NO_JAVA_ARCHS)]
	COMMON_BSH_DEPENDS = bsh (>= 2.0b4-1)
	CONFIGURE_FLAGS+= --with-system-beanshell
  endif
endif

#		 --with-ooo-builddir=$(CURDIR) \
#		 --with-src=$(CURDIR) \

# Use compiler cache?  Include ccache in DEB_BUILD_OPTIONS for much faster rebuild times
# A complete build uses about 200Mb of compiler cache.
ifeq (ccache,$(findstring ccache,$(DEB_BUILD_OPTIONS)))
  CONFIGURE_FLAGS += --with-gcc-speedup=ccache
endif

# Small symbols?
ifeq "$(SMALL_SYMBOLS)" "y"
  CONFIGURE_FLAGS += --enable-symbols=SMALL
endif

# Restart build from a particular project?
# DEB_BUILD_OPTIONS=from=<projectname>
BUILD_FROM=$(shell echo "$(DEB_BUILD_OPTIONS)," | sed -n 's/^\(.*,\)\?from=\([a-zA-Z0-9]\+\).*$$/\2/p')
export BUILD_FROM

# Build n projects in paralell?
# DEB_BUILD_OPTIONS=num-cpus=<n>
NUM_CPUS=$(shell echo "$(DEB_BUILD_OPTIONS)," | sed -n 's/^\(.*,\)\?num-cpus=\([0-9]\+\).*$$/\2/p')
ifneq "$(NUM_CPUS)" ""
  CONFIGURE_FLAGS += --with-num-cpus=$(NUM_CPUS)
endif

# Build python depends from current python version
PYMAJOR:=$(shell python -c "import sys; print sys.version_info[0]")
PYMINOR:=$(shell python -c "import sys; print sys.version_info[1]")
PYMINORPLUS1:=$(shell python -c "import sys; print sys.version_info[1]+1")
PYTHON_SITE:=debian/python-uno/usr/lib/python$(PYMAJOR).$(PYMINOR)/site-packages

CURDIR ?= $(shell pwd)

ifeq "$(ARCH)-linux" "sparc-linux"
	# use 32-bit compiler
	CC_PREFIX=sparc-linux-gnu-
endif

ifeq "$(SARGE_BACKPORT)" "y"
	GCC_VERSION = 3.3
else
	GCC_VERSION =
	GCJ_VERSION = $(shell $(JAVA_HOME)/bin/gcj --version | head -n 1 | awk '{ print $$3; }' | cut -d"." -f1,2)
endif
ifeq ($(GCC_VERSION),)
	BUILD_PATH = /usr/lib/jvm/java-gcj/bin:$$PATH
else
ifeq ($(GCC_VERSION),snapshot)
	BUILD_PATH = /usr/lib/jvm/java-gcj/bin:/usr/lib/gcc-snapshot/bin:$$PATH
	BUILD_LD_LIBRARY_PATH = /usr/lib/gcc-snapshot/lib:$$LD_LIBRARY_PATH
else
	BUILD_PATH = /usr/lib/jvm/java-gcj/bin:$(CURDIR)/debian/usr/bin:$$PATH
endif
endif

ifeq "$(BUILD_ONLY_LIBMYTHES)" "y"
clean:
	dh_testdir
	dh_testroot

	rm -rf ooo-build/build
	rm -rf debian/libmythes-dev
	
	dh_clean

build:
	mkdir -p ooo-build/build
	cd ooo-build/build && \
		tar xfvj ../src/$(TAG)-core.tar.bz2 $(TAG)/lingucomponent/source/thesaurus/mythes && \
		tar xfvj ../src/$(TAG)-system.tar.bz2 $(TAG)/dictionaries/util
	cd $(SOURCE_TREE)/lingucomponent/source/thesaurus/mythes && \
		$(CXX) -O2 -Wall -ansi -pedantic -I. -c mythes.cxx && \
		ar rc libmythes.a mythes.o && ranlib libmythes.a && \
		mv libmythes.a $(CURDIR)/ooo-build/build
	cd $(SOURCE_TREE)/lingucomponent/source/thesaurus/mythes && \
		$(CXX) -fPIC -O2 -Wall -ansi -pedantic -I. -c mythes.cxx && \
		ar rc libmythes_pic.a mythes.o && ranlib libmythes_pic.a && \
		mv libmythes_pic.a $(CURDIR)/ooo-build/build

install: build
	mkdir -p debian/libmythes-dev/usr/lib
	mkdir -p debian/libmythes-dev/usr/include
	mkdir -p debian/libmythes-dev/usr/share/mythes
	install -m644 \
		$(CURDIR)/ooo-build/build/libmythes.a \
		debian/libmythes-dev/usr/lib/libmythes.a
	install -m644 \
		$(CURDIR)/ooo-build/build/libmythes_pic.a \
		debian/libmythes-dev/usr/lib/libmythes_pic.a
	install -m644 $(SOURCE_TREE)/lingucomponent/source/thesaurus/mythes/mythes.hxx \
		debian/libmythes-dev/usr/include
	install -m755 $(SOURCE_TREE)/dictionaries/util/th_gen_idx.pl \
		debian/libmythes-dev/usr/share/mythes/th_gen_idx.pl

binary: binary-arch

binary-arch: install
	dh_testdir
	dh_testroot
	dh_installdocs -plibmythes-dev
	dh_installchangelogs -plibmythes-dev
	debian/scripts/installoverrides
	dh_link -plibmythes-dev
	dh_fixperms -plibmythes-dev
	dh_compress -plibmythes-dev
	dh_installdeb -plibmythes-dev
	dh_gencontrol -plibmythes-dev
	dh_md5sums -plibmythes-dev
	dh_builddeb -plibmythes-dev
else
# Because of the stampdir magic, when you actually want to run a rule
# over, you would have to remove the stamp manually.  Now, just do
# 'debian/rules <target> <target> ... FORCE=1', and the stamp files
# that match the given targets will be removed automagically.
stampdir_targets=files.backup icons.scale patch.apply build.prepare.artwork 
stampdir_targets+=build.prepare configure
stampdir_targets+=setupins setup install install-arch install-indep
stampdir_targets+=langpacks helppacks binary-common binary-arch binary-indep
ifdef FORCE
 DUMMY:=$(shell rm -f $(patsubst %,$(STAMP_DIR)/%,$(filter $(stampdir_targets),$(MAKECMDGOALS))))
endif

# If this is defined, then none of the 'long' commands will be run.  Useful
# for testing.
# test_rules=1

# Since the final stages use up a large amount of diskspace, provide targets to
# remove them without needing a full rebuild

# Clean up the package directories (about 830M) 
clean-debdir:
	dh_testdir
	rm -f debian/*.postinst debian/*.postrm debian/*.preinst debian/*.prerm
	rm -f $(STAMP_DIR)/setup
	dh_clean

# Clean up the installation sets and package directories (about 2.5 Gb!)
clean-instsetoo: clean-debdir
	dh_testdir
	rm -f $(STAMP_DIR)/instsetoo
	# Remove all installation sets
	rm -rf $(SOURCE_TREE)/instsetoo/$(ARCHBUILDDIR)

# Clean compilation results, but leave solver (about 600Mb in addition to instsetoo)
clean-objectdirs: clean-instsetoo
	dh_testdir
	find $(SOURCE_TREE) -maxdepth 2 -name $(ARCHBUILDDIR) -type d -exec rm -rf {} \;

clean:
	dh_testroot
	dh_testdir

	if [ -r ooo-build/Makefile ]; then \
	  $(MAKE) -C ooo-build distclean || true ;\
	fi

	# we do not need them and they make problem with dpkg-source....
	rm -f ooo-build/www/*.png \
		ooo-build/www/images/*.png \
		ooo-build/www/l10n/*.gif \
		ooo-build/src/open*.png ooo-build/src/file-bug*.png \
		ooo-build/src/*.bmp ooo-build/src/*.xcf \
		ooo-build/src/*.ico \
		ooo-build/scratch/scsolver/docs/class_diagram.odg \
		ooo-build/scratch/scsolver/workben/test_run.ods \
		ooo-build/src/Draft.jpg \
		ooo-build/src/easter/*.png

	if [ -d ooo-build/test ]; then \
		find ooo-build/test ooo-build/doc -type f \
		     \( -name '*.xls' -o -name '*.sx?' -o -name '*.doc' \
			-o -name '*.123' -o -name '*.lwp' -o -name '*.ppt' \
			-o -name '*.wb2' -o -name '*.png' -o -name '*.WB2' \
			-o -name '*.odp' -o -name '*.odt' -o -name "*.ods" \) \
			-exec rm {} \; ;\
	fi
	rm -f ooo-build/fonts/symbols.xls
	rm -rf ooo-build/desktop/*.desktop
	rm -rf ooo-build/build
	rm -f ooo-build/src/GSI*.sdf
	rm -f ooo-build/po/.intltool-merge-cache
	rm -rf ooo-build/autom4ate.cache

	# remove generated symlinks / java wrappers
	rm -rf debian/usr

	# stlport home
	rm -rf $(CURDIR)/stlport4
	# convenience link
	rm -f build

	# uuencode binary files
	cd ooo-build ;\
	  for f in fonts/opens___.ttf src/ooo_*_images*.bz2 src/extras*bz2 \
	    src/evolocal.odb src/*.gz src/GSI*bz2 src/xt*zip src/go-oo-team.png \
	    templates/*.o??; do \
	  if [ -s $$f ]; then \
	    uuencode $$f $$f > $$f.uu.tmp && \
	    ../debian/scripts/move-if-change $$f.uu.tmp $$f.uu; \
            touch -r $$f $$f.uu ;\
	  fi ;\
	  rm -f $$f ;\
	done

        # uuencode Ximian desktop icons
	for i in base calc draw impress math template web writer; do \
	  f=ooo-build/desktop/ooo-$$i.png; \
	  if [ -s $$f ]; then \
	    uuencode $$f $$f > $$f.uu.tmp && \
	    debian/scripts/move-if-change $$f.uu.tmp $$f.uu; \
            touch -r $$f $$f.uu ;\
	fi; \
	done
	rm -f ooo-build/desktop/*.png

	rm -f ooo-build/src/GSI*err

	dh_clean

	# Files created in debian directory
	rm -f debian/*.postinst debian/*.postrm debian/*.preinst debian/*.prerm
	if [ -d "$(STAMP_DIR)" ]; then rm -rf "$(STAMP_DIR)"; fi
	rm -f debian/shlibs.override.stdlibs

ifeq "$(ENABLE_MONO)" "y"
	rm -rf $(MONO_SHARED_DIR)/.wapi
endif

ifeq "$(HELPISOS)" ""
	rm -rf images*
endif

	rm -f l10n.fdupes

	$(MAKE) -f debian/rules control


# Generate control file, because we have so many different languages
# Based on script by Martin Quinson <Martin.Quinson@tuxfamily.org>
control: debian/control
debian/control: debian/control.in debian/control.lang.in debian/control.help.in ooo-build/bin/openoffice-xlate-lang debian/rules
	sed -e "s#openoffice.orgVER#openoffice.org$(VER)#g" \
	    -e "s#%$(DIST)=\([^%]*\)%#, \1#g#" \
	    -e "s#%[A-Za-z]*=[^%]*%##g#" \
	    -e "s#%BUILD_DEPS%#$(strip $(BUILD_DEPS))#g" \
	    < debian/control.in > debian/control

	for LNUM in $(LANGPACKISOS) ; do \
	    LNAME=`ooo-build/bin/openoffice-xlate-lang -l $$LNUM | perl -e 'print ucfirst(<STDIN>);'`; \
	    LCODE=`ooo-build/bin/openoffice-xlate-lang -i $$LNUM | tr A-Z a-z`; \
	    CCODE=`echo $$LCODE | sed 's/-.*//'`; \
	    case "$$LCODE" in \
		bn|gu-in|pa-in) \
			FONT_SUGGESTS=", ttf-`echo $$LNAME | tr A-Z a-z`-fonts"; \
			;; \
		hi-in) \
			FONT_SUGGESTS=", ttf-devanagari-fonts"; \
			;; \
		he) \
			FONT_SUGGESTS=", culmus"; \
			;; \
		km) \
			FONT_SUGGESTS=", ttf-khmeros"; \
			;; \
		lo) \
			FONT_SUGGESTS=", ttf-lao"; \
			;; \
		ar) \
			FONT_SUGGESTS=", ttf-arabeyes"; \
			;; \
		*) \
			FONT_SUGGESTS= ;; \
	    esac; \
	    case "$$LCODE" in \
		rw|tn|ss|nso|ts|ve) \
			LOCALES_DEPENDS="belocs-locales-data" \
			;; \
		km|sr-cs) \
			LOCALES_DEPENDS="locales (>= 2.3.5-12) | belocs-locales-data" \
			;; \
		*) \
			LOCALES_DEPENDS="locales | belocs-locales-data" \
			;; \
	    esac; \
	    sed -e "s|@LNAME@|$$LNAME|g" -e "s|@LCODE@|$$LCODE|g" \
		-e "s|@CCODE@|$$CCODE|g" \
	        -e "s|@FONT_SUGGESTS@|$$FONT_SUGGESTS|g" \
	        -e "s:@LOCALES_DEPENDS@:$$LOCALES_DEPENDS:g" \
			-e "s|openoffice.orgVER|openoffice.org$(VER)|g" \
	        >> debian/control < debian/control.lang.in; \
	done
	# -l10n-en became -l10n-en-us
	perl -pi -e 's/Conflicts:(.*)openoffice.org2-l10n-en-us$$/Conflicts:$$1openoffice.org2-l10n-en-us, openoffice.org-l10n-en/' debian/control
	perl -pi -e 's/Replaces:(.*)openoffice.org2-l10n-en-us$$/Replaces:$$1openoffice.org2-l10n-en-us, openoffice.org-l10n-en/' debian/control
	perl -pi -e 's/Provides:(.*)openoffice.org2-l10n-en-us$$/Provides:$$1openoffice.org2-l10n-en-us, openoffice.org-l10n-en/' debian/control
	# ... and -hi became -hi-in
	perl -pi -e 's/Conflicts:(.*)openoffice.org2-l10n-hi-in$$/Conflicts:$$1openoffice.org2-l10n-hi-in, openoffice.org-l10n-hi/' debian/control
	perl -pi -e 's/Replaces:(.*)openoffice.org2-l10n-hi-in$$/Replaces:$$1openoffice.org2-l10n-hi-in, openoffice.org-l10n-hi/' debian/control
	perl -pi -e 's/Provides:(.*)openoffice.org2-l10n-hi-in$$/Provides:$$1openoffice.org2-l10n-hi-in, openoffice.org-l10n-hi/' debian/control

ifneq "$(HELPISOS)" ""
	for LNUM in $(HELPISOS) ; do \
	    LNAME=`ooo-build/bin/openoffice-xlate-lang -l $$LNUM | perl -e 'print ucfirst(<STDIN>);'`; \
	    LCODE=`ooo-build/bin/openoffice-xlate-lang -i $$LNUM | tr A-Z a-z`; \
	    CCODE=`echo $$LCODE | sed 's/-.*//'`; \
	    sed -e "s|@LNAME@|$$LNAME|g" -e "s|@LCODE@|$$LCODE|g" \
		-e "s|@CCODE@|$$CCODE|g" \
			-e "s|openoffice.orgVER|openoffice.org$(VER)|g" \
	        >> debian/control < debian/control.help.in; \
	done
endif
ifeq "$(BUILD_JARS_NATIVE)" "y"
	sed -e "s|openoffice.orgVER|openoffice.org$(VER)|g" \
		>> debian/control < debian/control.gcj.in
endif
ifeq "$(ENABLE_MONO)" "y"
	sed -e "s|openoffice.orgVER|openoffice.org$(VER)|g" \
		>> debian/control < debian/control.mono.in
endif
ifeq "$(PACKAGE_QA_TOOLS)" "y"
	sed -e "s|openoffice.orgVER|openoffice.org$(VER)|g" \
		>> debian/control < debian/control.qa.in
endif
ifeq "$(PACKAGE_NPSOPLUGIN)" "y"
	sed -e "s|openoffice.orgVER|openoffice.org$(VER)|g" \
		>> debian/control < debian/control.mozilla.in
endif
ifeq "$(BUILD_DBG_PACKAGE)" "y"
	sed -e "s|openoffice.orgVER|openoffice.org$(VER)|g" \
		>> debian/control < debian/control.debug.in
endif

ifeq "$(BUILD_AMD64)" "y"
	perl -pi -e "s/%AMD64%/amd64/g" debian/control
else
	perl -pi -e "s/%AMD64%//g" debian/control
endif

.DELETE_ON_ERROR: debian/control

build: build-arch build-indep
build-arch: $(STAMP_DIR)/build
build-indep: $(STAMP_DIR)/build

# All 'important' targets have 2 lines.  The one that is run by
# dpkg-buildpackage or the user, and the one that does the actual work.  This
# indirection is needed so that the 'stamp' files that signify when a rule is
# done can be located in a separate 'stampdir'.  Recall that make has no way to
# know when a goal has been met for a phony target (like "build" or "install").
#
# At the end of each stampdir target, be sure to run the command 'touch $@'
# so that the target will not be run again.  Removing the file will make
# make run the target over.

configure: ooo-build/config.status
ooo-build/config.status: ooo-build/configure
	dh_testdir
	$(MAKE) -f debian/rules environment
	mkdir -p $(STAMP_DIR)

	# uudecode source files
	cd ooo-build; for uu in fonts/opens___.ttf.uu src/*.uu templates/*.uu; do \
	  orig="`echo "$$uu" |sed -e 's#.uu$$##'`" ;\
          if [ ! -s $$orig ]; then \
            uudecode -o $$orig $$uu ;\
            touch -r $$uu $$orig ;\
          fi ;\
	done

        # uudecode Ximian desktop icons
	for i in base calc draw impress math template web writer; do \
	  if [ ! -s ooo-build/desktop/ooo-$$i.png ]; then \
	    uudecode -o ooo-build/desktop/ooo-$$i.png \
		ooo-build/desktop/ooo-$$i.png.uu ;\
	    touch -r ooo-build/desktop/ooo-$$i.png.uu \
		ooo-build/desktop/ooo-$$i.png ;\
	  fi; \
	done

ifneq ($(GCC_VERSION),)
ifneq ($(GCC_VERSION),snapshot)
	# create links for gcc and g++ (and gij and gcj), ooo-build does not
	# honour overriding CC and CXX and we need to use gcc/g++ 4.0 or /
	# ant.mk wants gcj at the moment...
	mkdir -p $(CURDIR)/debian/usr/bin
	ln -sf /usr/bin/$(CC_PREFIX)gcc-$(GCC_VERSION) $(CURDIR)/debian/usr/bin/gcc
	ln -sf /usr/bin/$(CC_PREFIX)g++-$(GCC_VERSION) $(CURDIR)/debian/usr/bin/g++
	#ln -sf /usr/bin/$(CC_PREFIX)gcj-$(GCC_VERSION) $(CURDIR)/debian/usr/bin/gcj
	#ln -sf /usr/bin/gij-$(GCC_VERSION) $(CURDIR)/debian/usr/bin/gij
else
ifneq "$(CC_PREFIX)" ""
	mkdir -p $(CURDIR)/debian/usr/bin
	ln -s /usr/lib/gcc-snapshot/bin/$(CC_PREFIX)gcc $(CURDIR)/debian/usr/bin/gcc
	ln -s /usr/lib/gcc-snapshot/bin/$(CC_PREFIX)g++ $(CURDIR)/debian/usr/bin/g++
	ln -s /usr/lib/gcc-snapshot/bin/$(CC_PREFIX)gcj $(CURDIR)/debian/usr/bin/gcj
	ln -s /usr/lib/gcc-snapshot/bin/$(CC_PREFIX)gcj $(CURDIR)/debian/usr/bin/gij
endif
endif
endif

ifeq "$(USE_SYSTEM_STLPORT)" "y"
	# stlport home
	if [ ! -d stlport4 ]; then \
		mkdir -p stlport4; \
		ln -sf /usr/include/stlport stlport4/stlport; \
		ln -sf /usr/lib stlport4/lib; \
	fi
endif

ifneq "$(BUILD_ONLY_EN_US)" "y"
ifneq "$(LANGPACKISOS)" "en-US"
	# extract extra GSIs
	find ooo-build/src -name "*.sdf.bz2" -exec bunzip2 -k \{\} \;
	for i in `find ooo-build/src/*.sdf.gz`; do gunzip -dc "$$i" > \
		ooo-build/src/`basename $$i .gz`; done
	# work around broken stuff in the GSI breaking the build in svx
	if `echo $(LANGPACKISOS) | grep -q he`; then \
		TMP=`mktemp -q`; grep -v OOO_LICENSE ooo-build/src/GSI_he.sdf \
			> $$TMP && mv $$TMP ooo-build/src/GSI_he.sdf; \
	fi
	if `echo $(LANGPACKISOS) | grep -q sr-CS`; then \
		TMP=`mktemp -q`; grep -v OOO_LICENSE ooo-build/src/GSI_sr-CS.sdf \
			> $$TMP && mv $$TMP ooo-build/src/GSI_sr-CS.sdf; \
	fi
	if `echo $(LANGPACKISOS) | grep -q lo`; then \
		TMP=`mktemp -q`; grep -v OOO_LICENSE ooo-build/src/GSI_lo.sdf \
			> $$TMP && mv $$TMP ooo-build/src/GSI_lo.sdf; \
	fi
endif
endif

	# Make convenience link
	if [ ! -L build ]; then ln -s $(SOURCE_TREE) build ; fi

	# Make sure we have /proc mounted - otherwise idlc will fail later.
	test -r /proc/version

	cd ooo-build ; PATH=$(BUILD_PATH) LD_LIBRARY_PATH=$(BUILD_LD_LIBRARY_PATH) ../ooo-build/configure $(CONFIGURE_FLAGS)

	touch $@

build: $(STAMP_DIR)/build
$(STAMP_DIR)/build: ooo-build/config.status
	dh_testdir

ifeq "$(BUILD_KDE)" "n"
	# hack to tell we want crystal icons nevertheless and they should be
	# extracted...
	if ! grep -q crystal ooo-build/bin/setup; then \
		cp ooo-build/bin/setup ooo-build/bin/setup.bak && \
		cat ooo-build/bin/setup.bak \
			| sed -e s/\'industrial/\'industrial\ crystal/ \
			> ooo-build/bin/setup && rm ooo-build/bin/setup.bak; \
	fi
endif

	cd ooo-build ; PATH=$(BUILD_PATH) LD_LIBRARY_PATH=$(BUILD_LD_LIBRARY_PATH) DEFAULT_TO_ENGLISH_FOR_PACKING=1 $(MAKE)

	# DPKG is only set on with-EPM build what we don't do and the menu stuff
	# is only built wenn DPKG is set.. Same with PKGFORMAT.
	cd $(SOURCE_TREE)/sysui; . $(CURDIR)/$(SOURCE_TREE)/*.sh; PATH=$(BUILD_PATH) DPKG="dpkg" PKGFORMAT="deb" ../solenv/bin/build.pl && ../solenv/bin/deliver.pl

ifneq "$(USE_EXTERNAL_MYTHES)" "y"
	# build non-PIC version of libmythes
	cd $(SOURCE_TREE)/lingucomponent/source/thesaurus/mythes && \
		$(CXX) -O2 -Wall -ansi -pedantic -I. -c mythes.cxx && \
		ar rc libmythes_nopic.a mythes.o && ranlib libmythes_nopic.a && \
		mv libmythes_nopic.a $(CURDIR)/$(SOURCE_TREE)
endif

	touch $@

install: $(STAMP_DIR)/install
$(STAMP_DIR)/install: $(STAMP_DIR)/build
	dh_testdir
	dh_testroot

	rm -rf $(CURDIR)/debian/tmp
	cd ooo-build ; DESTDIR=$(CURDIR)/debian/tmp $(MAKE) install

	# no special ooqstart wrappers
	install -m 755 build/ooo-wrapper \
	  debian/tmp/pkg/openoffice.org-common/usr/bin/
	for i in debian/tmp/pkg/*/usr/bin/oo*; do \
	  case $$i in *wrapper) continue; esac; \
	  ln -sf ooo-wrapper $$i; \
	done

ifneq "$(HELPISOS)" ""
	# save space by removing non-packaged localized help; we don't need
	# them anyway
	cd debian/tmp/pkg && \
		for iso in $(filter-out en-US,$(LANGPACKISOS)); do \
			if ! `echo $(HELPISOS) | grep -q $$iso`; then \
				rm -rf openoffice.org-help-$$iso; \
			fi; \
		done
endif

ifneq "$(HELPISOS)" ""
	# install help; we can't do that later since this is in
	# arch-dep and arch-indep stuff..
	cd debian/tmp/pkg; \
		mkdir -p openoffice.org-help-en-us/$(OODIR)/help/en; \
		for i in common calc math draw writer impress base; do \
			cp -r ./openoffice.org-$$i/$(OODIR)/help/en/* \
			 ./openoffice.org-help-en-us/$(OODIR)/help/en && \
			rm -rf ./openoffice.org-$$i/$(OODIR)/help/en; \
		done
endif

ifeq "$(BUILD_BINFILTERS)" "y"
	# move en-US binfilter resources which are not in -l10n-en-us there.
	# They will be moved out of -common in the langpacks target...
	cd debian/tmp/pkg; \
		mv openoffice.org-calc/$(OODIR)/program/resource/bf_sc*en-US.res \
			openoffice.org-common/$(OODIR)/program/resource && \
		mv openoffice.org-math/$(OODIR)/program/resource/bf_sm*en-US.res \
			openoffice.org-common/$(OODIR)/program/resource
endif
	# ... same with base
	cd debian/tmp/pkg; \
	mv openoffice.org-base/$(OODIR)/program/resource/abp*en-US.res \
		openoffice.org-common/$(OODIR)/program/resource && \
	mv openoffice.org-base/$(OODIR)/program/resource/dbp*en-US.res \
		openoffice.org-common/$(OODIR)/program/resource && \
	mv openoffice.org-base/$(OODIR)/program/resource/dbu*en-US.res \
		openoffice.org-common/$(OODIR)/program/resource

ifeq "$(ENABLE_JAVA)" "y"
	# move officebean.jar into -officebean (They will be moved out of -core
	# in the install-arch target). Do the /usr/share/java move here already
	cd debian/tmp/pkg; \
		mkdir -p openoffice.org-core/usr/share/java/openoffice$(VER); \
		mv openoffice.org-common/$(OODIR)/program/classes/officebean.jar \
			openoffice.org-core/usr/share/java/openoffice$(VER)

	# move hsqldb.jar and sdbc_hsqldb.jar into -base (do the move
	# to /usr/share/java here directly, we do it for the "rest"
	# later
	cd debian/tmp/pkg; \
		mkdir -p openoffice.org-base/usr/share/java/openoffice$(VER); \
		for i in *hsqldb.jar; do \
			mv openoffice.org-common/$(OODIR)/program/classes/$$i \
				openoffice.org-base/usr/share/java/openoffice$(VER); \
		done
endif

	# move .so to -dev
	cd debian/tmp/pkg; \
		mkdir -p -m755 openoffice.org-dev/$(OODIR)/program; \
		mv openoffice.org-common/$(OODIR)/program/*.so \
			openoffice.org-dev/$(OODIR)/program

ifeq "$(ENABLE_MONO)" "y"
	# somehow, these go into -common. Move them to -core here to be able
	# to install them later in install-arch
	cd debian/tmp/pkg; \
	mv openoffice.org-common/$(OODIR)/program/cli_*.dll  \
		openoffice.org-core/$(OODIR)/program
	if [ -d openoffice.org-common/$(OODIR)/program/assembly ]; then \
		rm -rf openoffice.org-common/$(OODIR)/program/assembly; \
	fi
endif

	# ooqstart should go into -gnome; we have a glib dependency
	mkdir -p debian/tmp/pkg/openoffice.org-common/$(OODIR)/program
	mv debian/tmp/pkg/openoffice.org-common/$(OODIR)/program/ooqstart \
		debian/tmp/pkg/openoffice.org-gnome/$(OODIR)/program
	mkdir -p -m755 debian/tmp/pkg/openoffice.org-gnome/$(OODIR)/share/xdg
	mv debian/tmp/pkg/openoffice.org-common/$(OODIR)/share/xdg/qstart.desktop \
		debian/tmp/pkg/openoffice.org-gnome/$(OODIR)/share/xdg

	# move gengal stuff into -dev
	mkdir -p debian/tmp/pkg/openoffice.org-dev/$(OODIR)/program
	mv debian/tmp/pkg/openoffice.org-core/$(OODIR)/program/gengal* \
		debian/tmp/pkg/openoffice.org-dev/$(OODIR)/program
	mv debian/tmp/pkg/openoffice.org-common/$(OODIR)/program/gengal  \
		debian/tmp/pkg/openoffice.org-dev/$(OODIR)/program
	
	touch $@

#
# Generate maintainer scripts
maintscripts: $(STAMP_DIR)/maintscripts
$(STAMP_DIR)/maintscripts: debian/shell-lib.sh debian/java-lib.sh debian/control
	dh_testdir

	# generate maintainer scripts from *.in
	# or generate default script which calls hook in openoffice.org-debian-files package
	for PKG in `dh_listpackages`; do \
	  for FILE in postinst postrm preinst prerm; do \
	    MAINTSCRIPT=debian/$$PKG.$$FILE ; \
	    if [ -e $$MAINTSCRIPT.in ]; then \
	      sed -n '1,/^#INCLUDE_SHELL_LIB#$$/p' < $$MAINTSCRIPT.in | sed -e '/^#INCLUDE_SHELL_LIB#$$/d' > $$MAINTSCRIPT; \
	      grep LIBSUFFIX debian/scripts/vars.$(ARCH) >> $$MAINTSCRIPT; \
	      cat debian/shell-lib.sh >> $$MAINTSCRIPT; \
	      sed -n '/^#INCLUDE_SHELL_LIB#$$/,$$p' < $$MAINTSCRIPT.in | sed -e '/^#INCLUDE_SHELL_LIB#$$/d' >> $$MAINTSCRIPT; \
	    else \
	      echo '#!/bin/sh' > $$MAINTSCRIPT ; \
	      echo THIS_PACKAGE=$$PKG >> $$MAINTSCRIPT ;\
	      echo THIS_SCRIPT=$$FILE >> $$MAINTSCRIPT ;\
	      cat debian/shell-lib.sh >> $$MAINTSCRIPT; \
	    fi; \
	  done; \
	done

	touch $@

# Install files generated by setup into package directories
helppacks: $(STAMP_DIR)/helppacks
$(STAMP_DIR)/helppacks: $(STAMP_DIR)/install ooo-build/bin/openoffice-xlate-lang

ifneq "$(HELPISOS)" ""
	# we assume here that when we want to build/package help here we want
	# to do that with en-US anyway...
	rm -rf $(PKGDIR)-help-en-us $(PKGDIR)-help-en-us.*.debhelper; \
	cp -r --preserve=mode debian/tmp/pkg/openoffice.org-help-en-us $(PKGDIR)-help-en-us || exit 1
ifneq "$(HELPISOS)" "en-US"
	for iso in $(filter-out en-US,$(HELPISOS)); do \
	  pkgiso=`echo $$iso | tr \[:upper:\] \[:lower:\]`; \
	  diriso=`echo $$pkgiso | cut -d"-" -f1`; \
	  if [ "$$pkgiso" = "pt-br" ]; then diriso=pt-BR; fi; \
	  if [ "$$pkgiso" = "th-cn" ]; then diriso=zh-CN; fi; \
	  if [ "$$pkgiso" = "zh-tw" ]; then diriso=zh-TW; fi; \
	  rm -rf $(PKGDIR)-help-$$pkgiso $(PKGDIR)-help-$$pkgiso.*.debhelper; \
	  cp -r --preserve=mode debian/tmp/pkg/openoffice.org-help-$$iso \
		$(PKGDIR)-help-$$pkgiso; \
	done
endif

	# quick hack to reduce the size of the help packages
	for iso in $(HELPISOS); do \
	  pkgiso=`echo $$iso | tr \[:upper:\] \[:lower:\]`; \
	  diriso=`echo $$pkgiso | cut -d"-" -f1`; \
	  case "$$iso" in en-US) iso=en; esac; \
	  for f in CONTEXTS DOCS DOCS.TAB LINKNAMES OFFSETS POSITIONS SCHEMA; do \
	    if cmp -s $(PKGDIR)-help-$$pkgiso/$(OODIR)/help/$$iso/simpress.idx/$$f \
	           $(PKGDIR)-help-$$pkgiso/$(OODIR)/help/$$iso/sdraw.idx/$$f; \
	    then \
	      echo "symlinking duplicate files: help/$$iso/sdraw.idx/$$f"; \
	      ln -sf ../sdraw.idx/$$f $(PKGDIR)-help-$$pkgiso/$(OODIR)/help/$$iso/simpress.idx/$$f; \
	    fi; \
	  done; \
	done	
endif

	touch $@

# Install files generated by setup into package directories
langpacks: $(STAMP_DIR)/langpacks
$(STAMP_DIR)/langpacks: $(STAMP_DIR)/install $(STAMP_DIR)/install-indep ooo-build/bin/openoffice-xlate-lang

	for ext in `echo $(LANGPACKISOS) |tr A-Z a-z` ; do \
	  rm -rf $(PKGDIR)-l10n-$$ext;\
	  rm -rf $(PKGDIR)-l10n-$$ext.*.debhelper;\
	done

	# move the english stuff out of the -common install
	for dir in program/resource share/registry/res/en-US; do \
	  mkdir -m755 -p $(PKGDIR)-l10n-en-us/$(OODIR)/$$dir ;\
	  cp -r --preserve=mode debian/tmp/pkg/openoffice.org-common/$(OODIR)/$$dir/* \
			$(PKGDIR)-l10n-en-us/$(OODIR)/$$dir || exit 1;\
	done

	# ... and install the rest of the langpacks
	for iso in $(LANGPACKISOS); do \
	  if [ "$$iso" = "en-US" ]; then continue; fi ; \
	  pkgiso=`echo $$iso | tr \[:upper:\] \[:lower:\]`; \
	  rm -rf $(PKGDIR)-l10n-$$pkgiso $(PKGDIR)-l10n-$$pkgiso.*.debhelper; \
	  cp -r --preserve=mode debian/tmp/pkg/openoffice.org-l10n-$$iso \
		$(PKGDIR)-l10n-$$pkgiso || exit 1; \
	done

	
	# remove empty uno_packages dirs somehow in the langpacks(?)
	for iso in `echo $(LANGPACKISOS) | tr A-Z a-z`; do \
		rm -rf $(PKGDIR)-l10n-$$iso/$(OODIR)/share/uno_packages; \
	done
	
	# remove ooo dirs somehow in the langpacks(?)
	for iso in `echo $(LANGPACKISOS) | tr A-Z a-z`; do \
		rm -rf $(PKGDIR)-l10n-$$iso/$(OODIR)/share/dict/ooo; \
	done

	# remove extra license files
	for iso in `echo $(LANGPACKISOS) | tr A-Z a-z`; do \
		rm -rf $(PKGDIR)-l10n-$$iso/$(OODIR)/licenses; \
		rm -rf $(PKGDIR)-l10n-$$iso/$(OODIR)/share/readme/LICENSE*; \
	done
	
	# remove extra readme files
	for iso in `echo $(LANGPACKISOS) | tr A-Z a-z`; do \
		rm -rf $(PKGDIR)-l10n-$$iso/$(OODIR)/readmes; \
		rm -rf $(PKGDIR)-l10n-$$iso/$(OODIR)/share/readme/README*; \
	done

	# remove empty help directories
	for iso in `echo $(LANGPACKISOS) | tr A-Z a-z`; do \
		rm -rf $(PKGDIR)-l10n-$$iso/$(OODIR)/help; \
	done

	# replace duplicate files in the langpacks with symlinks
	fdupes --recurse --sameline --size \
		debian/openoffice$(VER).org-common/$(OODIR) \
		$(foreach d,$(shell echo $(LANGPACKISOS) | tr A-Z a-z),debian/openoffice.org$(VER)-l10n-$(d)/$(OODIR)) \
		> l10n.fdupes
	debian/scripts/cleandupes --prefix=debian < l10n.fdupes

	touch $@


# Install files generated by setup into arch-dependent package directories
install-arch: $(STAMP_DIR)/install-arch
$(STAMP_DIR)/install-arch: $(STAMP_DIR)/install
	dh_testdir
	dh_testroot
	umask 022

	# Copy files placed by ooo-build/bin/package-ooo	
	for i in base calc core draw impress math writer gnome; do \
	  rm -rf $(PKGDIR)-$$i $(PKGDIR)-$$i.*.debhelper ;\
	  cp -r --preserve=mode debian/tmp/pkg/openoffice.org-$$i $(PKGDIR)-$$i || exit 1;\
	done

	rm -rf debian/mozilla-openoffice.org debian/mozilla-openoffice.org.*.debhelper
	rm -rf $(PKGDIR) $(PKGDIR).*.debhelper
	rm -rf $(PKGDIR)-evolution $(PKGDIR)-evolution.*.debhelper
ifeq "$(BUILD_KDE)" "y"
	rm -rf $(PKGDIR)-kde $(PKGDIR)-kde.*.debhelper
endif

	dh_installdirs -a

ifeq "$(BUILD_KDE)" "y"
	mkdir -p -m755 $(PKGDIR)-kde/$(OODIR)/program
	for f in kdefilepicker libfps_kde.so libvclplug_kde[0-9]*.so libkab*so; do \
	  mv $(PKGDIR)-core/$(OODIR)/program/$$f $(PKGDIR)-kde/$(OODIR)/program || exit 1 ;\
	done
endif

	# move the GNOME stuff which are *not* in gid_Module_Optional_Gnome
	# (which is moved into -gnome in package-ooo) into -gnome
	mkdir -p -m755 $(PKGDIR)-gnome/$(OODIR)/program
	for f in gnome-open-url.bin fps_gnome.uno.so libvclplug_gtk[0-9]*.so libeggtray* libqstart_gtk*; do \
	  mv $(PKGDIR)-core/$(OODIR)/program/$$f $(PKGDIR)-gnome/$(OODIR)/program || exit 1;\
	done

	mkdir -p -m755 $(PKGDIR)-evolution/$(OODIR)/program
	mv $(PKGDIR)-core/$(OODIR)/program/libevoab2.so $(PKGDIR)-evolution/$(OODIR)/program

ifeq "$(PACKAGE_NPSOPLUGIN)" "y"
	mkdir -p -m755 debian/mozilla-openoffice.org/$(OODIR)/program
	for f in libnpsoplugin.so nsplugin; do \
		mv $(PKGDIR)-core/$(OODIR)/program/$$f debian/mozilla-openoffice.org/$(OODIR)/program; \
	done
	cd debian/mozilla-openoffice.org && \
		for b in mozilla mozilla-firefox firefox; do \
			mkdir -p usr/lib/$$b/plugins && \
				ln -sf /$(OODIR)/program/libnpsoplugin.so \
				   usr/lib/$$b/plugins/libnpsoplugin.so; \
		done
else
	rm -f $(PKGDIR)-core/$(OODIR)/program/libnpsoplugin.so
	rm -f $(PKGDIR)-core/$(OODIR)/program/nsplugin
endif

ifeq "$(BUILD_BINFILTERS)" "y"
	rm -rf $(PKGDIR)-filter-so52/$(OODIR)/program
	mkdir -p -m755 $(PKGDIR)-filter-so52/$(OODIR)/program
	mv $(PKGDIR)-core/$(OODIR)/program/libbf_* \
		$(PKGDIR)-filter-so52/$(OODIR)/program
	mv $(PKGDIR)-calc/$(OODIR)/program/libbf_sc* \
		$(PKGDIR)-filter-so52/$(OODIR)/program
	mv $(PKGDIR)-core/$(OODIR)/program/liblegacy_binfilters* \
		$(PKGDIR)-filter-so52/$(OODIR)/program
	mv $(PKGDIR)-core/$(OODIR)/program/libbindet* \
		$(PKGDIR)-filter-so52/$(OODIR)/program
	mv $(PKGDIR)-core/$(OODIR)/program/legacy_binfilters.rdb \
		$(PKGDIR)-filter-so52/$(OODIR)/program
endif

	# OOo's package split sucks...
	mv $(PKGDIR)-core/$(OODIR)/program/libsw* \
		$(PKGDIR)-writer/$(OODIR)/program
	mv $(PKGDIR)-core/$(OODIR)/program/libsd6* \
	   $(PKGDIR)-core/$(OODIR)/program/libsdd* \
	   $(PKGDIR)-core/$(OODIR)/program/libsdui* \
		$(PKGDIR)-draw/$(OODIR)/program
	mv $(PKGDIR)-core/$(OODIR)/program/slideshow.uno.so \
		$(PKGDIR)-impress/$(OODIR)/program
	mkdir -p -m755 $(PKGDIR)-base/$(OODIR)/program
	for i in dba; do \
		mv $(PKGDIR)-core/$(OODIR)/program/lib$$i* \
		   $(PKGDIR)-base/$(OODIR)/program; \
	done
	for i in odbcbase2 dbpool2 jdbc2 odbc2 sdbc2 mysql2 adabas2; do \
		mv $(PKGDIR)-core/$(OODIR)/program/lib$$i* \
		   $(PKGDIR)-base/$(OODIR)/program; \
	done
ifeq "$(ENABLE_JAVA)" "y"
	for i in jdbc2 hsqldb2; do \
		mv $(PKGDIR)-core/$(OODIR)/program/lib$$i* \
		   $(PKGDIR)-base/$(OODIR)/program; \
	done
	# hack, #340468
	ln -s $(PKGDIR)-base/$(OODIR)/program/libhsqldb2.so \
		$(PKGDIR)-base/$(OODIR)/program/libhsqldb2
endif
	mv $(PKGDIR)-core/$(OODIR)/program/libflat*so \
		$(PKGDIR)-base/$(OODIR)/program; \

ifeq "$(BUILD_MDBTOOLS)" "y"
	mv $(PKGDIR)-core/$(OODIR)/program/libmdb*so \
		$(PKGDIR)-base/$(OODIR)/program
endif

	# move vba stuff into -calc, they are calc-only and linked to
	# libsc*
	for i in libvbaobj vbaevents; do \
		mv $(PKGDIR)-core/$(OODIR)/program/$$i*uno.so \
			$(PKGDIR)-calc/$(OODIR)/program; \
	done

	mv $(PKGDIR)-core/$(OODIR)/program/scsolver.uno.so \
		$(PKGDIR)-calc/$(OODIR)/program

ifeq "$(ENABLE_JAVA)" "y"
  ifeq "$(USE_SYSTEM_HSQLDB)" "y"
	# link to system hsqldb
	ln -sf /usr/share/java/hsqldb.jar \
	        $(PKGDIR)-base/usr/share/java/openoffice$(VER)/hsqldb.jar
  endif
endif

ifeq "$(ENABLE_JAVA)" "y"
	rm -rf $(PKGDIR)-officebean
	mkdir -p -m755 $(PKGDIR)-officebean/$(OODIR)/program
	mkdir -p -m755 $(PKGDIR)-officebean/usr/share/java
	mv $(PKGDIR)-core/usr/share/java/openoffice$(VER) \
		$(PKGDIR)-officebean/usr/share/java
	rm -rf $(PKGDIR)-core/usr/share/java
	mv $(PKGDIR)-core/$(OODIR)/program/libofficebean.so \
		$(PKGDIR)-officebean/$(OODIR)/program
endif

	mkdir -p -m755 $(PKGDIR)-base/usr/share/applications \
	               $(PKGDIR)-core/usr/share/applications

ifeq "$(PACKAGE_QA_TOOLS)" "y"
	mkdir -p -m755 $(PKGDIR)-qa-tools/usr/bin
	install -m755 $(SOURCE_TREE)/ootestapi $(PKGDIR)-qa-tools/usr/bin
	install -m755 $(SOURCE_TREE)/ootesttool $(PKGDIR)-qa-tools/usr/bin
	install -m755 $(SOURCE_TREE)/oosmoketest $(PKGDIR)-qa-tools/usr/bin

	mkdir -p -m755 $(PKGDIR)-qa-tools/$(OODIR)/program
	for f in testtool.bin libcommuni* libsimplecm*; do \
		mv $(PKGDIR)-core/$(OODIR)/program/$$f $(PKGDIR)-qa-tools/$(OODIR)/program; \
	done

	mkdir -p -m755 $(PKGDIR)-qa-tools/$(OODIR)/program/classes
	cp $(SOURCE_TREE)/qadevOOo/unx*.pro/class/OOoRunnerLight.jar \
		$(PKGDIR)-qa-tools/$(OODIR)/program/classes

	mkdir -p -m755 $(PKGDIR)-qa-tools/$(OODIR)/smoketest
	install -m755 $(SOURCE_TREE)/smoketestoo_native/smoketest.pl \
		$(SOURCE_TREE)/smoketestoo_native/testlog.pl \
		$(PKGDIR)-qa-tools/$(OODIR)/smoketest

	mkdir -p -m755 $(PKGDIR)-qa-tools/$(OODIR)/presets/basic/Standard
	install -m644 $(SOURCE_TREE)/smoketestoo_native/data/scripts/*.x* \
		$(PKGDIR)-qa-tools/$(OODIR)/presets/basic/Standard

	mkdir -p -m755 $(PKGDIR)-qa-tools/usr/share/doc/openoffice.org$(VER)-qa-tools
	install -m644 debian/README.qa \
		$(PKGDIR)-qa-tools/usr/share/doc/openoffice.org$(VER)-qa-tools
else
	rm -f $(PKGDIR)-core/$(OODIR)/program/testtool.bin
	rm -f $(PKGDIR)-core/$(OODIR)/program/libcommuni*
	rm -f $(PKGDIR)-core/$(OODIR)/program/libsimplecm*
endif

	dirname="`cd $(SOURCE_TREE)/sysui/$(shell . $(SOURCE_TREE)/*.sh; echo $$OUTPATH$$PROEXT)/misc/desktopshare >/dev/null; pwd`" ;\
	for p in writer calc impress draw math base; do \
		mkdir -p -m755 $(PKGDIR)-$$p/usr/share/applications ;\
		sed -e 's,Exec=openoffice.org-2.0 \(.*\) %U,Exec=ooffice$(VER) \1 %U,' \
		    -e "s,Icon=openofficeorg-20-$$p,Icon=ooo-$$p," \
			-e 's,Name=OpenOffice.org 2.0 ,Name=OpenOffice.org $(VER),' \
		   < $$dirname/$$p.desktop \
		   > $(PKGDIR)-$$p/usr/share/applications/ooo$(VER)-$$p.desktop || exit 1 ;\
	done
	for f in `find debian -name '*.desktop'`; do \
		sed -i -e '/^Comment\[de\]/s/- *\([a-zA-Z0-9]*\) *macht.*glich.*$$/mit \1/' $$f; \
	done
	sed -i -e 's/Office;/Office;Graphics;/' $(PKGDIR)-draw/usr/share/applications/ooo$(VER)-draw.desktop
	#mv $(PKGDIR)-base/usr/share/applications/ooo$(VER)-base.desktop $(PKGDIR)-core/usr/share/applications
	#rm -r $(PKGDIR)-base

	# compress manpages
	for i in calc math draw writer impress base; do \
		find $(PKGDIR)-$$i -type f -name "*.1" | xargs gzip -9; \
	done

ifeq "$(BUILD_PYUNO)" "y"
	# PyUNO packging
	rm -rf debian/python-uno debian/python-uno.*.debhelper
	cp -r --preserve=mode debian/tmp/pkg/python-uno debian/python-uno
	
	install -d $(PYTHON_SITE)
	mv debian/python-uno/$(OODIR)/program/uno.py $(PYTHON_SITE)
	mv debian/python-uno/$(OODIR)/program/unohelper.py $(PYTHON_SITE)
	mv debian/python-uno/$(OODIR)/program/pyuno.so $(PYTHON_SITE)
	touch debian/python-uno/$(OODIR)/program/pythonloader.unorc
	chmod u+w debian/python-uno/$(OODIR)/program/pythonloader.unorc
	( echo '[Bootstrap]'; \
	  echo 'PYTHONHOME=file:///usr/lib/python$(PYMAJOR).$(PYMINOR)' ;\
	  echo 'PYTHONPATH=$$PYTHONHOME $$PYTHONHOME/site-packages $$PYTHONHOME/lib-dynload $$PYTHONHOME/lib-tk $$ORIGIN' \
	) > debian/python-uno/$(OODIR)/program/pythonloader.unorc
	chmod u-w debian/python-uno/$(OODIR)/program/pythonloader.unorc
	chmod 755 debian/python-uno/$(OODIR)/program/mailmerge.py
	perl -pi -e 's,/bin,/usr/bin,' \
		 debian/python-uno/$(OODIR)/program/mailmerge.py

	mkdir -p debian/python-uno/usr/share/doc/python-uno
	for i in doc demo; do \
		cp -r $(SOURCE_TREE)/pyuno/$$i \
		  debian/python-uno/usr/share/doc/python-uno; \
	done
	cd debian/python-uno/usr/share/doc/python-uno && \
		find . -type d -name "CVS" | xargs rm -rf
endif

ifeq "$(ENABLE_MONO)" "y"
	# Mono bindings
	mkdir -p -m755 debian/libuno-cil/$(OODIR)/program
	mv $(PKGDIR)-core/$(OODIR)/program/libcli* \
		debian/libuno-cil/$(OODIR)/program
	mv $(PKGDIR)-core/$(OODIR)/program/cli_*.dll \
		debian/libuno-cil/$(OODIR)/program
endif

	# install the SDK
	rm -rf $(PKGDIR)-dev
	cp -ra debian/tmp/pkg/openoffice.org-dev $(PKGDIR)-dev
	mkdir -p $(PKGDIR)-dev/usr/include
	mkdir -p $(PKGDIR)-dev/usr/share/xml
	mkdir -p $(PKGDIR)-dev/usr/share/idl
	mkdir -p $(PKGDIR)-dev/usr/share/doc/openoffice.org$(VER)-dev
ifeq "$(ENABLE_JAVA)" "y"
	mkdir -p $(PKGDIR)-dev/usr/share/java/openoffice$(VER)
endif
	mkdir -p $(PKGDIR)-dev/$(OODIR)/sdk
	unzip $(SOURCE_TREE)/solver/$(shell . $(SOURCE_TREE)/*.sh; echo $$UPD)/$(shell . $(SOURCE_TREE)/*.sh; echo $$OUTPATH$$PROEXT)/bin/odkcommon.zip -x docs/* -x classes/win/* -d $(PKGDIR)-dev/$(OODIR)/sdk
	unzip $(SOURCE_TREE)/solver/$(shell . $(SOURCE_TREE)/*.sh; echo $$UPD)/$(shell . $(SOURCE_TREE)/*.sh; echo $$OUTPATH$$PROEXT)/bin/odkidl.zip -d $(PKGDIR)-dev/$(OODIR)/sdk
	unzip $(SOURCE_TREE)/solver/$(shell . $(SOURCE_TREE)/*.sh; echo $$UPD)/$(shell . $(SOURCE_TREE)/*.sh; echo $$OUTPATH$$PROEXT)/bin/sdk_oo.zip settings/* -d $(PKGDIR)-dev/$(OODIR)/sdk
ifeq "$(ENABLE_JAVA)" "y"
	mv $(PKGDIR)-dev/$(OODIR)/sdk/classes/com \
		$(PKGDIR)-dev/usr/share/java/openoffice$(VER) && \
	ln -s /usr/share/java/openoffice$(VER)/com \
		$(PKGDIR)-dev/$(OODIR)/sdk/classes/com
endif
	mv $(PKGDIR)-dev/$(OODIR)/sdk/include $(PKGDIR)-dev/usr/include/openoffice$(VER) && \
		ln -s /usr/include/openoffice$(VER) $(PKGDIR)-dev/$(OODIR)/sdk/include
ifeq "$(USE_SYSTEM_STLPORT)" "y"
	# when we use external stlport, we just can and should do a symlink
	cd $(PKGDIR)-dev/usr/include/openoffice$(VER) && \
		rm -rf stl && ln -s /usr/include/stlport stl
endif
	mv $(PKGDIR)-dev/$(OODIR)/sdk/xml $(PKGDIR)-dev/usr/share/xml/openoffice$(VER) && \
		ln -s /usr/share/xml/openoffice$(VER) $(PKGDIR)-dev/$(OODIR)/sdk/xml
	mv $(PKGDIR)-dev/$(OODIR)/sdk/idl $(PKGDIR)-dev/usr/share/idl/openoffice$(VER) && \
		ln -s /usr/share/idl/openoffice$(VER) $(PKGDIR)-dev/$(OODIR)/sdk/idl
	chmod 644 $(PKGDIR)-dev/$(OODIR)/sdk/configure.pl
	for i in setsdkenv_unix.csh setsdkenv_unix.sh; do \
		sed -e 's,@OO_SDK_NAME@,OpenOffice.org2.0_SDK,' \
		    -e 's,@OO_SDK_HOME@,/usr/lib/openoffice$(VER)/sdk,' \
		    -e 's,@OO_SDK_URE_HOME@,,' \
		    -e 's,@OFFICE_HOME@,/usr/lib/openoffice$(VER),' \
		    -e 's,@OO_SDK_MAKE_HOME@,/usr/bin,' \
		    -e 's,@OO_SDK_ZIP_HOME@,/usr/bin,' \
		    -e 's,@OO_SDK_CPP_HOME@,/usr/bin,' \
		    -e 's,@OO_SDK_JAVA_HOME@,$(JAVA_HOME),' \
		    -e 's,@SDK_AUTO_DEPLOYMENT@,NO,' \
			< $(PKGDIR)-dev/$(OODIR)/sdk/$$i.in \
			> $(PKGDIR)-dev/$(OODIR)/sdk/$$i; \
			chmod 755 $(PKGDIR)-dev/$(OODIR)/sdk/$$i; \
	done
	for i in csh csh.in; do \
		perl -pi -e 's,/usr/bin/csh,/bin/csh,'\
			$(PKGDIR)-dev/$(OODIR)/sdk/setsdkenv_unix.$$i; \
	done
	# create wrapper scripts
	cd $(PKGDIR)-dev/$(OODIR)/sdk/$(OS)/bin && \
	for i in *; do \
		mv $$i $$i.bin && \
		echo "#!/bin/sh" > $$i && \
		echo "# wrapper script for OOos SDK programs" >> $$i && \
		echo "" >> $$i; \
		echo 'LD_LIBRARY_PATH=/$(OODIR)/program /$(OODIR)/sdk/$(OS)/bin/`basename $$0`.bin $$@' >> $$i; \
		chmod 755 $$i; \
	done		

ifeq "$(INTERNAL_STDLIBS)" "y"
	# we have to do this manually; specifying --without-system-stdlibs
	# won't work because the odering of the configure arguments...
	LIBSTDCPP=`readlink `PATH=$(BUILD_PATH) g++ --print-file-name=libstdc++.so``; \
	LIBGCC=`readlink `PATH=$(BUILD_PATH) gcc --print-file-name=libgcc_s.so``; \
	LIBSTDCPP_SOVER=`echo $$LIBSTDCPP | sed -e 's/.*\.//'`; \
	LIBGCC_SOVER=`echo $$LIBGCC | sed -e 's/.*\.//'`; \
	cp $$LIBSTDCPP $(PKGDIR)-core/$(OODIR)/program; \
	cp $$LIBGCC $(PKGDIR)-core/$(OODIR)/program; \
	echo "libstdc++	$$LIBSTDCPP_SOVER" > debian/shlibs.override.stdlibs; \
	echo "libgcc_s	$$LIBGCC_SOVER" >> debian/shlibs.override.stdlibs
endif
ifeq "$(USE_SYSTEM_STLPORT)" "y"
	# remove a eventually sneaked-in stlport...
	rm -f $(PKGDIR)-core/$(OODIR)/program/libstlport*
endif

ifeq "$(ENABLE_JAVA)" "y"
  ifeq "$(BUILD_JARS_NATIVE)" "y"
	rm -rf $(PKGDIR)-gcj
	mkdir -p $(PKGDIR)-gcj/$(OODIR)/program/classes-native
  ifeq "$(REBUILD_JARS_NATIVE)" "y"
	# recompile the jar; the preferred way is to produce the binaries from
	# the bytecode.
	mkdir -p $(PKGDIR)-gcj/$(OODIR)/program/classes-native
	for jar in debian/tmp/pkg/openoffice.org-common/usr/lib/openoffice/program/classes/*.jar $(PKGDIR)-common/$(OODIR)/program/classes/*.jar $(PKGDIR)-java-common/usr/share/java/openoffice/*.jar; \
	do \
	  [ -h "$$jar" -o ! -f "$$jar" ] && continue; \
	  debian/scripts/aot-compile $$jar $(PKGDIR)-gcj/$(OODIR)/program/classes-native/$$(basename $$jar).so || exit $$?; \
	done
  else
	cp $(SOURCE_TREE)/solver/$(shell . $(SOURCE_TREE)/*.sh; echo $$UPD)/$(shell . $(SOURCE_TREE)/*.sh; echo $$OUTPATH$$PROEXT)/bin/*.jar.so \
		$(PKGDIR)-gcj/$(OODIR)/program/classes-native
  endif
	# remove not needed ones
	rm -f $(PKGDIR)-gcj/$(OODIR)/program/classes-native/FCFGMerge.jar.so
	rm -f $(PKGDIR)-gcj/$(OODIR)/program/classes-native/unoloader.jar.so
	rm -f $(PKGDIR)-gcj/$(OODIR)/program/classes-native/schema.jar.so
	# NetBeans crap
	rm -f $(PKGDIR)-gcj/$(OODIR)/program/classes-native/jhall.jar.so
	rm -f $(PKGDIR)-gcj/$(OODIR)/program/classes-native/nbantext.jar.so
	rm -f $(PKGDIR)-gcj/$(OODIR)/program/classes-native/openide.jar.so
	rm -f $(PKGDIR)-gcj/$(OODIR)/program/classes-native/jarpackager.jar.so
	# not needed yet
	rm -f $(PKGDIR)-gcj/$(OODIR)/program/classes-native/javacanvas.uno.jar.so
	# create gcj classmap
	mkdir -p $(PKGDIR)-gcj/usr/share/gcj-$(GCJ_VERSION)/classmap.d
	cd debian/tmp/pkg/openoffice.org-common/$(OODIR)/program/classes && \
	for i in `find . -type f -name "*.jar" | sed -e s,./,,g`; do \
	  gcj-dbtool -f $(CURDIR)/$(PKGDIR)-gcj/usr/share/gcj-$(GCJ_VERSION)/classmap.d/openoffice.org$(VER)-gcj.db $$i /$(OODIR)/program/classes-native/$$i.so; \
	done
  endif
endif

	# install some docs.
	mkdir -p $(PKGDIR)-base/usr/share/doc/openoffice.org$(VER)-base
	cp ooo-build/doc/using-mysql-databases.txt \
		$(PKGDIR)-base/usr/share/doc/openoffice.org$(VER)-base
	cp ooo-build/doc/data-from-remote-mysql-server.txt \
		$(PKGDIR)-base/usr/share/doc/openoffice.org$(VER)-base

ifneq "$(USE_EXTERNAL_MYTHES)" "y"
	# install libmythes and th_gen_idx.pl (on archs where we build OOo)
	rm -rf debian/libmythes-dev
	mkdir -p debian/libmythes-dev/usr/lib
	mkdir -p debian/libmythes-dev/usr/include
	mkdir -p debian/libmythes-dev/usr/share/mythes
	install -m644 \
		$(SOURCE_TREE)/lingucomponent/$(shell . $(SOURCE_TREE)/*.sh; echo $$OUTPATH$$PROEXT)/lib/libmythes.a \
		debian/libmythes-dev/usr/lib/libmythes_pic.a
	install -m644 \
		$(SOURCE_TREE)/libmythes_nopic.a \
		debian/libmythes-dev/usr/lib/libmythes.a
	install -m644 $(SOURCE_TREE)/lingucomponent/source/thesaurus/mythes/mythes.hxx \
		debian/libmythes-dev/usr/include
	install -m755 $(SOURCE_TREE)/dictionaries/util/th_gen_idx.pl \
		debian/libmythes-dev/usr/share/mythes/th_gen_idx.pl
endif

ifeq "$(ENABLE_JAVA)" "y"
	# install the UNO Java sources for e.g. eclipse
	cd $(SOURCE_TREE)/solver/$(shell . $(SOURCE_TREE)/*.sh; echo $$UPD)/$(shell . $(SOURCE_TREE)/*.sh; echo $$OUTPATH$$PROEXT)/bin && \
		for i in juh jurt jut ridl unoloader; do \
			cp $${i}_src.zip \
			  $(CURDIR)/$(PKGDIR)-dev/usr/share/java/openoffice; \
		done
endif
	
	touch $@

# Install files generated by setup into arch-independent package directories
install-indep: $(STAMP_DIR)/install-indep
#$(STAMP_DIR)/install-indep: debian/openoffice.org$(VER).install 
#$(STAMP_DIR)/install-indep: debian/openoffice.org$(VER)-mimelnk.install 
#$(STAMP_DIR)/install-indep: debian/openoffice.org$(VER).dirs
$(STAMP_DIR)/install-indep: $(STAMP_DIR)/install
$(STAMP_DIR)/install-indep: ooo-build/fonts/opens___.ttf
	dh_testdir
	dh_testroot
	umask 022

	# Copy files placed by ooo-build/bin/package-ooo	
	rm -rf $(PKGDIR)-common $(PKGDIR)-common.*.debhelper; \
	cp -r --preserve=mode debian/tmp/pkg/openoffice.org-common $(PKGDIR)-common || exit 1

	# Remove files in langpack
	for dir in program/resource share/registry/res/en-US; do \
	  rm -rf $(PKGDIR)-common/usr/lib/openoffice$(VER)/$$dir ;\
	done

	dh_installdirs -i

	# Extract and install icons
	cd $(SOURCE_TREE)/sysui/$(shell . $(SOURCE_TREE)/*.sh; echo $$OUTPATH$$PROEXT)/bin/desktop-integration && dpkg --extract openoffice.org-debian-menus_*_all.deb . && cd usr/share/icons; \
	for d in `find -type d`; do \
	  install -d -m755 $(CURDIR)/$(PKGDIR)-common/usr/share/icons/$$d || exit 1 ;\
	done &&\
	for f in `find -type f`; do \
	  install -m644 $$f $(CURDIR)/$(PKGDIR)-common/usr/share/icons/$$f || exit 1 ;\
	done && cd ../../.. && rm -rf usr etc

	# install .applications, .keys and .mime
	mkdir -p $(PKGDIR)-common/usr/share/application-registry && \
	install -m644 $(SOURCE_TREE)/sysui/desktop/mimetypes/openoffice.applications \
		$(PKGDIR)-common/usr/share/application-registry
	mkdir -p $(PKGDIR)-common/usr/share/mime/packages && \
	mkdir -p $(PKGDIR)-common/usr/share/mime-info && \
	install -m644 $(SOURCE_TREE)/sysui/desktop/mimetypes/openoffice.mime \
		$(PKGDIR)-common/usr/share/mime-info && \
	rm -f $(PKGDIR)-common/usr/share/mime-info/openoffice.keys; \
	for i in $(SOURCE_TREE)/sysui/$(shell . $(SOURCE_TREE)/*.sh; echo $$OUTPATH$$PROEXT)/misc/debian/*.keys; do \
		cat $$i >> $(PKGDIR)-common/usr/share/mime-info/openoffice.keys; \
	done
#	install -m644 $(SOURCE_TREE)/sysui/$(shell . $(SOURCE_TREE)/*.sh; echo $$OUTPATH$$PROEXT)/misc/desktopshare/openoffice.org.xml \
#		$(PKGDIR)-common/usr/share/mime/packages

	# install openoffice-xlate-lang
	install -d -m755 $(PKGDIR)-common/usr/share/openoffice$(VER)/bin
	install -m755 ooo-build/bin/openoffice-xlate-lang \
		$(PKGDIR)-common/usr/share/openoffice$(VER)/bin

	# compress manpages
	find $(PKGDIR)-common -type f -name "*.1" | xargs gzip -9
	mkdir -p $(PKGDIR)-common/usr/share/man/man1
	ln -sf openoffice$(VER).1.gz $(PKGDIR)-common/usr/share/man/man1/ooffice$(VER).1.gz
	ln -sf openoffice$(VER).1.gz $(PKGDIR)-common/usr/share/man/man1/ooo-wrapper$(VER).1.gz
	ln -sf openoffice$(VER).1.gz $(PKGDIR)-common/usr/share/man/man1/oofromtemplate$(VER).1.gz

ifneq "$(HELPISOS)" ""
	# fix permisson
	chmod ugo-x $(PKGDIR)-common/$(OODIR)/program/hid.lst
endif

ifeq "$(HELPISOS)" ""
	# when we don't build helpcontent2 here we are missing helpxsl.zip so
	# this file doesn't get installed either. Do it manually..
	mkdir -p -m755 $(PKGDIR)-common/$(OODIR)/help && \
	cp $(SOURCE_TREE)/helpcontent2/source/auxiliary/main_transform.xsl \
		$(PKGDIR)-common/$(OODIR)/help
endif

	# fix shebang
	perl -pi -e 's,/bin/awk,/usr/bin/awk,'\
		$(PKGDIR)-common/$(OODIR)/program/uri-encode

	# install the SDK docs
	rm -rf $(PKGDIR)-dev-doc
	mkdir -p $(PKGDIR)-dev-doc/$(OODIR)
	mkdir -p $(PKGDIR)-dev-doc/$(OODIR)/sdk
	unzip $(SOURCE_TREE)/solver/$(shell . $(SOURCE_TREE)/*.sh; echo $$UPD)/$(shell . $(SOURCE_TREE)/*.sh; echo $$OUTPATH$$PROEXT)/bin/odkcommon.zip docs/* -d $(PKGDIR)-dev-doc/$(OODIR)/sdk
	unzip $(SOURCE_TREE)/solver/$(shell . $(SOURCE_TREE)/*.sh; echo $$UPD)/$(shell . $(SOURCE_TREE)/*.sh; echo $$OUTPATH$$PROEXT)/bin/odk_oo.zip -d $(PKGDIR)-dev-doc/$(OODIR)/sdk
	unzip $(SOURCE_TREE)/solver/$(shell . $(SOURCE_TREE)/*.sh; echo $$UPD)/$(shell . $(SOURCE_TREE)/*.sh; echo $$OUTPATH$$PROEXT)/bin/odkexamples.zip -d $(PKGDIR)-dev-doc/$(OODIR)/sdk
	unzip -o $(SOURCE_TREE)/solver/$(shell . $(SOURCE_TREE)/*.sh; echo $$UPD)/$(shell . $(SOURCE_TREE)/*.sh; echo $$OUTPATH$$PROEXT)/bin/sdk_oo.zip -x settings/* -d $(PKGDIR)-dev-doc/$(OODIR)/sdk
	chmod 644 $(PKGDIR)-dev-doc/$(OODIR)/sdk/docs/images/bg_table2.gif
	chmod 644 $(PKGDIR)-dev-doc/$(OODIR)/sdk/docs/images/bg_table3.gif
	chmod 644 $(PKGDIR)-dev-doc/$(OODIR)/sdk/examples/DevelopersGuide/ScriptingFramework/ScriptSelector/build.xml
	chmod 644 $(PKGDIR)-dev-doc/$(OODIR)/sdk/examples/DevelopersGuide/ScriptingFramework/SayHello/build.xml

	# replace href's to the non-free DevelopersGuide with links to the
	# online docs
	find $(PKGDIR)-dev-doc/$(OODIR)/sdk/docs -name '*.html' \
	  | xargs sed -ri 's,href="[^"]*DevelopersGuide/([^"]*\.(xhtml|pdf)[^"]*)".*,href="http://api.openoffice.org/docs/DevelopersGuide/\1,g'

ifeq "$(ENABLE_JAVA)" "y"
	rm -rf $(PKGDIR)-java-common
	# move common Java stuff to -java-common
	mkdir -p $(PKGDIR)-java-common/$(OODIR)/program
	mkdir -p $(PKGDIR)-java-common/$(OODIR)/share/Scripts
	mkdir -p $(PKGDIR)-java-common/$(OODIR)/share/registry/modules/org/openoffice/TypeDetection/Filters
	mkdir -p $(PKGDIR)-java-common/$(OODIR)/share/registry/modules/org/openoffice/TypeDetection/Types
	mv $(PKGDIR)-common/$(OODIR)/program/JREProperties.class \
		$(PKGDIR)-java-common/$(OODIR)/program
	mv $(PKGDIR)-common/$(OODIR)/share/Scripts/java \
		$(PKGDIR)-java-common/$(OODIR)/share/Scripts
	for i in palm pocketexcel pocketword; do \
	  mv $(PKGDIR)-common/$(OODIR)/share/registry/modules/org/openoffice/TypeDetection/Filters/fcfg_$${i}_filters.xcu \
	    $(PKGDIR)-java-common/$(OODIR)/share/registry/modules/org/openoffice/TypeDetection/Filters; \
	  mv $(PKGDIR)-common/$(OODIR)/share/registry/modules/org/openoffice/TypeDetection/Types/fcfg_$${i}_types.xcu \
	    $(PKGDIR)-java-common/$(OODIR)/share/registry/modules/org/openoffice/TypeDetection/Types; \
	done
	mkdir -p $(PKGDIR)-java-common/usr/share/java/openoffice$(VER)
	mv $(PKGDIR)-common/$(OODIR)/program/classes/* \
		$(PKGDIR)-java-common/usr/share/java/openoffice$(VER)
	rm -rf $(PKGDIR)-common/$(OODIR)/program/classes
	ln -s /usr/share/java/openoffice$(VER) \
		$(PKGDIR)-java-common/$(OODIR)/program/classes
	cd $(PKGDIR)-common/$(OODIR)/program && \
	  for i in jvmfwk3rc setuprc unorc; do \
	    perl -pi -e \
	      's,\$$ORIGIN/classes,file:///usr/share/java/openoffice$(VER),g' \
		$$i; \
	  done
endif

	# fix permissions
	for i in editpic poll savepic show webcast; do \
		chmod 755 $(PKGDIR)-common/$(OODIR)/share/config/webcast/$$i.pl; \
	done

ifeq "$(HELPISOS)" ""
	# install hid.lst manually - we don't build helpcontents
	cp $(SOURCE_TREE)/helpcontent2/helpers/hid.lst \
		$(PKGDIR)-common/$(OODIR)/program
endif
	if [ -x $(PKGDIR)-cmmon/$(OODIR)/program/hid.lst ]; then \
		chmod 644 $(PKGDIR)-common/$(OODIR)/program/hid.lst; \
	fi

	rm -f $(PKGDIR)-common/$(OODIR)/LICENSE

	# move uno_packages/cache to /var and create symlink for for
	# documentation referencing it...
	rm -rf $(PKGDIR)-common/$(OODIR)/share/uno_packages/cache
	mkdir -p $(PKGDIR)-common/var/spool/openoffice$(VER)/uno_packages/cache
	ln -s /var/spool/openoffice$(VER)/uno_packages/cache \
		$(PKGDIR)-common/$(OODIR)/share/uno_packages/cache
	perl -pi -e \
	      's,\$$UNO_SHARED_PACKAGES/cache,file:///var/spool/openoffice$(VER)/uno_packages/cache,g' \
		$(PKGDIR)-common/$(OODIR)/program/unorc

	# install DicOOo and FontOOo; we need to do this manually; the
	# dictionaries/ module isn't built with --without-myspell-dicts
	# and those two somehow (why?) are in there...
	mkdir -p $(PKGDIR)-common/usr/share/myspell/dicts
	install -m644 $(SOURCE_TREE)/dictionaries/diclst/DicOOo.sxw \
		$(PKGDIR)-common/usr/share/myspell/dicts
	#install -m644 $(SOURCE_TREE)/dictionaries/diclst/FontOOo.sxw \
	#	$(PKGDIR)-common/usr/share/myspell/dicts

ifeq "$(PACKAGE_TTF_OPENSYMBOL)" "y"
	mkdir -p debian/ttf-opensymbol/usr/share/fonts/truetype/openoffice
	rm -f $(PKGDIR)-common/$(OODIR)/share/fonts/truetype/opens___.ttf
	install -m644 ooo-build/fonts/opens___.ttf \
		debian/ttf-opensymbol/usr/share/fonts/truetype/openoffice
else
	rm -f $(PKGDIR)-common/$(OODIR)/share/fonts/truetype/opens___.ttf
endif

	# dictionary symlink
	rm -rf $(PKGDIR)-common/$(OODIR)/share/dict/ooo
	ln -s /usr/share/myspell/dicts \
		$(PKGDIR)-common/$(OODIR)/share/dict/ooo
	mkdir -p $(PKGDIR)-common/usr/share/myspell/dicts
	ln -s /etc/openoffice/dictionary.lst \
		$(PKGDIR)-common/usr/share/myspell/dicts/dictionary.lst

	# convert icons to xpm; we need them for the Debian menu policy...
	cd $(PKGDIR)-common/usr/share/icons/gnome/32x32/apps && \
	  for x in *.png; do convert $$x `basename $$x .png`.xpm; done

ifeq "$(ENABLE_JAVA)" "y"
	# symlink jars we use externally
ifeq "$(SYSTEM_XT)" "y"
	ln -sf /usr/share/java/xt.jar \
		$(PKGDIR)-java-common/usr/share/java/openoffice$(VER)/xt.jar
endif
ifeq "$(SYSTEM_XALAN)" "y"
	ln -sf /usr/share/java/xalan2.jar \
		$(PKGDIR)-java-common/usr/share/java/openoffice$(VER)/xalan.jar
endif
ifeq "$(SYSTEM_XML_APIS)" "y"
	ln -sf /usr/share/java/jaxp-1.2.jar \
		$(PKGDIR)-java-common/usr/share/java/openoffice$(VER)/xml-apis.jar
endif
ifeq "$(SYSTEM_XERCES)" "y"
	ln -sf /usr/share/java/xercesImpl.jar \
		$(PKGDIR)-java-common/usr/share/java/openoffice$(VER)/xercesImpl.jar
endif
ifeq "$(USE_SYSTEM_BSH)" "y"
	ln -sf /usr/share/java/bsh.jar \
	        $(PKGDIR)-java-common/usr/share/java/openoffice$(VER)/bsh.jar
endif
endif

	# remove extra license files
	rm -rf $(PKGDIR)-commmon/$(OODIR)/licenses
	rm -rf $(PKGDIR)-common/$(OODIR)/share/readme/LICENSE*
	rm -f $(PKGDIR)-common/$(OODIR)/THIRDPARTYLICENSEREADME.html
	rm -f $(PKGDIR)-common/$(OODIR)/LICENSE.html

	# remove extra readme files
	rm -rf $(PKGDIR)-common/$(OODIR)/readmes
	rm -rf $(PKGDIR)-common/$(OODIR)/share/readme/README*

	# install Ximian desktop icons
	mkdir -p $(PKGDIR)-common/usr/share/icons/hicolor/48x48/apps
	cp ooo-build/desktop/*.png \
		$(PKGDIR)-common/usr/share/icons/hicolor/48x48/apps

	# add MySQL, MaxDB and PostgreSQ LJDBC drivers to OOos CLASSPATH
	TMP=`mktemp -q`; \
	sed -e 's|\(UNO_JAVA_JFW_CLASSPATH_URLS=.*\)|\1 file:///usr/share/java/mysql.jar|' \
	    -e 's|\(UNO_JAVA_JFW_CLASSPATH_URLS=.*\)|\1 file:///usr/share/java/sapdbc.jar|' \
	    -e 's|\(UNO_JAVA_JFW_CLASSPATH_URLS=.*\)|\1 file:///usr/share/java/postgresql.jar|' < $(PKGDIR)-common/$(OODIR)/program/jvmfwk3rc > $$TMP && \
	mv $$TMP $(PKGDIR)-common/$(OODIR)/program/jvmfwk3rc

	# move psprint.conf into /etc
	mkdir -p $(PKGDIR)-common/etc/openoffice$(VER)
	mv $(PKGDIR)-common/$(OODIR)/share/psprint/psprint.conf \
		$(PKGDIR)-common/etc/openoffice$(VER)
	ln -s /etc/openoffice$(VER)/psprint.conf \
		$(PKGDIR)-common/$(OODIR)/share/psprint/psprint.conf

	# prepare a fake sofficerc in the place where OOo expects it
	# which does nothing except reference the "normal" one
	# which we put into /etc
	mv $(PKGDIR)-common/$(OODIR)/program/sofficerc \
		$(PKGDIR)-common/etc/openoffice$(VER)/sofficerc
	echo "# *DO NOT* CHANGE THIS FILE. IT ONLY TAKES THE SETTINGS FROM" > \
		$(PKGDIR)-common/$(OODIR)/program/sofficerc
	echo "# /etc/openoffice$(VER)/sofficerc. CHANGE THAT FILE IF YOU" >> \
		$(PKGDIR)-common/$(OODIR)/program/sofficerc
	echo "# REALLY WANT TO CHANGE SOMETHING." >> \
		$(PKGDIR)-common/$(OODIR)/program/sofficerc
	echo "FHS_CONFIG_FILE=file:///etc/openoffice$(VER)/sofficerc" >> \
		$(PKGDIR)-common/$(OODIR)/program/sofficerc
	echo "" >> $(PKGDIR)-common/$(OODIR)/program/sofficerc
	cat $(PKGDIR)-common/etc/openoffice$(VER)/sofficerc \
		| perl -p -e 's/(.*)=(.*)/$$1=\$${\$$FHS_CONFIG_FILE:Bootstrap:$$1}/' \
		>> $(PKGDIR)-common/$(OODIR)/program/sofficerc

ifeq "$(HELPISOS)" ""
	# the helpimgs are not included when we don't build with help here.
	# Add them now because openoffice.org-help-* packaged in contrib or so
	# will need them
	for z in images.zip images_industrial.zip images_crystal.zip images_hicontrast.zip; do \
		rm -rf $$z; mkdir $$z; cd $$z; \
		unzip $(CURDIR)/$(PKGDIR)-common/$(OODIR)/share/config/$$z && \
		cp -r $(CURDIR)/$(SOURCE_TREE)/default_images/res/helpimg res && \
		zip -r $(CURDIR)/$(PKGDIR)-common/$(OODIR)/share/config/$$z *; \
		cd ..; \
	done
endif

	cp debian/catalog.xml $(PKGDIR)-common/$(OODIR)/share/dtd/officedocument/1_0

ifeq "$(PACKAGE_QA_TOOLS)" "y"
	mkdir -p -m755 $(PKGDIR)-qa-api-tests/$(OODIR)/qadevOOo/tests/java
	for d in objdsc testdocs; do \
		cp -r $(SOURCE_TREE)/qadevOOo/$$d $(PKGDIR)-qa-api-tests/$(OODIR)/qadevOOo/$$d; \
	done

	cp -r $(SOURCE_TREE)/qadevOOo/tests/basic $(PKGDIR)-qa-api-tests/$(OODIR)/qadevOOo/tests; \
	for d in mod ifc; do \
		cp -r $(SOURCE_TREE)/qadevOOo/unx*.pro/class/$$d $(PKGDIR)-qa-api-tests/$(OODIR)/qadevOOo/tests/java; \
	done

	find $(PKGDIR)-qa-api-tests -type d -name "CVS" | xargs rm -rf
	find $(PKGDIR)-qa-api-tests -type f | xargs chmod 0644

	echo "TestBase=java_fat" > $(PKGDIR)-qa-api-tests/usr/lib/openoffice/qadevOOo/java.props
	echo "TestBase=java_complex" > $(PKGDIR)-qa-api-tests/usr/lib/openoffice/qadevOOo/complex.props
	echo "TestBase=basic_fat" > $(PKGDIR)-qa-api-tests/usr/lib/openoffice/qadevOOo/basic.props

	echo "BASICBRIDGE=/$(OODIR)/qadevOOo/testdocs/BasicBridge.sxw" >> \
		$(PKGDIR)-qa-api-tests/usr/lib/openoffice/qadevOOo/basic.props
	echo "BASICRESPTH=/$(OODIR)/qadevOOo/tests/basic" >> \
		$(PKGDIR)-qa-api-tests/usr/lib/openoffice/qadevOOo/basic.props

	for i in java complex basic; do \
		echo "DescriptionPath=/$(OODIR)/qadevOOo/objdsc" >> \
			$(PKGDIR)-qa-api-tests/usr/lib/openoffice/qadevOOo/$$i.props; \
		echo "TestDocumentPath=/$(OODIR)/qadevOOo/testdocs" >> \
			$(PKGDIR)-qa-api-tests/usr/lib/openoffice/qadevOOo/$$i.props; \
		echo "AppExecutionCommand=/$(OODIR)/program/soffice" \
			"-norestore -nocrashreport -accept=socket,host=localhost,port=8100;urp;" >> \
			$(PKGDIR)-qa-api-tests/usr/lib/openoffice/qadevOOo/$$i.props; \
	done
endif

	# move READMEs to /usr/share/doc/openoffice.org
	mkdir -p $(PKGDIR)-common/usr/share/doc/openoffice.org$(VER)-common
	for i in README README.html; do \
		mv $(PKGDIR)-common/$(OODIR)/$$i \
			$(PKGDIR)-common/usr/share/doc/openoffice.org$(VER)-common; \
	done

	# add "openoffice" symlink
	cd $(PKGDIR)-common/usr/bin && ln -s ooo-wrapper openoffice

	touch $@


# This single target is used to build all the packages, all at once, or
# one at a time. So keep in mind: any options passed to commands here will
# affect _all_ packages. Anything you want to only affect one package
# should be put in another target, such as the install target.
binary-common:
	dh_testdir
	dh_testroot

	for pkg in `dh_listpackages` ; do \
	  rm -f debian/$$pkg.*.debhelper;\
	  rm -rf debian/$$pkg/DEBIAN;\
	done

	dh_installdocs
	dh_installman
	# fix manpage symlinks
	for i in writer calc draw impress base math; do \
		echo $(PACKAGES) | grep -q openoffice.org$(VER)-$$i || continue; \
		mkdir -p $(CURDIR)/$(PKGDIR)-$$i/usr/share/man/man1; \
		if [ "$$i" = "writer" ]; then \
			for j in writer html web; do \
				cd $(CURDIR)/$(PKGDIR)-$$i/usr/share/man/man1 && \
					ln -sf openoffice$(VER).1.gz oo$${j}$(VER).1.gz; \
			done; \
		else \
			cd $(CURDIR)/$(PKGDIR)-$$i/usr/share/man/man1 && \
				ln -sf openoffice$(VER).1.gz oo$${i}$(VER).1.gz; \
		fi; \
	done
	dh_installchangelogs
	if [ -e $(PKGDIR)/usr/share/doc/openoffice.org$(VER) ]; then \
	 install -m644 ooo-build/ChangeLog \
	   $(PKGDIR)-core/usr/share/doc/openoffice.org$(VER)-core/changelog.ooo-build \
	 && gzip -f9 \
	   $(PKGDIR)-core/usr/share/doc/openoffice.org$(VER)-core/changelog.ooo-build; \
	fi
	dh_installdebconf
	dh_installmime
	dh_installmenu
	dh_python
	debian/scripts/installoverrides
	dh_link
	dh_fixperms
ifeq "$(BUILD_DBG_PACKAGE)" "y"
	dh_strip --dbg-package=openoffice.org-dbg
else
	dh_strip
endif
	dh_desktop
	dh_installxmlcatalogs
	dh_compress
	# when we have manpages (well, links..) with .gz.gz, fix them
	# FIXME: Find out the root cause for this...
	if find $(PKGDIR)-common -type l -name "*.gz.gz" 2>&1 >/dev/null; then \
		for i in `find $(PKGDIR)-common -type l -name "*.gz.gz"`; do \
			mv $$i `echo "$$i" | sed -e "s/\.gz$$//"`; \
		done; \
	fi
	dh_installdeb
ifeq "$(ARCH)" "i386"
	# this LD_ASSUME_KERNEL is for working around some bug which makes
	# dh_shlibddeps report/find nothing with libc6-i686/TLS systems
	LD_ASSUME_KERNEL="2.4.27" dh_shlibdeps $(SHLIBS_OVERRIDE)
else
	dh_shlibdeps $(SHLIBS_OVERRIDE)
endif
ifeq "$(ENABLE_MONO)" "y"
	dh_clideps
endif
#	mkdir -p $(PKGDIR)-core/usr/share/doc/openoffice.org$(VER)-core
#	debian/scripts/gen_lib_list \
#	 > $(PKGDIR)-core/usr/share/doc/openoffice.org$(VER)-core/used_libs
# This switch to dh_shlibdeps reduces the 'libXXX not found' warnings but
# causes ldd crashes sometimes when used with fakeroot:
#          -l $(PKGDIR)-bin/$(OPENOFFICEDIR)/program
	dh_gencontrol -- \
		-V'base-version=$(UPSTREAM_VERSION)' \
		-V'dev-stl-depends=$(DEV_STL_DEPENDS)' \
		-V'writer-pyuno-dep=$(WRITER_PYUNO_DEP)' \
		-V'base-hsqldb-depends=$(BASE_HSQLDB_DEPENDS)' \
		-V'common-bsh-depends=$(COMMON_BSH_DEPENDS)' \
		-V'java-common-depends=$(JAVA_COMMON_DEPENDS)' \
		-V'java-common-java-depends=$(JAVA_COMMON_JAVA_DEPENDS)' \
		-V'Binary-Version=$(BINARY_VERSION)' \
		-V'ooo-filter52-dep=$(OOO_FILTER52_DEP)' \
		-v$(BINARY_VERSION)
	dh_md5sums
	dh_builddeb

# Build architecture independant packages using the common target.
binary-indep: $(STAMP_DIR)/binary-indep
$(STAMP_DIR)/binary-indep: $(STAMP_DIR)/install-indep debian/control $(STAMP_DIR)/maintscripts $(STAMP_DIR)/langpacks $(STAMP_DIR)/helppacks
ifeq ($(ARCH),$(findstring $(ARCH),$(NO_JAVA_ARCHS)))
	echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	echo "For uploads with binary-all packages, please use arches where Java is enabled!!!!!"
	echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
endif
	$(MAKE) -f debian/rules DH_OPTIONS="$(DEBHELPER_OPTIONS) -i" binary-common

	touch $@

# Build architecture dependant packages using the common target.
binary-arch: $(STAMP_DIR)/binary-arch
$(STAMP_DIR)/binary-arch: $(STAMP_DIR)/install-arch debian/control $(STAMP_DIR)/maintscripts
	$(MAKE) -f debian/rules DH_OPTIONS="$(DEBHELPER_OPTIONS) -s" binary-common
	touch $@

# Any other binary targets build just one binary package at a time.
binary-%: $(STAMP_DIR)/install-indep $(STAMP_DIR)/install-arch $(STAMP_DIR)/langpacks $(STAMP_DIR)/maintscripts
	$(MAKE) -f debian/rules binary-common DH_OPTIONS="$(DEBHELPER_OPTIONS) -p$*"

binary: binary-arch binary-indep

# -------------------------------------------------------
# Miscellaneous targets used to do a few useful operations

# Use 'debian/rules environment' to help debug architecture-related problems
# with the rules file.
environment:

	@echo 'Package build environment (not all variables may be set):'
	@echo '$$(ARCH)' is "$(ARCH)"
	@echo '$$(DEB_HOST_ARCH)' is "$(DEB_HOST_ARCH)"
	@echo '$$(CURDIR)' is "$(CURDIR)"
	@echo '$$(SOURCE_VERSION)' is "$(SOURCE_VERSION)"
	@echo '$$(UPSTREAM_VERSION)' is "$(UPSTREAM_VERSION)"
	@echo '$$(MILESTONE)' is "$(MILESTONE)"
	@echo '$$(JDK_HOME)' is "$(JDK_HOME)"
	@echo '$$(SUNJDK_VER)' is "$(SUNJDK_VER)"
	@echo '$$(_CC)' is "$(_CC)"
	@echo '$$(CXX)' is "$(CXX)"
	@echo '$$(BUILDCMD)' is "$(BUILDCMD)"
	@echo '$$(CONFIGURE_FLAGS)' is "$(CONFIGURE_FLAGS)"
	@echo '$$(BUILDFLAGS)' is "$(BUILDFLAGS)"
	@echo '$$(DMAKEFLAGS)' is "$(DMAKEFLAGS)"
	@echo '$$(SHLIBS_OVERRIDE)' is "$(SHLIBS_OVERRIDE)"
	@echo '$$(BUILD_ALL_LANGPACKS)' is "$(BUILD_ALL_LANGPACKS)"
	@echo '$$(BUILDLANG),$$(BUILDLANG_PREFIX)' is "$(BUILDLANG),$(BUILDLANG_PREFIX)"
	@echo '$$(USE_INTERNAL_FREETYPE)' is "$(USE_INTERNAL_FREETYPE)"
	@echo '$$(DEBHELPER_OPTIONS)' is "$(DEBHELPER_OPTIONS)"
	@echo '$$(PYTHON_DEPENDS)' is "$(PYTHON_DEPENDS)"
	@echo 'See debian/control for build dependencies.'

# Get the ximian packaging directory from gnome anoncvs
get-ooo-build:
	# press enter at the password prompt
	cvs -d:pserver:anonymous@anoncvs3.gnome.org:/cvs/gnome login
	cvs -z3 -d:pserver:anonymous@anoncvs3.gnome.org:/cvs/gnome co -r ooo-build-2-0-2 ooo-build
	cd ooo-build && ./autogen.sh $(CONFIGURE_FLAGS)

# Download the latest ooo-build sources
download: ooo-build/config.status
	ooo-build/download	

# Update debian and ooo-build directories from version control
cvsupdate:
	cd debian && baz update
	cd ooo-build && cvs -z3 -q update -dP

# Take a tarfile of all the non-stripped binaries in solver, for generating backtraces
# from coredumps.
makebinariestar:
ifeq "$(ARCH)" "i386"
	cd $(SOURCE_TREE)/solver/$(shell . $(SOURCE_TREE)/*.sh; echo $$UPD)/$(shell . $(SOURCE_TREE)/*.sh; echo $$OUTPATH$$PROEXT) && \
	  find bin lib | xargs file | sed -n '/LSB \(executable\|shared object\),.* not stripped/ s/:.*$$//p' | \
	  tar -T - -jcvf $(CURDIR)/../openoffice.org$(VER)-binaries_$(SOURCE_VERSION)_$(ARCH).tar.bz2
else
  ifeq "$(ARCH)" "arm"
	cd §(SOURCE_TREE)/solver/$(shell . $(SOURCE_TRE)/*.sh; echo $$UPD)/$(shell . $(SOURCE_TREE/*.sh; echo $$OUTPATH$$PROEXT) && \
	  find bin lib | xargs file | sed -n '/LSB \(executable\|shared object\),.* not stripped/ s/:.*$$//p' | \
	  tar -T - -jcvf $(CURDIR)/../openoffice.org$(VER)-binaries_$(SOURCE_VERSION)_$(ARCH).tar.bz2
  else
	cd $(SOURCE_TREE)/solver/$(shell . $(SOURCE_TREE)/*.sh; echo $$UPD)/$(shell . $(SOURCE_TREE)/*.sh; echo $$OUTPATH$$PROEXT) && \
	  find bin lib | xargs file | sed -n '/MSB \(executable\|shared object\),.* not stripped/ s/:.*$$//p' | \
	  tar -T - -jcvf $(CURDIR)/../openoffice.org$(VER)-binaries_$(SOURCE_VERSION)_$(ARCH).tar.bz2
  endif
endif
# -------------------------------------------------------

.PHONY: environment checksource control makebinariestar
.PHONY: clean-debdir clean-instsetoo clean-objectdirs clean default configure
.PHONY: build build-indep build-arch install-arch install-indep
.PHONY: $(stampdir_targets)
endif

# vim:set noet ai sts=8 sw=8 tw=0:
