#!/usr/bin/make -f
###################################################################################
# OpenOffice.org source package rules flie
#
# Please see debian/README for detailed documentation about the build system, and
# how to build OpenOffice.org.
###################################################################################
# Originally by Stephen Early <sde1000@debian.org>
# Modified by Mark W. Eichin <eichin@kitten.gen.ma.us>
# Modified by Adam Heath <doogie@debian.org>
# Modified by Branden Robinson <branden@debian.org>
# Modified by Peter Novodvorsky <nidd@debian.org>
# Modified by Filip Van Raemdonck <mechanix@debian.org>
# Modified by Jan-Hendrik Palic <jan.palic@linux-debian.de>
# Modified by Chris Halls <halls@debian.org>
# Modified by Rene Engelhard <rene@debian.org>
# Copyright 1996-2001,2002,2003 Software in the Public Interest, Inc.
# Licensed under the GNU General Public License, version 2.  See the file
# /usr/share/common-licenses/GPL or <http://www.gnu.org/copyleft/gpl.txt>.
# Acknowlegements to Branden Robinson, Stephen Early, Mark Eichin, and Manoj Srivastava.
###################################################################################

# Read in important variables.
include debian/scripts/vars

# default rule to keep things from going nuts by accident
default: environment

# This is a horrendous kludge to ensure that some scripts we need are executable.
DUMMY:=$(shell if [ ! -x debian/setperms ]; then chmod 755 debian/setperms; fi)
DUMMY:=$(shell debian/setperms)

# debhelper
export DH_OPTIONS
export DH_ALWAYS_EXCLUDE=CVS

# Get package version info.
SOURCE_VERSION:=$(shell head -1 debian/changelog | cut -d\( -f2 | cut -d\) -f1)
# Determine our architecture.
ARCH := $(shell dpkg-architecture -qDEB_HOST_ARCH)

# Read in architecture-specific variables of importance.
include debian/scripts/vars.$(ARCH)

# include variable -- where is Java? ;)
ifneq (jdkhome=,$(findstring jdkhome=,$(DEB_BUILD_OPTIONS)))
  JDK_HOME := $(shell /bin/sh debian/scripts/detect_java.sh)
else
  JDK_HOME:=$(shell echo "$(DEB_BUILD_OPTIONS)," | sed -n 's/^.*jdkhome=\([^,]*\),.*/\1/p')
endif

ifeq "$(BUILD_ALL_LANGPACKS)" "y"
  # Build langpacks for all known languages 
  LANGPACKLANGS=all
else
  # Build only 1 language pack
  LANGPACKLANGS=$(BUILDLANG)
endif

# This is where the upstream install rules will put their stuff.
DEBTREEDIR:=$(CURDIR)/debian/tmp
OPENOFFICEDIR:=/usr/lib/openoffice$(VER)
PKGOPENOFFICEDIR:=$(DEBTREEDIR)/$(OPENOFFICEDIR)

# Package install directory
MAINPKGDIR:=$(CURDIR)/debian/openoffice.org$(VER)

CONFIGURE_FLAGS=

# automatic configuration for woody backports
# check that default compiler is not gcc 2.x (as it is on Woody)
ifneq (gcc-2.9,$(findstring gcc-2.9,$(shell readlink /usr/bin/gcc)))
  _CC=gcc
  CXX=g++
  #USE_SYSTEM_LIBS=y
  USE_SYSTEM_LIBS=n
  #CONFIGURE_FLAGS+= --with-stlport4-home=$(CURDIR)/stlport-home
else
  # use latest gcc-3.x compiler version
  _CC=$(shell cd /usr/bin; ls gcc-3.* | tail -1)
  CXX=$(subst gcc,g++,$(_CC))

  # Don't use system libstlport
  USE_SYSTEM_LIBS=n
endif

# gcc version can be overriden by setting GCCVER in scripts/vars[.arch]
ifneq "$(GCCVER)" ""
  _CC=gcc-$(GCCVER)
  CXX=g++-$(GCCVER)
endif

ifeq "$_CC" "gcc-3.0"
  # gcc 3.0 Backport - disable mozilla and MANIFEST check
  IGNORE_MANIFEST_CHANGES=1
  export IGNORE_MANIFEST_CHANGES
else
  ifneq "$(MOZILLA)" "n"
    CONFIGURE_FLAGS+= --enable-mozilla 
  endif
endif

# Packages compiled with libfreetype on Woody do not work properly with
# libfreetype from Sarge or Sid, so enforce that with a shlibs override
#ifeq (libfreetype.so.6.3.0,$(shell readlink /usr/lib/libfreetype.so))
#  SHLIBS_OVERRIDE=-- -Ldebian/shlibs.woody.local
#endif

# do we have po-debconf available?
ifeq (,$(wildcard /usr/bin/po2debconf))
  PO2DEBCONF := no
  MINDEBCONFVER := 0.5
else
  PO2DEBCONF := yes
  MINDEBCONFVER := 1.2.0
endif

# Default build.pl flags
ifeq (build=,$(findstring build=,$(DEB_BUILD_OPTIONS)))
  BUILDFLAGS:=$(shell echo "$(DEB_BUILD_OPTIONS)," | sed -n 's/^.*build=\([^,]*\),.*/\1/p')
else
  BUILDFLAGS:=
endif

# Default dmake flags
ifeq (dmake=,$(findstring dmake=,$(DEB_BUILD_OPTIONS)))
  DMAKEFLAGS:=$(shell echo "$(DEB_BUILD_OPTIONS)," | sed -n 's/^.*dmake=\([^,]*\),.*/\1/p')
else
  DMAKEFLAGS:=
endif

# If startfrom=<prj> is specified, resume build from this project
ifeq (startfrom=,$(findstring startfrom=,$(DEB_BUILD_OPTIONS)))
  STARTFROM:=--from $(shell echo "$(DEB_BUILD_OPTIONS)," | sed -n 's/^.*startfrom=\([^,]*\),.*/\1/p')
else
  STARTFROM:=--all
endif

#if debug is set into DEB_BUILD_OPTIONS, debug=yes will added to buildprj, so you can
#build single projects with debugging symbols
ifeq (debug,$(findstring debug,$(DEB_BUILD_OPTIONS)))
   DMAKEFLAGS+= debug=yes
endif

# Setting MAXPROCESS for dmake for parallel builds.  There are some problems, see IZ#9443
# Extract -Pn from DEB_BUILD_OPTIONS for dmake option
DMAKEPARALLEL:=$(shell echo $(DEB_BUILD_OPTIONS) | sed -n 's/^\(.*,\)\?-P\([0-9]\+\)\(,.*\)\?$$/-P\2/p')

# Building n projects in parallel.  This doesn't seem to work properly with perl 5.8
# Extract -PPn from DEB_BUILD_OPTIONS as -Pn for build.pl option
BUILDPARALLEL:=$(shell echo $(DEB_BUILD_OPTIONS) | sed -n 's/^\(.*,\)\?-PP\([0-9]\+\)\(,.*\)\?$$/-P\2/p')

BUILDFLAGS+= $(BUILDPARALLEL)
DMAKEFLAGS+= $(DMAKEPARALLEL)

# distcc will be used if DISTCC_HOSTS is set
# The number of processes (-PP) will be set to the number of DISTCC_HOSTS, unless you
# override it with -PPn or -Pn in DEB_BUILD_OPTIONS
#ifdef DISTCC_HOSTS
#  # If there were no -PP or -P options, set to number of distcc hosts
#  ifeq "$(PARALLEL)" ""
#    PARALLEL:=-PP$(strip $(shell echo $(DISTCC_HOSTS) | wc -w))
#  fi
#
#  _CC:=distcc $(_CC)
#  CXX:=distcc $(CXX)
#endif

# Use compiler cache?  Include ccache in DEB_BUILD_OPTIONS for much faster rebuild times
# A complete build uses about 200Mb of compiler cache.
ifeq (ccache,$(findstring ccache,$(DEB_BUILD_OPTIONS)))
  CCACHE=ccache
  CCACHE_LOGFILE=$(STAMP_DIR)/ccache.log
  _CC:=ccache $(_CC)
  CXX:=ccache $(CXX)
  export CCACHE_LOGFILE
else
  CCACHE=
endif

ifeq (noopt,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
  ENVCFLAGS=-O0
  ENVCFLAGSCXX=-O0
  export ENVCFLAGS ENVCFLAGSCXX
else
  # we do that because at least on i386 compiling with -O1 instead of
  # -O2 does not give the experienced relocation errors anymore...;
  # sparc, i386 have -O1 anyhow
  ifeq ($(ARCH),powerpc)
    OPT_STD_2=1
  else
    ifeq ($(ARCH),s390)
      OPT_STD_2=1
    endif
  endif
  ifdef OPT_STD_2
    ENVCFLAGS=-O1
    ENVCFLAGSCXX=-O1
    export ENVCFLAGS ENVCFLAGSCXX
  endif
endif

# Delete each project output tree once it has been delivered to the solver?  DEB_BUILD_OPTIONS=deloutput
ifeq (deloutput,$(findstring deloutput,$(DEB_BUILD_OPTIONS)))
  BUILDFLAGS+= --dlv_switch link deloutput
else
  BUILDFLAGS+= --dlv_switch link
endif
  

#
# Add parallel build flags and always hard link into the solver

#command to use to build OOo
BUILDCMD:=XCLASSPATH=$$XCLASSPATH::/usr/share/java/crimson.jar:/usr/share/java/xalan.jar:/usr/share/java/xml-apis.jar:/usr/share/java/xalan2.jar PRODUCT="FULL" \
          $(CURDIR)/$(SOURCE_TREE)/solenv/bin/build.pl

# Because of the stampdir magic, when you actually want to run a rule
# over, you would have to remove the stamp manually.  Now, just do
# 'debian/rules <target> <target> ... FORCE=1', and the stamp files
# that match the given targets will be removed automagically.
stampdir_targets=build.prepare configure bootstrap solver instsetoo
stampdir_targets+=setupins setup install langpacks binary-common binary-arch binary-indep
stampdir_targets+=source.make patchapply
stampdir_targets+=source.build source.unpack fix.source.patch source.patch
stampdir_targets+=unfix.source.patch
ifdef FORCE
 DUMMY:=$(shell rm -f $(patsubst %,$(STAMP_DIR)/%,$(filter $(stampdir_targets),$(MAKECMDGOALS))))
endif

# If this is defined, then none of the 'long' commands will be run.  Useful
# for testing.
# test_rules=1

# Since the final stages use up a large amount of diskspace, provide targets to
# remove them without needing a full rebuild

# Clean up the package directories (about 830M) 
clean-debdir:
	dh_testdir
	rm -f debian/*.postinst debian/*.postrm debian/*.preinst debian/*.prerm
	rm -f $(STAMP_DIR)/setup
	dh_clean

# Clean up the installation sets and package directories (about 2.5 Gb!)
clean-instsetoo: clean-debdir
	dh_testdir
	rm -f $(STAMP_DIR)/instsetoo
	# Remove all installation sets
	rm -rf $(SOURCE_TREE)/instsetoo/$(ARCHBUILDDIR)

# Clean compilation results, but leave solver (about 600Mb in addition to instsetoo)
clean-objectdirs: clean-instsetoo
	dh_testdir
	find $(SOURCE_TREE) -maxdepth 2 -name $(ARCHBUILDDIR) -type d -exec rm -rf {} \;

clean: $(STAMP_DIR)/patch.unapply
	dh_testdir config_office/configure.in
	rm -f debian/MANIFEST.*.new
ifeq ($(PO2DEBCONF),yes)
	# Hack for woody compatibility. This makes sure that the
	# debian/templates file shipped in the source package doesn't
	# specify encodings, which woody's debconf can't handle. If building
	# on a system with po-debconf installed (conveniently debhelper (>=
	# 4.1.16) depends on it), the binary-arch target will generate a
	# better version for sarge.
	echo 1 > debian/po/output
	po2debconf $(MAINPKGDIR)-bin.templates.master \
		> $(MAINPKGDIR)-bin.templates
	rm -f debian/po/output
endif
	#cd $(SOURCE_TREE)/dmake && \
	# [ -f configure.orig ] && \
	#  mv -f configure.orig configure
	#

	# we do not need them and they make problem with dpkg-source....
	rm -f $(TOOLS_DIR)/desktop/*.png $(TOOLS_DIR)/src/*tar.gz \
		$(TOOLS_DIR)/www/*.png
	
	# Clean rule, if we had a system dmake..
	#if [ -f $(SOURCE_TREE)/$(ENVFILE) ]; then \
	#    cd $(SOURCE_TREE) && . ./$(ENVFILE) && \
	#    dmake distclean; \
	#fi
	cd $(SOURCE_TREE)/config_office && \
	  rm -f config.cache config.log \
              config.status config.parms \
	      warn set_soenv && \
	  rm -rf autom4te.cache

	rm -rf $(SOURCE_TREE)/*/$(ARCHBUILDDIR) \
	       $(SOURCE_TREE)/solver \
	       $(SOURCE_TREE)/dmake/autom4te.cache

	# Restore modified files
	if cd $(SOURCE_TREE)/modified_files; then \
	  find . -type f -exec cp -v -p {} ../{} \; ;\
	fi

	rm -rf $(SOURCE_TREE)/modified_files
	  
	# Delete files in dmake
	if [ -f dmake/Makefile ];then $(MAKE) -C dmake distclean; fi
	rm -f dmake/dmakeroot.h
	find dmake/startup -name Makefile -exec rm {} \;

	dh_clean delzip

	rm -rf $(STAMP_DIR) $(DEBTREEDIR) stlport-home
	rm -f makefile.mk $(ENVFILE) $(subst Env.Set.sh,Env.Set,$(ENVFILE)) \
	      bootstrap

	$(MAKE) -f debian/rules control


# Generate control file, because we have so many different languages
# Based on script by Martin Quinson <Martin.Quinson@tuxfamily.org>
control: debian/control
debian/control: debian/control.in debian/control.lang.in debian/local/openoffice-xlate-lang
	cat > debian/control < debian/control.in

	for LNUM in `debian/local/openoffice-xlate-lang -p all ` ; do \
	    LNAME=`debian/local/openoffice-xlate-lang -l $$LNUM`; \
	    LCODE=`debian/local/openoffice-xlate-lang -i $$LNUM | tr A-Z a-z`; \
	    SUGGESTS=; \
	    sed -e "s|@LNAME@|$$LNAME|g" -e "s|@LCODE@|$$LCODE|g" \
	        -e "s|@SUGGESTS@|$$SUGGESTS|g" \
	        >> debian/control < debian/control.lang.in; \
	done

.DELETE_ON_ERROR: debian/control

build: build-arch build-indep
build-arch: $(STAMP_DIR)/instsetoo
build-indep: $(STAMP_DIR)/solver
#
# apply ximian patches and install new icons
debian/stampdir/source.patch: debian/stampdir/ximian.patchapply debian/stampdir/ximian.icons

# All 'important' targets have 2 lines.  The one that is run by
# dpkg-buildpackage or the user, and the one that does the actual work.  This
# indirection is needed so that the 'stamp' files that signify when a rule is
# done can be located in a separate 'stampdir'.  Recall that make has no way to
# know when a goal has been met for a phony target (like "build" or "install").
#
# At the end of each stampdir target, be sure to run the command 'touch $@'
# so that the target will not be run again.  Removing the file will make
# make run the target over.

patch.apply: $(STAMP_DIR)/patch.apply
$(STAMP_DIR)/patch.apply:
	# Test that we have the Ximian packaging directory available.  If your
	# build stops here, you need to check it out.
	# You can get the directory with the command:
	# debian/rules get-build-ooo
	dh_testdir $(TOOLS_DIR)/patches/apply.pl

	rm -f $(STAMP_DIR)/patch.unapply
	chmod 755 $(TOOLS_DIR)/patches/apply.pl
	$(TOOLS_DIR)/patches/apply.pl $(TOOLS_DIR)/patches/$(PATCH_DIR) $(BUILD_DIR) --distro=Debian -f

ifeq (libfreetype.so.6.3.0,$(shell readlink /usr/lib/libfreetype.so))
	# Woody system - unapply system-freetype patch
	ftpatch="`ls $(BUILD_DIR)/applied_patches/???-gui-ft-dynlink-system.patch`" ; \
	if [ -f "$$ftpatch" ]; then \
	  patch -R -l -b -p0 -f -d $(BUILD_DIR) < "$$ftpatch" && \
	  rm "$$ftpatch" ;\
	fi
endif
	mkdir -p $(STAMP_DIR)
	touch $@

patch.unapply: $(STAMP_DIR)/patch.unapply
$(STAMP_DIR)/patch.unapply:
	dh_testdir $(TOOLS_DIR)/patches/apply.pl

	$(TOOLS_DIR)/patches/apply.pl $(TOOLS_DIR)/patches/$(PATCH_DIR) $(BUILD_DIR) --distro=Debian -f -R
	rm -f $(STAMP_DIR)/patch.apply
	mkdir -p $(STAMP_DIR)
	touch $@

# Build step 1 - prepare source tree
build.prepare: $(STAMP_DIR)/build.prepare
$(STAMP_DIR)/build.prepare: $(STAMP_DIR)/patch.apply
	dh_testdir $(TOOLS_DIR)/patches/apply.pl

	$(MAKE) -f debian/rules control
	
	# Back up source files that we modify
	for f in dmake/configure config_office/configure; do \
	  mkdir -p modified_files/`dirname $$f` && \
	  cp -v -p $$f modified_files/$$f ;\
	done

	#rm -rf $(SOURCE_TREE)/external/gpc

ifeq "$(USE_SYSTEM_LIBS)" "y"
	# making stlport home
	if [ ! -d stlport-home ]; then \
	  mkdir stlport-home ;\
	  ln -s /usr/include stlport-home/include ;\
	  ln -s /usr/lib stlport-home/lib ;\
	fi
endif

ifneq "$(ARCH)" "i386"
ifneq "$(MOZILLA)" "n"
	# Workaround for mozilla zips on ! i386
	cp -rvf ../mozlibs/* $(SOURCE_TREE)/moz/zipped/
endif
endif

	# In the 1.0.1 tarball, some scripts are not executable
	#chmod ugo+x $(SOURCE_TREE)/solenv/bin/*.pl

	# we patched dmake - run autoconf
	cd $(SOURCE_TREE)/dmake && \
	  autoconf

	touch $@

# Build step 2 - configure
configure: $(STAMP_DIR)/configure
$(STAMP_DIR)/configure: $(STAMP_DIR)/build.prepare 
	dh_testdir
	$(MAKE) -f debian/rules environment

	# Make sure we have a valid JDK.  If this test fails, please install the JDK
	# package (j2sdk1.3), or add the path to debian/scripts/detect_java.sh,
	# or specify a JDK location with DEB_BUILD_OPTIONS=jdkhome=/absolute/path/to/jdk
	test -x /$(JDK_HOME)/bin/javac

	# Make sure we have /proc mounted - otherwise idlc will fail later.
	test -r /proc/version

	# Remove config.cache so we always generate config again
	rm -f $(SOURCE_TREE)/config_office/config.cache

	cd $(SOURCE_TREE)/config_office && autoconf && \
	  CC="$(_CC)" CXX="$(CXX)" sh ./configure \
            --with-lang=ALL \
	    --with-jdk-home=$(JDK_HOME) \
	    --enable-libart \
	    --disable-rpath \
	    --enable-crashdump \
	    --enable-symbols=SMALL \
	    --without-fonts \
	    $(CONFIGURE_FLAGS) \
	    < /dev/null
	touch $@
	
#	    --without-fonts \
#    --with-python \

# Build step 3 - bootstrap
bootstrap: $(STAMP_DIR)/bootstrap
$(STAMP_DIR)/bootstrap: $(STAMP_DIR)/configure
	dh_testdir

	cd $(SOURCE_TREE); ./bootstrap

	# Copy files needed when building with libgpc (this is non-free and
	# therefore not part of the official Debian packages)
	#mkdir -p $(SOURCE_TREE)/solver/$(BUILDNUM)/$(ARCHBUILDDIR)/inc/external/gpc
	#mkdir -p $(SOURCE_TREE)/solver/$(BUILDNUM)/$(ARCHBUILDDIR)/lib
	#cp /usr/include/gpcl/gpc.h $(SOURCE_TREE)/solver/$(BUILDNUM)/$(ARCHBUILDDIR)/inc/external/gpc
	#cp /usr/lib/libgpcl*.so  $(SOURCE_TREE)/solver/$(BUILDNUM)/$(ARCHBUILDDIR)/lib

	touch $@

# Build step . - build all projects needed for installation sets but do not yet create instsets
solver: $(STAMP_DIR)/solver
$(STAMP_DIR)/solver: $(STAMP_DIR)/bootstrap
	dh_testdir
	. $(SOURCE_TREE)/$(ENVFILE); cd $(SOURCE_TREE)/instsetoo && \
	    $(BUILDCMD) $(STARTFROM) $(BUILDFLAGS) -- instsetext= $(DMAKEFLAGS)

	touch $@

# Build step . - build full installation set for BUILDLANG language
instsetoo: $(STAMP_DIR)/instsetoo
$(STAMP_DIR)/instsetoo: $(STAMP_DIR)/solver
	dh_testdir
	. $(SOURCE_TREE)/$(ENVFILE); cd $(SOURCE_TREE)/instsetoo && \
	    $(BUILDCMD) $(BUILDFLAGS) --from instsetoo -- instsetext="$(BUILDLANG)" $(DMAKEFLAGS)

	touch $@

# Build step . - build insetsetoo installation scrips for langpacks
setupins: $(STAMP_DIR)/setupins
$(STAMP_DIR)/setupins: $(STAMP_DIR)/solver
ifeq "$(BUILD_ALL_LANGPACKS)" "y"
	dh_testdir
	# we don't want to build $(BUILDLANG) so remove it from the list
	. $(SOURCE_TREE)/$(ENVFILE); cd $(SOURCE_TREE)/instsetoo && LZIPFLAGS=-O \
	instsetext="`cd util;dmake instsetext= | sed -n '/alllangext:/ s/alllangext:\(.*\) 01 \(.*\)/\1 \2/p'`" \
	$(BUILDCMD) --from instsetoo $(BUILDFLAGS) -- $(DMAKEFLAGS)

	touch $@
endif

# Build step 4a - project (build individual project)
# for an overview, see:
#	http://www.openoffice.org/dev_docs/source/build_linux.html#BuildingIndividualProjects
# This target is not used by the main build, but may be useful to just build a troublesome project.
# You need to specify a project like this:
#   debian/rules buildprj PRJ=<module>
PRJ=unknown-project
# See http://tools.openoffice.org/modules.html for a list of modules that can be built.

buildprj: $(STAMP_DIR)/bootstrap
	dh_testdir

	# run dmake with xfvb-run
	. $(SOURCE_TREE)/$(ENVFILE); cd $(SOURCE_TREE)/$(PRJ) && \
	    $(BUILDCMD) $(BUILDFLAGS) -- $(DMAKEFLAGS)

	-echo Project $(PRJ) build successful

# Build all projects until the given project
# e.g. debian/rules builduntil-transex3
builduntil-%: $(STAMP_DIR)/bootstrap
	dh_testdir

	. $(SOURCE_TREE)/$(ENVFILE); cd $(SOURCE_TREE)/$(subst builduntil-,,$@) && \
	    $(BUILDCMD) $(STARTFROM) $(BUILDFLAGS) --$(DMAKEFLAGS)

	-echo Project $(PRJ) build successful

#
# Build step 5 - generate maintainer scripts
maintscripts: $(STAMP_DIR)/maintscripts
$(STAMP_DIR)/maintscripts: debian/shell-lib.sh debian/control
	dh_testdir

	# there is a problem that uno_writerdb.rdb does not exist, so setup does not work.
	# This is a workaround
	#cp $(SOURCE_TREE)/solver/$(BUILDNUM)/$(ARCHBUILDDIR)/bin/setup_services.rdb \
	#   $(SOURCE_TREE)/solver/$(BUILDNUM)/$(ARCHBUILDDIR)/bin/uno_writerdb.rdb
	#zip -j -5 "f0_061" $(SOURCE_TREE)/solver/$(BUILDNUM)/$(ARCHBUILDDIR)/bin/uno_writerdb.rdb
	#mv f0_061.zip $(SOURCE_TREE)/instsetoo/$(ARCHBUILDDIR)/$(BUILDLANG)/normal

	# generate maintainer scripts from *.in
	# or generate default script which calls hook in openoffice.org-debian-files package
	for PKG in `dh_listpackages`; do \
	  for FILE in postinst postrm preinst prerm; do \
	    MAINTSCRIPT=debian/$$PKG.$$FILE ; \
	    if [ -e $$MAINTSCRIPT.in ]; then \
	      sed -n '1,/^#INCLUDE_SHELL_LIB#$$/p' < $$MAINTSCRIPT.in | sed -e '/^#INCLUDE_SHELL_LIB#$$/d' > $$MAINTSCRIPT; \
	      cat debian/shell-lib.sh >> $$MAINTSCRIPT; \
	      sed -n '/^#INCLUDE_SHELL_LIB#$$/,$$p' < $$MAINTSCRIPT.in | sed -e '/^#INCLUDE_SHELL_LIB#$$/d' >> $$MAINTSCRIPT; \
	    else \
	      echo '#!/bin/sh' > $$MAINTSCRIPT ; \
	      echo THIS_PACKAGE=$$PKG >> $$MAINTSCRIPT ;\
	      echo THIS_SCRIPT=$$FILE >> $$MAINTSCRIPT ;\
	      cat debian/shell-lib.sh >> $$MAINTSCRIPT; \
	    fi; \
	  done; \
	done
	touch $@

# Run openoffice setup for net install
setup: $(STAMP_DIR)/setup
$(STAMP_DIR)/setup: $(STAMP_DIR)/instsetoo
	dh_testdir
	dh_testroot
	umask 022

	# Packagers - if you are working on improving the .debs, you can
	# run setup and rebuild over and over like this:
	# rm debian/stampdir/setup ; dpkg-buildpackage -nc -rfakeroot

	rm -rf $(DEBTREEDIR)
	rm -f $(STAMP_DIR)/install.log
	mkdir -p $(PKGOPENOFFICEDIR)

	sed -e "s#@DESTDIR@#$(PKGOPENOFFICEDIR)#" \
	    -e "s#@LOGFILE@#$(CURDIR)/$(STAMP_DIR)/install.log#" \
		debian/local/rsfile.global.txt > debian/local/rsfile.txt

	# Run OOo setup using response file.
	$(SOURCE_TREE)/instsetoo/$(ARCHBUILDDIR)/$(BUILDLANG)/normal/setup -v \
				-R:$(CURDIR)/debian/local/rsfile.txt -nogui

	rm -f debian/local/rsfile.txt

	# Remove copy of libstdc++ since we do not use it
	rm -f $(PKGOPENOFFICEDIR)/program/libstdc++*

	# Check that setup really did something
	[ -f $(PKGOPENOFFICEDIR)/program/soffice.bin ]

	touch $@

# Install files generated by setup into package directories
install: $(STAMP_DIR)/install
$(STAMP_DIR)/install: debian/openoffice.org$(VER).install debian/openoffice.org$(VER)-bin.install
$(STAMP_DIR)/install: debian/MANIFEST.$(ARCH) debian/openoffice.org$(VER).dirs
$(STAMP_DIR)/install: $(STAMP_DIR)/setup
	dh_testdir
	dh_testroot
	umask 022

	# Remove package directories
	rm -rf $(MAINPKGDIR) $(MAINPKGDIR)-bin $(MAINPKGDIR)-gnome \
		$(MAINPKGDIR)-mimelnk
	rm -f $(MAINPKGDIR).*.debhelper
	rm -f $(MAINPKGDIR)-bin.*.debhelper

	dh_installdirs

	# compare manifests
	(cd debian/tmp && find -type f -o -type l | LC_ALL=C sort | cut -c3-) > debian/MANIFEST.$(ARCH).new
	# confirm that the installed file list has not changed
	if [ -e debian/MANIFEST.$(ARCH) ]; then \
	  if ! cmp -s debian/MANIFEST.$(ARCH) debian/MANIFEST.$(ARCH).new; then \
	    diff -u -0 debian/MANIFEST.$(ARCH) debian/MANIFEST.$(ARCH).new; \
	    if [ -n "$$IGNORE_MANIFEST_CHANGES" ]; then \
	      echo 'MANIFEST check failed; ignoring problem because \$$IGNORE_MANIFEST_CHANGES set' >&2; \
	      echo 'Please ensure that the package maintainer has an up-to-date version of the' >&2; \
	      echo 'MANIFEST.$(ARCH) file.' >&2; \
	    else \
	      echo 'MANIFEST check failed; please see debian/README' >&2; \
	      exit 1; \
	    fi; \
	  fi; \
	fi;

	dh_install --sourcedir=debian/tmp

	# Disable desktop (KDE, GNOME, CDE) integration for user installs
	# Copied from Mandrake.  Thanks, Gwenole!
	for module in gid_Module_Optional_Gnome gid_Module_Optional_Kde gid_Module_Optional_Cde; do \
	   perl -pi -e "/^Module $$module/ .. /^End/ and s|(Installed.*)=.*|\1= NO;|" \
	       $(MAINPKGDIR)-bin/$(OPENOFFICEDIR)/program/instdb.ins ;\
	done

	# convert program/icon paths in desktop shortcuts
	for I in $(MAINPKGDIR)/usr/share/applnk/*/*.desktop \
		 $(MAINPKGDIR)-gnome/usr/share/applications/*.desktop; do \
	    sed -e 's,Exec="\?/.*\(/usr/lib/openoffice$(VER)/program/setup\)"\?,Exec=\1,' \
	        -e 's,Exec="\?/.*/usr/lib/openoffice$(VER)/program/s\?\([^"]*\)"\?,Exec=/usr/bin/oo\1$(VER),' \
		-e 's,/oooffice ,/ooffice ,' \
	        -e 's,Icon=.*/\([^/]*\.png\),Icon=/usr/lib/openoffice$(VER)/share/icons/\1,' \
	        < "$$I" > "$$I.new" ;\
	    rm "$$I"; mv "$$I.new" "$$I" ;\
	done

	# Workaround for co-existing 1.0 and 1.1 - don't install icons in /usr/share/icons for 1.1 yet
	#rm -r $(MAINPKGDIR)/usr/share/icons
	 
ifeq "$(ARCH)" "i386"
	cp -rf $(PKGOPENOFFICEDIR)/program/libmozab2.so \
	   $(MAINPKGDIR)-bin/$(OPENOFFICEDIR)/program/libmozab2.so
	cp -rf $(PKGOPENOFFICEDIR)/program/libmozabdrv2.so \
	   $(MAINPKGDIR)-bin/$(OPENOFFICEDIR)/program/libmozabdrv2.so
endif

ifneq "$(USE_SYSTEM_LIBS)" "y"
	# Copy libstlport if we are using the internal library
	cp -f $(PKGOPENOFFICEDIR)/program/libstlport_gcc.so \
		$(MAINPKGDIR)-bin/$(OPENOFFICEDIR)/program
endif

	# Remove packaging prefix and set default install directory to ~/.openoffice/<version> in instdb.ins
	for FILE in $(MAINPKGDIR)-bin/$(OPENOFFICEDIR)/program/instdb.ins ; do \
	  sed -e 's#$(PKGOPENOFFICEDIR)#$(OPENOFFICEDIR)#g' \
	      -e 's#\(DefaultDestPath *= *"\)OpenOffice.org#\1.openoffice/#' \
	     "$$FILE" > "$$FILE".new; \
	  mv "$$FILE".new "$$FILE"; \
	done

	# there are some wrong permissions; fix them ourselves
	#find $(MAINPKGDIR) $(MAINPKGDIR)-bin \
	#	-type f \( -name "*.xpt" -o -name "*.js" -o -name "*en_US.*" \
	#	        -o -name "component.reg" -o -name "xpti*.dat" \) -exec chmod ugo-x {} \;
	for FILE in editpic poll savepic show webcast; do\
	    chmod ugo+x $(MAINPKGDIR)/$(OPENOFFICEDIR)/share/config/webcast/$$FILE.pl ; \
	done
	for FILE in edit common index; do \
	    chmod ugo-x $(MAINPKGDIR)/$(OPENOFFICEDIR)/share/config/webcast/$$FILE.pl; \
	done

	# install regcomp and configimport utililities
	install -m755 \
	$(SOURCE_TREE)/solver/$(BUILDNUM)/$(ARCHBUILDDIR)/bin/regcomp \
	$(SOURCE_TREE)/solver/$(BUILDNUM)/$(ARCHBUILDDIR)/bin/configimport.bin \
		$(MAINPKGDIR)-bin/$(OPENOFFICEDIR)/program

	# install openoffice-xlate-lang
	install -m755 debian/local/openoffice-xlate-lang \
		$(MAINPKGDIR)/usr/share/openoffice$(VER)/bin

	# install info file for update-openoffice-dicts
	install -m644 debian/dictlistinfo \
		$(MAINPKGDIR)/usr/share/myspell/infos/ooo/openoffice.org$(VER)

	touch $@

# Install files generated by setup into package directories
langpacks: $(STAMP_DIR)/langpacks
$(STAMP_DIR)/langpacks: $(STAMP_DIR)/setupins debian/local/openoffice-xlate-lang

	for ext in `debian/local/openoffice-xlate-lang -i $(LANGPACKLANGS) |tr A-Z a-z` ; do \
	  rm -rf $(MAINPKGDIR)-l10n-$$ext;\
	  rm -rf $(MAINPKGDIR)-l10n-$$ext.*.debhelper;\
	done

	# Install the lang packs
	for prefix in `debian/local/openoffice-xlate-lang -p $(LANGPACKLANGS) `; do  \
          echo "Unpack "`debian/local/openoffice-xlate-lang -l $$prefix`" l10n..."; \
          langiso=`debian/local/openoffice-xlate-lang -i $$prefix|tr A-Z a-z`;      \
	  debian/local/openoffice-dpack-lang                                        \
                -d="debian/openoffice.org$(VER)-l10n-$$langiso$(OPENOFFICEDIR)"                     \
                -i=$(SOURCE_TREE)/instsetoo/$(ARCHBUILDDIR)/$$prefix/normal/setup.ins \
                -s=$(SOURCE_TREE)/solver/$(BUILDNUM)/$(ARCHBUILDDIR) || exit 1 \
	        ;                                                           \
	  rm -rf $(MAINPKGDIR)-l10n-$$langiso$(OPENOFFICEDIR)/help/main_transform.xsl;\
	  if [ -f $(MAINPKGDIR)-l10n-$$langiso$(OPENOFFICEDIR)/program/resource/ooo$(BUILDNUM)$$prefix.res ]; then \
	    ln -s ooo$(BUILDNUM)$$prefix.res \
	        $(MAINPKGDIR)-l10n-$$langiso$(OPENOFFICEDIR)/program/resource/iso$(BUILDNUM)$$prefix.res ;\
	  fi ;\
	done

	# remove files in -l10n-en that are needed for all languages and are
	# therefore installed in openoffice.org
	rm -rf debian/openoffice.org$(VER)-l10n-en$(OPENOFFICEDIR)/user

	touch $@


# This single target is used to build all the packages, all at once, or
# one at a time. So keep in mind: any options passed to commands here will
# affect _all_ packages. Anything you want to only affect one package
# should be put in another target, such as the install target.
binary-common:
	dh_testdir
	dh_testroot

	for pkg in `dh_listpackages` ; do \
	  rm -f debian/$$pkg.*.debhelper;\
	  rm -rf debian/$$pkg/DEBIAN;\
	done

	dh_installdocs
	dh_installman
	dh_installchangelogs
	if [ -e $(MAINPKGDIR)/usr/share/doc/openoffice.org$(VER) ]; then \
	 install -m644 ooo-build/ChangeLog \
	   $(MAINPKGDIR)/usr/share/doc/openoffice.org/changelog.Ximian+Debian \
	 && gzip -f9 \
	   $(MAINPKGDIR)/usr/share/doc/openoffice.org/changelog.Ximian+Debian; \
	fi
ifeq ($(PO2DEBCONF),yes)
	po2debconf -e utf8 $(MAINPKGDIR)-bin.templates.master \
		> $(MAINPKGDIR)-bin.templates
endif
	dh_installdebconf
	dh_installmime
	dh_installmenu
	debian/scripts/installoverrides
	dh_link
	dh_strip
	dh_compress
	dh_fixperms
	dh_installdeb
	dh_shlibdeps -l $(MAINPKGDIR)-bin/$(OPENOFFICEDIR)/program \
		$(SHLIBS_OVERRIDE)
	dh_gencontrol  -- -V'debconf-depends=debconf (>= $(MINDEBCONFVER))'
	dh_md5sums
	dh_builddeb

# Build architecture independant packages using the common target.
binary-indep: $(STAMP_DIR)/binary-indep
$(STAMP_DIR)/binary-indep: $(STAMP_DIR)/install $(STAMP_DIR)/langpacks debian/control $(STAMP_DIR)/maintscripts
	$(MAKE) -f debian/rules DH_OPTIONS=-i binary-common

	touch $@

# Build architecture dependant packages using the common target.
binary-arch: $(STAMP_DIR)/binary-arch
$(STAMP_DIR)/binary-arch: $(STAMP_DIR)/install debian/control $(STAMP_DIR)/maintscripts
	$(MAKE) -f debian/rules DH_OPTIONS=-a binary-common
	touch $@

# Any other binary targets build just one binary package at a time.
binary-%: $(STAMP_DIR)/install $(STAMP_DIR)/langpacks $(STAMP_DIR)/maintscripts
	$(MAKE) -f debian/rules binary-common DH_OPTIONS=-p$*

binary: binary-arch binary-indep

# Use 'debian/rules environment' to help debug architecture-related problems
# with the rules file.
environment:

	@echo 'Package build environment (not all variables may be set):'
	@echo '$$(ARCH)' is "$(ARCH)"
	@echo '$$(DEB_HOST_ARCH)' is "$(DEB_HOST_ARCH)"
	@echo '$$(CURDIR)' is "$(CURDIR)"
	@echo '$$(SOURCE_VERSION)' is "$(SOURCE_VERSION)"
	@echo '$$(JDK_HOME)' is "$(JDK_HOME)"
	@echo '$$(_CC)' is "$(_CC)"
	@echo '$$(CXX)' is "$(CXX)"
	@echo '$$(BUILDCMD)' is "$(BUILDCMD)"
	@echo '$$(BUILDFLAGS)' is "$(BUILDFLAGS)"
	@echo '$$(DMAKEFLAGS)' is "$(DMAKEFLAGS)"
	@echo '$$(SHLIBS_OVERRIDE)' is "$(SHLIBS_OVERRIDE)"

	@echo 'See debian/control for build dependencies.'

# -------------------------------------------------------
# Miscellaneous targets used to do a few useful operations

# Get the ximian packaging directory from gnome anoncvs
get-ooo-build:
	# press enter at the password prompt
	cvs -d:pserver:anonymous@anoncvs.gnome.org:/cvs/gnome login
	cvs -z3 -d:pserver:anonymous@anoncvs.gnome.org:/cvs/gnome co -d $(TOOLS_DIR) openoffice

# Get latest patch files from Chris' repository
PATCHNAME=000_prerc3_stolen_from_ooo11rc3
PATCHDIR=openoffice/1.1rc3
PATCHURL=http://people.debian.org/~halls/$(PATCHDIR)

downloadpatch:
	# we don't want to change the patches if already applied (hint: debian/scripts/patch.unapply)
	test ! -f $(STAMP_DIR)/patches/$(PATCHNAME).diff 
	test ! -f $(STAMP_DIR)/patches/$(PATCHNAME)-binaries.diff.uu 

	wget -O - $(PATCHURL)/$(PATCHNAME).diff.bz2 | bunzip2 -c > debian/patches/$(PATCHNAME).diff
	wget -O - $(PATCHURL)/$(PATCHNAME)-binaries.diff.uu.bz2 | bunzip2 -c \
	  > debian/patches/$(PATCHNAME)-binaries.diff.uu

# If you are a Debian developer, you can save some bandwidth by using rsync instead of wget:
rsyncpatch:
	# we don't want to change the patches if already applied (hint: debian/scripts/patch.unapply)
	test ! -f $(STAMP_DIR)/patches/$(PATCHNAME).diff 
	test ! -f $(STAMP_DIR)/patches/$(PATCHNAME)-binaries.diff.uu 

	rsync -vL -e ssh \
	   gluck.debian.org:/home/halls/public_html/$(PATCHDIR)/$(PATCHNAME).diff \
	   debian/patches
	wget -O - $(PATCHURL)/$(PATCHNAME)-binaries.diff.uu.bz2 | bunzip2 -c \
	  > debian/patches/$(PATCHNAME)-binaries.diff.uu

# Take a tarfile of all the non-stripped binaries in solver, for generating backtraces
# from coredumps.
makebinariestar:
	cd $(SOURCE_TREE)/solver/$(BUILDNUM)/$(ARCHBUILDDIR) && \
	  find bin lib | xargs file | sed -n '/LSB \(executable\|shared object\),.* not stripped/ s/:.*$$//p' | \
	  tar -T - -jcvf $(CURDIR)/../openoffice-binaries.$(SOURCE_VERSION).tar.bz2

# -------------------------------------------------------

.PHONY: environment checksource control downloadpatch rsyncpatch makebinariestar
.PHONY: clean-debdir clean-instsetoo clean-objectdirs clean default
.PHONY: build build-indep build-arch
.PHONY: $(stampdir_targets)

# vim:set noet ai sts=8 sw=8 tw=0:
