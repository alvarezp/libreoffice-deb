This package was taken from the XFree86 build system.

doogie-build-system:
  A chunk of makefile implementing Doogie's Build System (this is a pretty
  old, prototypical version, but it works well enough for me).  You
  shouldn't need to use this makefile directly; you can call the rules you
  need from debian/rules.  The purpose of Doogie's Build System is to avoid
  a difficult-to-manage Debian .diff.gz file by keeping our patches to the
  upstream sources separate and applying them at package build time.  Here
  are a couple of targets that I have found useful:
	debian/rules source.unpack	Simply unpacks the source
					archive(s); does not apply any
					Debian patches.
	debian/rules source.make	Unpacks the source archive(s) and
					applies Debian patches.
	debian/rules checksource	Unpacks the source archive(s),
					applies Debian patches, and ensures
					that the patches applied cleanly.

scripts:
  Directory containing the internals of Doogie's Build System.  If any
  architecture-specific make variables need to be declared, you may do so
  debian/scripts/vars.$(ARCH).

patches:
  Directory containing patches applied in ASCIIbetical order.
  numeric prefix indicates disposition of patch
  000     patches FROM upstream

  001-899 patches that should be sent upstream

	001-099		general-purpose patches
	100-149		sparc/sparc64 architecture patches
	150-199		powerpc architecture patches
	200-249		alpha architecture patches
	250-299		m68k architecture patches
	300-349		arm architecture patches
	350-399		mips/mipsel architecture patches
	400-449		hppa architecture patches
	450-499		ia64 architecture patches
	500-549		s390 architecture patches
	800-849		GNU Hurd kernel patches

   900-999 patches that should not be sent upstream

	900-998		Debian-specific behavior and enhancements
	999		experimental or debugging patches (should not
			generally be present in a production release)

local:
  This contains Debian-specific programs and documentation that we include
  in our binary packages

MANIFEST.$(ARCH):
  This file is here to keep track of what the install rules actually
  install.  If this changes, we need to know about it; there may be new
  files we want to ship, or there may be a build-dependency problem such
  that files that should be there are not.  This version is compared
  against one that is generated after the install rule is run.

  *VERY IMPORTANT*: It doesn't do any good to replace the MANIFEST file
  without making appropriate changes to the debhelper files.  If you find
  that a new MANIFEST file for your architecture needs to be generated,
  contact the package maintainer.  Obviously there are
  several ways to just shut the manifest check up and proceed with the
  build process, but if it has changed, it is important to know why.

  Once you have updated the appropriate debhelper files specific to your
  architecture (see next section), overwrite the old MANIFEST file with the
  new one.  Then start the build again.  Be sure to get the new canonical
  version of MANIFEST.$(ARCH) to the package maintainer.  (This
  applies only if you are doing official porting work for the Debian
  Project.)

$(package).*.$(ARCH):
  These exist in cases where the contents of one of the debhelper files is
  architecture-specific.  As the MANIFEST illustrates, different things get
  installed for different architectures.  This feature requires debhelper
  2.1.8 or later and is so noted in the Build-Depends.

  If a debehlper file with the .$(ARCH) extension is not present, debhelper
  will fall back to the version of the file without any .$(ARCH) extension.
