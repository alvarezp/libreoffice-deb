Openoffice build system
-----------------------

This package was adapted from the XFree86 build system.  It uses an adapted dbs.

Building the packages from source
=================================
Overview:
  apt-get source openoffice.org
  [install a jdk if needed]
  [install moz zips if building for powerpc]
  apt-get build-dep openoffice.org (to install build dependencies)
  cd openoffice.org-1.0.1
  debuild

Changing the build behaviour with DEB_BUILD_OPTIONS
---------------------------------------------------
These options are supported:

  debug     - enable debug build.  See the buildprj target for instructions
              about building individual modules with debug.

  nostrip   - do not strip debugging symbols from the binaries before building
              the .deb.

  ccache    - enable the use of ccache during the build.  This is highly
	      recommended if you plan on building the package more than once,
	      or doing any development on the packages.  A typical speedup is
	      from 11 hours to 3 hours on the second build (PIII 800Mhz).  Be
	      aware that you need EXTRAPACKAGES="ccache" in /etc/pbuilderrc
	      when trying to build openoffice.org with ccache in
	      $DEB_BUILD_OPTIONS under pbuilder (this has no effect on speed,
	      though because the cache does not persist in pbuilder)

  -Pn       - run n processes in parallel in dmake -equivalent to MAKEFLAGS=-jn.  Not yet fully tested.
  -PPn      - enable n projects to be built in parallel.  Not yet fully tested.

  startfrom=<prj>
            - Resume build from the specified project.  Useful if a build is 
	      interrupted.

  build=    - pass arbitary command line parameters to build.pl.

  deloutput - delete the contents of each project once it has been built and
	      delivered.  This reduces the amount of disk space needed to build
	      the packages, but slows down rebuilds.  You can get a good
	      compromise by using 'ccache' and 'delobj' together - this will
	      cache the object files using ccache (needs about 200mb in total)
	      but remove all other files.

  jdkhome=/absolute/path/to/jdk - use the JDK installed in this path.  

Installing a JDK
----------------
OpenOffice.org still needs a non-free JDK.  You can find a suitable JDK here:

-i386 and powerpc-
 deb http://ftp.gwdg.de/pub/languages/java/linux/debian unstable main non-free

-s390-
 https://www6.software.ibm.com/dl/lxdk/lxdk-p (unpack tarball under /usr/local)

If you a building on a machine without a JDK and have no root access to install
one, you can install the JDK to your home directory and specify the path using
DEB_BUILD_OPTIONS=jdkhome=/absolute/path/to/jdk

Hint: use dpkg-buildpackage -d to skip the build dependencies check.

We are working on adding support for other JDKs to OOo.  See this issue for progress:
    http://www.openoffice.org/issues/show_bug.cgi?id=10477

Installing moz zips for powerpc and s390
----------------------------------------
If you are building for powerpc, you need to manually get some precompiled
files for mozilla.  Jan has compiled these with gcc 3.2.1 and you can find them here:

 http://sevdalia.hajvan.net/~palic/debian/OpenOffice.org/mozlibs/

 mkdir mozlibs; cd mozlibs
 wget -l2 -L -np --accept "*.zip" -nd -nH -m http://sevdalia.hajvan.net/~palic/debian/OpenOffice.org/mozlibs/

If you are building for s390, you need to manually get some precompiled
files for mozilla.  Gerhard has compiled these with gcc 3.2.2 and you can find
them here:

 http://people.debian.org/~gt/mozlibs/

 mkdir mozlibs; cd mozlibs
 wget -l2 -L -np --accept "*.zip" -nd -nH -m http://people.debian.org/~gt/mozlibs/

The targets that are built during the package build
---------------------------------------------------

- targets run during the package build -

source.unpack - (dbs) Unpack OpenOffice sources from upstream/archives into build-tree

source.make   - (dbs) Apply patches from debian/patches directory.
  	        (why is there source.patch and patchapply?? TODO: fix this)

build.prepare - Applies any workarounds/modifications needed to the build tree
		once the source is unpacked.  Currently: create a fake
		libstlport tree, fix some file permissions.

configure     - Run configure in config_office.  This creates the settings file
                in the build root, which is sourced by the other targets in tcsh.

bootstrap     - Bootstrap the solver environment, by building these projects:
                dmake, external, xml2cmp, sal, vos, soltools.

solver        - The main build processo to create the solver tree.  All
		projects are built except for the installation sets.

instsetoo     - Build a complete installation set for the language BUILDLANG.
		This is the install set that is distributed by upstream in
		tar.gz format.

setupins      - For all other languages, build just the 'setup.ins', which is used to
		generate language packs by our scripts.

setup    - Run OOo network install from the instsetoo directory,
           installing to debian/tmp

install  - Copy files from tmp into the correct locations for the
           final package layout in debian/openoffice.org and
           debian/openoffice.org-bin, and make adjustments to file paths,
           desktop files etc.

langpack - Extract language-specific files from the 'solver'
	   directories and link/unzip into the langpack directories
	   debian/openoffice.org-l10n-XX

binary-arch  - Build openoffice.org-bin package

binary-indep - Build non-archspecific packages: openoffice.org and the
               language packs

You can also generate a single package with the command:

   fakeroot debian/rules binary-<packagename>

e.g. fakeroot debian/rules binary-openoffice.org-l10n-en

build-project -

- clean targets -

In addition to the normal 'clean', there are some partial clean operations for
saving space without having to completely rebuild the packages:

clean-debdir       - Clean up the package directories (about 830M).  Rebuilds
                     start at 'setup'.

clean-instsetoo    - Clean up the installation sets and package directories
                     (about 2.5 Gb!).  Rebuilds start at 'insetsetoo'.

clean-objectdirs   - Clean compilation results, but leave solver (cleans about
		     600Mb in addition to instsetoo).  Rebuilds start at
		     'dmake, but you can still develop and build individual
                     projects.  This is the equivalent of downloading a
                     preinstalled solver tree.

- other targets -

builduntil-<prjname> Build a particular project, including all its
		     prerequesites. For example, to build localize and the
		     tools needed for translation in the transex3 project,
		     execute:
		       debian/rules builduntil-transex3

buildprj	   - Build only one a particular project.  Set PRJ to the name of
		     the project:
		       debian/rules buildprj PRJ=tools

downloadpatch      - During the runup to a release, Chris is generating patches
                     that patch the current source to the next release from CVS.  
		     This target downloads the files and unpacks them to the
		     patches directory.  You can run this target as often as
		     you like.  If you have a Debian developer account, use the
		     'rsyncpatch' target instead, which uses rsync over ssh to
		     save bandwidth.

Build system file layout
========================
  Note: for OpenOffice builds, we have modified the build system to support
  binary patches that have been uuencoded (extension .uu).

  A chunk of makefile implementing Doogie's Build System (this is a pretty
  old, prototypical version, but it works well enough for me).  You
  shouldn't need to use this makefile directly; you can call the rules you
  need from debian/rules.  The purpose of Doogie's Build System is to avoid
  a difficult-to-manage Debian .diff.gz file by keeping our patches to the
  upstream sources separate and applying them at package build time.  Here
  are a couple of targets that I have found useful:
	debian/rules source.unpack	Simply unpacks the source
					archive(s); does not apply any
					Debian patches.
	debian/rules source.make	Unpacks the source archive(s) and
					applies Debian patches.
	debian/rules checksource	Unpacks the source archive(s),
					applies Debian patches, and ensures
					that the patches applied cleanly.

scripts:
  Directory containing the internals of Doogie's Build System.  If any
  architecture-specific make variables need to be declared, you may do so
  debian/scripts/vars.$(ARCH).

patches:
  Directory containing patches applied in ASCIIbetical order.
  numeric prefix indicates disposition of patch
  000     patches FROM upstream

  001-899 patches that should be sent upstream

	001-099		general-purpose patches
	100-149		sparc/sparc64 architecture patches
	150-199		powerpc architecture patches
	200-249		alpha architecture patches
	250-299		m68k architecture patches
	300-349		arm architecture patches
	350-399		mips/mipsel architecture patches
	400-449		hppa architecture patches
	450-499		ia64 architecture patches
	500-549		s390 architecture patches
	800-849		GNU Hurd kernel patches

   900-999 patches that should not be sent upstream

	900-998		Debian-specific behavior and enhancements
	999		experimental or debugging patches (should not
			generally be present in a production release)

local:
  This contains Debian-specific programs and documentation that we include
  in our binary packages

MANIFEST.$(ARCH):
  This file is here to keep track of what the install rules actually
  install.  If this changes, we need to know about it; there may be new
  files we want to ship, or there may be a build-dependency problem such
  that files that should be there are not.  This version is compared
  against one that is generated after the install rule is run.

  *VERY IMPORTANT*: It doesn't do any good to replace the MANIFEST file
  without making appropriate changes to the debhelper files.  If you find
  that a new MANIFEST file for your architecture needs to be generated,
  contact the package maintainer.  Obviously there are
  several ways to just shut the manifest check up and proceed with the
  build process, but if it has changed, it is important to know why.

  Once you have updated the appropriate debhelper files specific to your
  architecture (see next section), overwrite the old MANIFEST file with the
  new one.  Then start the build again.  Be sure to get the new canonical
  version of MANIFEST.$(ARCH) to the package maintainer.  (This
  applies only if you are doing official porting work for the Debian
  Project.)

$(package).*.$(ARCH):
  These exist in cases where the contents of one of the debhelper files is
  architecture-specific.  As the MANIFEST illustrates, different things get
  installed for different architectures.  This feature requires debhelper
  2.1.8 or later and is so noted in the Build-Depends.

  If a debehlper file with the .$(ARCH) extension is not present, debhelper
  will fall back to the version of the file without any .$(ARCH) extension.
