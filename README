OpenOffice build system
-----------------------

** WARNING: This file is out of date and is not updated yet for 2.0

Building the packages from source
=================================
Overview:
  apt-get source openoffice.org
  [install moz zips if building for powerpc, s390 or sparc]
  apt-get build-dep openoffice.org (to install build dependencies)
  cd <source directory>
  debuild

Changing the build behaviour with DEB_BUILD_OPTIONS
---------------------------------------------------
These options are supported:

  debug     - enable debug build.  See the buildprj target for instructions
              about building individual modules with debug.

  nostrip   - do not strip debugging symbols from the binaries before building
              the .deb.

  ccache    - enable the use of ccache during the build.  This is highly
	      recommended if you plan on building the package more than once,
	      or doing any development on the packages.  A typical speedup is
	      from 11 hours to 3 hours on the second build (PIII 800Mhz).  Be
	      aware that you need EXTRAPACKAGES="ccache" in /etc/pbuilderrc
	      when trying to build openoffice.org with ccache in
	      $DEB_BUILD_OPTIONS under pbuilder (this has no effect on speed,
	      though because the cache does not persist in pbuilder)

  -Pn       - run n processes in parallel in dmake -equivalent to
              MAKEFLAGS=-jn.  
              There are still some projects which fail, see IssueZilla #9443

  -PPn      - enable n projects to be built in parallel (-P flag to build.pl).
              The log output can get a little confusing, and some projects
	      may fail still
	      
  from=<prj>
            - Resume build from the specified project.  Useful if a build is 
	      interrupted.

  build=    - pass arbitary command line parameters to build.pl.

  deloutput - delete the contents of each project once it has been built and
	      delivered.  This reduces the amount of disk space needed to build
	      the packages, but slows down rebuilds.  You can get a good
	      compromise by using 'ccache' and 'deloutput' together - this will
	      cache the object files using ccache (needs about 200mb in total)
	      but remove all other files.

  jdkhome=/absolute/path/to/jdk - use the JDK installed in this path.  

  lang=<code>
  	    - Build only the specified language number

JDK Support
-----------

The official Debian packages of OpenOffice.org are built without a JDK.  This
disables support for some features which require a JDK at runtime.  In order
to enable these features, a JDK must be present at build time.  To build the
packages from source using a JDK, add jdkhome=/absolute/path/to/jdk to
DEB_BUILD_OPTIONS.  You will also need libcrimson-java, libxalan-java, and
libxalan2-java, in addition to the standard build dependencies.

We are working on adding support for other JDKs to OOo.  See this issue for
progress:
    http://www.openoffice.org/issues/show_bug.cgi?id=10477

The targets that are built during the package build
---------------------------------------------------

- targets run during the package build -

build.prepare - Applies any workarounds/modifications needed to the build tree
		once the source is unpacked.  Currently: create a fake
		libstlport tree, fix some file permissions.

configure     - Run configure in config_office.  This creates the settings file
                in the build root, which is sourced by the other targets in
                tcsh.

bootstrap     - Bootstrap the solver environment, by building these projects:
                dmake, external, xml2cmp, sal, vos, soltools.

solver        - The main build processo to create the solver tree.  All
		projects are built except for the installation sets.

instsetoo     - Build a complete installation set for the language BUILDLANG.
		This is the install set that is distributed by upstream in
		tar.gz format.

setupins      - For all other languages, build just the 'setup.ins', which is
                used to generate language packs by our scripts.

setup    - Run OOo network install from the instsetoo directory,
           installing to debian/tmp

install  - Copy files from tmp into the correct locations for the
           final package layout in debian/openoffice.org and
           debian/openoffice.org-bin, and make adjustments to file paths,
           desktop files etc.

langpack - Extract language-specific files from the 'solver'
	   directories and link/unzip into the langpack directories
	   debian/openoffice.org-l10n-XX

binary-arch  - Build openoffice.org-bin package

binary-indep - Build non-archspecific packages: openoffice.org and the
               language packs

You can also generate a single package with the command:

   fakeroot debian/rules binary-<packagename>

e.g. fakeroot debian/rules binary-openoffice.org-l10n-en

build-project -

- clean targets -

In addition to the normal 'clean', there are some partial clean operations for
saving space without having to completely rebuild the packages:

clean-debdir       - Clean up the package directories (about 830M).  Rebuilds
                     start at 'setup'.

clean-instsetoo    - Clean up the installation sets and package directories
                     (about 2.5 Gb!).  Rebuilds start at 'insetsetoo'.

clean-objectdirs   - Clean compilation results, but leave solver (cleans about
		     600Mb in addition to instsetoo).  Rebuilds start at
		     'dmake, but you can still develop and build individual
                     projects.  This is the equivalent of downloading a
                     preinstalled solver tree.

- other targets -

builduntil-<prjname> Build a particular project, including all its
		     prerequesites. For example, to build localize and the
		     tools needed for translation in the transex3 project,
		     execute:
		       debian/rules builduntil-transex3

buildprj	   - Build only one a particular project.  Set PRJ to the name
		     of the project:
		       debian/rules buildprj PRJ=tools

Build system file layout
========================
scripts:
  Directory containing various build-related scripts.
