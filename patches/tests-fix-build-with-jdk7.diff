--- a/comphelper/qa/complex/comphelper/Map.java	2012-03-27 18:22:01.000000000 +0200
+++ b/comphelper/qa/complex/comphelper/Map.java	2012-04-12 16:08:17.731593201 +0200
@@ -151,13 +151,13 @@
         assertTrue( _context + ": 'clear' does not empty the map", map.hasElements() );
 
         // try the constructor which creates an immutable version
-        Pair< ?, ? >[] initialMappings = new Pair< ?, ? >[ _keys.length ];
+        Pair[] initialMappings = new Pair[ _keys.length ];
         for ( int i=0; i<_keys.length; ++i )
         {
-            initialMappings[i] = new Pair< Object, Object >( _keys[i], _values[i] );
+            initialMappings[i] = new Pair( _keys[i], _values[i] );
         }
         map = com.sun.star.container.EnumerableMap.createImmutable(
-            connection.getComponentContext(), keyType, valueType, (Pair< Object, Object >[])initialMappings );
+            connection.getComponentContext(), keyType, valueType, (Pair[])initialMappings );
         impl_ceckContent( map, _keys, _values, _context );
 
         // check the thing is actually immutable
@@ -405,8 +405,8 @@
     {
         public boolean areEqual( Object _lhs, Object _rhs )
         {
-            Pair< ?, ? > lhs = (Pair< ?, ? >)_lhs;
-            Pair< ?, ? > rhs = (Pair< ?, ? >)_rhs;
+            Pair lhs = (Pair)_lhs;
+            Pair rhs = (Pair)_rhs;
             return lhs.First.equals( rhs.First ) && lhs.Second.equals( rhs.Second );
         }
     };
@@ -464,10 +464,10 @@
         XEnumerableMap map = com.sun.star.container.EnumerableMap.create( connection.getComponentContext(), new Type( String.class ), new Type( String.class ) );
         impl_putAll( map, keys, values );
 
-        final Pair< ?, ? >[] paired = new Pair< ?, ? >[ keys.length ];
+        final Pair[] paired = new Pair[ keys.length ];
         for ( int i=0; i<keys.length; ++i )
         {
-            paired[i] = new Pair< Object, Object >( keys[i], values[i] );
+            paired[i] = new Pair( keys[i], values[i] );
         }
 
         // create non-isolated enumerators, and check their content
diff -urN /home/rene/tmp/libreoffice-core-3.5.2.2/./dbaccess/qa/complex/dbaccess/CopyTableWizard.java ./dbaccess/qa/complex/dbaccess/CopyTableWizard.java
--- a/dbaccess/qa/complex/dbaccess/CopyTableWizard.java	2012-03-27 18:22:01.000000000 +0200
+++ b/dbaccess/qa/complex/dbaccess/CopyTableWizard.java	2012-04-13 09:25:36.463692346 +0200
@@ -168,7 +168,7 @@
         final XCopyTableWizard copyWizard = com.sun.star.sdb.application.CopyTableWizard.createWithInteractionHandler(
             context, sourceDescriptor, destDescriptor, interAction);
         copyWizard.setOperation((short) 0); // com.sun.star.sdb.application.CopyDefinitionAndData
-        Optional<String> auto = new Optional<String>();
+        Optional auto = new Optional();
 
         auto.IsPresent = destConnection.getMetaData().supportsCoreSQLGrammar();
         if (auto.IsPresent)
--- a/sfx2/qa/complex/sfx2/DocumentMetadataAccess.java-old	2012-04-13 21:33:08.996403191 +0200
+++ b/sfx2/qa/complex/sfx2/DocumentMetadataAccess.java	2012-04-13 22:24:53.024257197 +0200
@@ -688,14 +688,14 @@
             System.out.println("Checking RDFa in loaded test document...");
 
             XMetadatable xPara;
-            Pair<Statement[], Boolean> result;
+            Pair result;
 
             Statement x_FooBarLit1 = new Statement(foo, bar, mkLit("1"), null);
             xPara = UnoRuntime.queryInterface(XMetadatable.class, xEnum.nextElement());
             result = xDocRepository.getStatementRDFa(xPara);
             assertTrue("RDFa: 1",
-                !result.Second &&
-                eq(result.First, new Statement[] {
+                !((Boolean)result.Second) &&
+                eq((Statement[])result.First, new Statement[] {
                         x_FooBarLit1
                     }));
 
@@ -703,8 +703,8 @@
             xPara = UnoRuntime.queryInterface(XMetadatable.class, xEnum.nextElement());
             result = xDocRepository.getStatementRDFa(xPara);
             assertTrue("RDFa: 2",
-                !result.Second &&
-                eq(result.First, new Statement[] {
+                !((Boolean)result.Second) &&
+                eq((Statement[])result.First, new Statement[] {
                         x_FooBarLit2
                     }));
 
@@ -713,8 +713,8 @@
             xPara = UnoRuntime.queryInterface(XMetadatable.class, xEnum.nextElement());
             result = xDocRepository.getStatementRDFa(xPara);
             assertTrue("RDFa: 3",
-                !result.Second &&
-                eq(result.First, new Statement[] {
+                !((Boolean)result.Second) &&
+                eq((Statement[])result.First, new Statement[] {
                         x_BlankBarLit3
                     }));
             XBlankNode b3 = UnoRuntime.queryInterface(XBlankNode.class, result.First[0].Subject);
@@ -724,8 +724,8 @@
             xPara = UnoRuntime.queryInterface(XMetadatable.class, xEnum.nextElement());
             result = xDocRepository.getStatementRDFa(xPara);
             assertTrue("RDFa: 4",
-                !result.Second &&
-                eq(result.First, new Statement[] {
+                !((Boolean)result.Second) &&
+                eq((Statement[])result.First, new Statement[] {
                         x_BlankBarLit4
                     }));
             XBlankNode b4 = UnoRuntime.queryInterface(XBlankNode.class, result.First[0].Subject);
@@ -735,8 +735,8 @@
             xPara = UnoRuntime.queryInterface(XMetadatable.class, xEnum.nextElement());
             result = xDocRepository.getStatementRDFa(xPara);
             assertTrue("RDFa: 5",
-                !result.Second &&
-                eq(result.First, new Statement[] {
+                !((Boolean)result.Second) &&
+                eq((Statement[])result.First, new Statement[] {
                         x_BlankBarLit5
                     }));
             XBlankNode b5 = UnoRuntime.queryInterface(XBlankNode.class, result.First[0].Subject);
@@ -751,8 +751,8 @@
             xPara = UnoRuntime.queryInterface(XMetadatable.class, xEnum.nextElement());
             result = xDocRepository.getStatementRDFa(xPara);
             assertTrue("RDFa: 6",
-                !result.Second &&
-                eq(result.First, new Statement[] {
+                !((Boolean)result.Second) &&
+                eq((Statement[])result.First, new Statement[] {
                         x_FooBarLit6, x_FooBazLit6
                     }));
 
@@ -762,8 +762,8 @@
             xPara = UnoRuntime.queryInterface(XMetadatable.class, xEnum.nextElement());
             result = xDocRepository.getStatementRDFa(xPara);
             assertTrue("RDFa: 7",
-                !result.Second &&
-                eq(result.First, new Statement[] {
+                !((Boolean)result.Second) &&
+                eq((Statement[])result.First, new Statement[] {
                         x_FooBarLit7, x_FooBazLit7, x_FooFooLit7
                     }));
 
@@ -775,24 +775,24 @@
             xPara = UnoRuntime.queryInterface(XMetadatable.class, xEnum.nextElement());
             result = xDocRepository.getStatementRDFa(xPara);
             assertTrue("RDFa: 8",
-                result.Second &&
-                eq(result.First, new Statement[] {
+                ((Boolean)result.Second) &&
+                eq((Statement[])result.First, new Statement[] {
                         x_FooBarLit
                     }));
 
             xPara = UnoRuntime.queryInterface(XMetadatable.class, xEnum.nextElement());
             result = xDocRepository.getStatementRDFa(xPara);
             assertTrue("RDFa: 9",
-                result.Second &&
-                eq(result.First, new Statement[] {
+                ((Boolean)result.Second) &&
+                eq((Statement[])result.First, new Statement[] {
                         x_FooBarLit
                     }));
 
             xPara = UnoRuntime.queryInterface(XMetadatable.class, xEnum.nextElement());
             result = xDocRepository.getStatementRDFa(xPara);
             assertTrue("RDFa: 10",
-                result.Second &&
-                eq(result.First, new Statement[] {
+                ((Boolean)result.Second) &&
+                eq((Statement[])result.First, new Statement[] {
                         x_FooBarLittype
                     }));
 
@@ -801,8 +801,8 @@
             xPara = UnoRuntime.queryInterface(XMetadatable.class, xEnum.nextElement());
             result = xDocRepository.getStatementRDFa(xPara);
             assertTrue("RDFa: 11",
-                !result.Second &&
-                eq(result.First, new Statement[] {
+                !((Boolean)result.Second) &&
+                eq((Statement[])result.First, new Statement[] {
                         x_FooBarLit11
                     }));
 
@@ -812,16 +812,16 @@
               xPara = UnoRuntime.queryInterface(XMetadatable.class, xEnum.nextElement());
             result = xDocRepository.getStatementRDFa(xPara);
             assertTrue("RDFa: 12",
-                !result.Second &&
-                eq(result.First, new Statement[] {
+                !((Boolean)result.Second) &&
+                eq((Statement[])result.First, new Statement[] {
                         x_FileBarLit12
                     }));
 
             xPara = UnoRuntime.queryInterface(XMetadatable.class, xEnum.nextElement());
             result = xDocRepository.getStatementRDFa(xPara);
             assertTrue("RDFa: 13",
-                result.Second &&
-                eq(result.First, new Statement[] {
+                ((Boolean)result.Second) &&
+                eq((Statement[])result.First, new Statement[] {
                         x_FooBarLit
                     }));
 
@@ -830,40 +830,40 @@
             xPara = UnoRuntime.queryInterface(XMetadatable.class, xEnum.nextElement());
             result = xDocRepository.getStatementRDFa(xPara);
             assertTrue("RDFa: 14",
-                result.Second &&
-                eq(result.First, new Statement[] {
+                ((Boolean)result.Second) &&
+                eq((Statement[])result.First, new Statement[] {
                         /* x_FooLabelLit14 */ x_FooBarLit
                     }));
 
             xPara = UnoRuntime.queryInterface(XMetadatable.class, xEnum.nextElement());
             result = xDocRepository.getStatementRDFa(xPara);
-            assertTrue("RDFa: 15", eq(result.First, new Statement[] { } ));
+            assertTrue("RDFa: 15", eq((Statement[])result.First, new Statement[] { } ));
 
             xPara = UnoRuntime.queryInterface(XMetadatable.class, xEnum.nextElement());
             result = xDocRepository.getStatementRDFa(xPara);
-            assertTrue("RDFa: 16", eq(result.First, new Statement[] { } ));
+            assertTrue("RDFa: 16", eq((Statement[])result.First, new Statement[] { } ));
 
             xPara = UnoRuntime.queryInterface(XMetadatable.class, xEnum.nextElement());
             result = xDocRepository.getStatementRDFa(xPara);
-            assertTrue("RDFa: 17", eq(result.First, new Statement[] { } ));
+            assertTrue("RDFa: 17", eq((Statement[])result.First, new Statement[] { } ));
 
             xPara = UnoRuntime.queryInterface(XMetadatable.class, xEnum.nextElement());
             result = xDocRepository.getStatementRDFa(xPara);
-            assertTrue("RDFa: 18", eq(result.First, new Statement[] { } ));
+            assertTrue("RDFa: 18", eq((Statement[])result.First, new Statement[] { } ));
 
             xPara = UnoRuntime.queryInterface(XMetadatable.class, xEnum.nextElement());
             result = xDocRepository.getStatementRDFa(xPara);
-            assertTrue("RDFa: 19", eq(result.First, new Statement[] { } ));
+            assertTrue("RDFa: 19", eq((Statement[])result.First, new Statement[] { } ));
 
             xPara = UnoRuntime.queryInterface(
                 XMetadatable.class, xEnum.nextElement());
             result = xDocRepository.getStatementRDFa(xPara);
-            assertTrue("RDFa: 20", eq(result.First, new Statement[] { } ));
+            assertTrue("RDFa: 20", eq((Statement[])result.First, new Statement[] { } ));
 
             xPara = UnoRuntime.queryInterface(
                 XMetadatable.class, xEnum.nextElement());
             result = xDocRepository.getStatementRDFa(xPara);
-            assertTrue("RDFa: 21", eq(result.First, new Statement[] { } ));
+            assertTrue("RDFa: 21", eq((Statement[])result.First, new Statement[] { } ));
 
             System.out.println("...done");
 
--- a/sw/qa/complex/writer/LoadSaveTest.java-old  2012-04-13 23:35:16.920186119 +0200
+++ b/sw/qa/complex/writer/LoadSaveTest.java      2012-04-13 23:44:45.112254272 +0200
@@ -99,9 +99,8 @@

     public void testLoadStore() throws Exception
     {
-        Pair<List<String>, List<String>> dirsFiles =
-            getDirAndFileNames(m_SourceDir);
-        makeDirs(m_TargetDir, dirsFiles.First);
+        Pair dirsFiles = getDirAndFileNames(m_SourceDir);
+        makeDirs(m_TargetDir, (List)dirsFiles.First);
         for (String fileName : dirsFiles.Second)
         {
             try {
@@ -209,13 +208,13 @@
 //        failed();
     }

-    Pair<List<String>, List<String>> getDirAndFileNames(String dir)
+    Pair getDirAndFileNames(String dir)
     {
         List<String> dirs = new ArrayList<String>();
         List<String> files = new ArrayList<String>();
         File root = new File(dir);
         getDirAndFileNames(root, "", dirs, files);
-        return new Pair<List<String>, List<String>>(dirs, files);
+        return new Pair(dirs, files);
     }

     void getDirAndFileNames(File file, String relPath,
--- a/sw/qa/complex/writer/TextPortionEnumerationTest.java-old    2012-04-13 23:37:32.404198209 +0200
+++ b/sw/qa/complex/writer/TextPortionEnumerationTest.java        2012-04-13 23:42:11.000253614 +0200
@@ -434,16 +434,16 @@
     private long m_DiffNesting = 0;
     private long m_DiffSpuriousEmptyText = 0;
     private long m_DiffSequence = 0; // ignored?
-    private Stack<Pair<TreeNode, TreeNodeEnum>> m_StackExpected;
-    private Stack<Pair<TreeNode, TreeNodeEnum>> m_StackActual;
+    private Stack<Pair> m_StackExpected;
+    private Stack<Pair> m_StackActual;
     private List<TreeNode> m_BufferExpected;
     private List<TreeNode> m_BufferActual;

     FuzzyTester() {
         m_BufferExpected = new ArrayList<TreeNode>();
         m_BufferActual = new ArrayList<TreeNode>();
-        m_StackExpected = new Stack<Pair<TreeNode, TreeNodeEnum>>();
-        m_StackActual = new Stack<Pair<TreeNode, TreeNodeEnum>>();
+        m_StackExpected = new Stack<Pair>();
+        m_StackActual = new Stack<Pair>();
     }

     /** idea: traverse both trees, enumerate nodes, stopping at content nodes.
@@ -476,7 +476,7 @@
         assertEquals(0, m_DiffMissing);
     }

-    private void traverse(Stack<Pair<TreeNode, TreeNodeEnum>> stack,
+    private void traverse(Stack<Pair> stack,
                   List<TreeNode> buffer)
     {
         while (!stack.empty()) {
@@ -1031,7 +1031,7 @@
     private Map<String, XTextRange> m_BookmarkStarts;
     private Map<String, XTextRange> m_ReferenceMarkStarts;
     private Map<String, XTextRange> m_DocumentIndexMarkStarts;
-    private List<Pair<XTextRange, FrameNode>> m_FrameHints;
+    private List<Pair> m_FrameHints;

     TreeInserter(XTextDocument xDoc)
     {
@@ -1039,7 +1039,7 @@
         m_BookmarkStarts = new HashMap<String, XTextRange>();
         m_ReferenceMarkStarts = new HashMap<String, XTextRange>();
         m_DocumentIndexMarkStarts = new HashMap<String, XTextRange>();
-        m_FrameHints = new ArrayList<Pair<XTextRange, FrameNode>>();
+        m_FrameHints = new ArrayList<Pair>();
     }

     void insertTree(TreeNode tree) throws Exception
@@ -1049,7 +1049,7 @@
         initParagraph();
         insertChildren(tree.createEnumeration());
         for (int i = 0; i < m_FrameHints.size(); ++i) {
-            Pair<XTextRange, FrameNode> p = m_FrameHints.get(i);
+            Pair p = m_FrameHints.get(i);
             insertFrame(p.First, p.Second.getName(), p.Second.getAnchor());
         }
     }
@@ -3919,7 +3919,7 @@

         XMetadatable xMark2 = (XMetadatable) UnoRuntime.queryInterface(
                 XMetadatable.class, xBookmarks.getByName("mk2"));
-        Pair<Statement[], Boolean> result = xRepo.getStatementRDFa(xMark2);
+        Pair result = xRepo.getStatementRDFa(xMark2);
         assertTrue("mark2", (result.First.length == 1)
             && result.First[0].Subject.getStringValue().equals("uri:foo")
             && result.First[0].Predicate.getStringValue().equals("uri:bar")

--- a/unoxml/qa/complex/unoxml/RDFRepositoryTest.java-old      2012-04-14 00:24:40.928198757 +0200
+++ b/unoxml/qa/complex/unoxml/RDFRepositoryTest.java  2012-04-14 00:30:11.188253430 +0200
@@ -467,8 +467,7 @@
             XTextRange xTR = new TestRange(content);
             XMetadatable xM = (XMetadatable) xTR;

-            Pair<Statement[], Boolean> result =
-                xRep.getStatementRDFa((XMetadatable)xTR);
+            Pair result = xRep.getStatementRDFa((XMetadatable)xTR);
             assertTrue("RDFa: get: not empty (initial)",
                 0 == result.First.length);

@@ -492,7 +491,7 @@

             result = xRep.getStatementRDFa((XMetadatable)xTR);
             assertTrue("RDFa: get: without content",
-                !result.Second && (1 == result.First.length)
+                !((Boolean)result.Second) && (1 == result.First.length)
                 && eq(result.First[0], x_FooBarTRLit));

             //FIXME: do this?
@@ -509,7 +508,7 @@

             result = xRep.getStatementRDFa((XMetadatable)xTR);
             assertTrue("RDFa: get: with content",
-                result.Second &&
+                (Boolean)result.Second &&
                 (1 == result.First.length) &&
                 eq(result.First[0], x_FooBarLittype));

@@ -536,8 +535,8 @@
             Statement x_FooBazTRLit = new Statement(foo, baz, trlit, null);
             result = xRep.getStatementRDFa((XMetadatable) xTR);
             assertTrue("RDFa: get: without content (multiple predicates, reinsert)",
-                !result.Second &&
-                eq(result.First, new Statement[] {
+                !((Boolean)result.Second) &&
+                eq((Statement[])result.First, new Statement[] {
                      x_FooFooTRLit, x_FooBarTRLit, x_FooBazTRLit }));

             xRep.removeStatementRDFa((XMetadatable)xTR);

--- a/configure.in-old	2012-04-14 15:26:14.312429763 +0200
+++ b/configure.in	2012-04-14 15:25:46.975884710 +0200
@@ -4058,6 +4058,7 @@
     dnl Java disabled
     JAVA_HOME=NO_JAVA_HOME ; export JAVA_HOME
 fi
+AC_SUBST(_jdk_ver)
 
 _java_target_ver="1.5"
 dnl ===================================================================
--- a/sfx2/Module_sfx2.mk-old	2012-04-14 15:26:38.283884685 +0200
+++ a/sfx2/Module_sfx2.mk	2012-04-14 15:27:09.915905610 +0200
@@ -39,9 +39,11 @@
     CppunitTest_sfx2_metadatable \
 ))
 
+ifneq ($(_jdk_ver),10700)
 $(eval $(call gb_Module_add_subsequentcheck_targets,sfx2,\
     JunitTest_sfx2_complex \
 ))
+endif
 #    JunitTest_sfx2_unoapi \
 
 ifneq (,$(filter LINUX DRAGONFLY OPENBSD FREEBSD NETBSD, $(OS)))
--- a/set_soenv.in-old	2012-04-14 16:07:20.343906187 +0200
+++ b/set_soenv.in	2012-04-14 16:08:23.919886864 +0200
@@ -1697,6 +1697,7 @@
    ToFile( "JAVADOC",         PathFormat("@JAVADOC@"), "e" );
    ToFile( "JVM_ONE_PATH_CHECK", "@JVM_ONE_PATH_CHECK@", "e" );
 }
+ToFile( "_jdk_ver",          "@_jdk_ver@",       "e" );
 ToFile( "SCPDEFS",           '@SCPDEFS@',        "e" );
 ToFile( "SOLAREXTRAINC",     $SOLAREXTRAINC,     "e" );
 ToFile( "SOLAREXTRALIB",     $SOLAREXTRALIB,     "e" );
--- a/sw/Module_sw.mk-old	2012-04-14 16:53:04.119960651 +0200
+++ b/sw/Module_sw.mk	2012-04-14 16:53:23.047955928 +0200
@@ -46,9 +46,11 @@
     CppunitTest_sw_swdoc_test \
 ))
 
+ifneq ($(_jdk_ver),10700)
 $(eval $(call gb_Module_add_subsequentcheck_targets,sw,\
     JunitTest_sw_complex \
 ))
+endif
 #    JunitTest_sw_unoapi \
 
 # vim: set noet sw=4 ts=4:
--- a/unoxml/Module_unoxml.mk-old	2012-04-14 17:54:45.668454237 +0200
+++ b/unoxml/Module_unoxml.mk	2012-04-14 17:55:20.395960360 +0200
@@ -35,7 +35,10 @@
 
 $(eval $(call gb_Module_add_subsequentcheck_targets,unoxml,\
     JunitTest_unoxml_complex \
+))
+ifneq ($(_jdk_ver),10700)
+$(eval $(call gb_Module_add_subsequentcheck_targets,unoxml,\
     JunitTest_unordf_complex \
 ))
-
+endif
 # vim: set noet sw=4 ts=4:
