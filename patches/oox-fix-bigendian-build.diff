From e3ac30fe6287b4cd0c9ef103d011a109a359a0be Mon Sep 17 00:00:00 2001
From: David Tardon <dtardon@redhat.com>
Date: Wed, 22 Oct 2014 09:50:25 +0200
Subject: fix oox build on big endian

Change-Id: I580266d908e30ef076de0517f41a600f4c9372c1

diff --git a/oox/source/ole/olehelper.cxx b/oox/source/ole/olehelper.cxx
index 409eb4a..77e8c4a 100644
--- a/oox/source/ole/olehelper.cxx
+++ b/oox/source/ole/olehelper.cxx
@@ -262,7 +262,7 @@ void OleHelper::exportGuid( BinaryOutputStream& rOStr, const SvGlobalName& rId )
     rOStr << rId.GetCLSID().Data1;
     rOStr << rId.GetCLSID().Data2;
     rOStr << rId.GetCLSID().Data3;
-    rOStr.writeArray( &rId.GetCLSID().Data4, 8 );
+    rOStr.writeArray( rId.GetCLSID().Data4, 8 );
 }
 
 OUString OleHelper::importGuid( BinaryInputStream& rInStrm )
-- 
cgit v0.10.2

From f70db32aa2df79cca42c44f05baf4baac6e04bf5 Mon Sep 17 00:00:00 2001
From: David Tardon <dtardon@redhat.com>
Date: Mon, 27 Oct 2014 16:12:43 +0100
Subject: fix writing const arrays on big endian

Btw, th unanounced byte-swapping of valuse in the input array in
writeArray seems a bit dubious to me... It could too easily cause
unintentional memory damage. I just hope it is always called either with
data that is not used after that anymore or with a copy of the data.

Change-Id: Ica0e9ea16cd101fe87d7e0a8fa696911769e0654

diff --git a/include/oox/helper/binaryoutputstream.hxx b/include/oox/helper/binaryoutputstream.hxx
index 7f3ee73..4ccc585 100644
--- a/include/oox/helper/binaryoutputstream.hxx
+++ b/include/oox/helper/binaryoutputstream.hxx
@@ -20,6 +20,9 @@
 #ifndef INCLUDED_OOX_HELPER_BINARYOUTPUTSTREAM_HXX
 #define INCLUDED_OOX_HELPER_BINARYOUTPUTSTREAM_HXX
 
+#include <memory>
+#include <boost/shared_array.hpp>
+
 #include <oox/helper/binarystreambase.hxx>
 
 namespace com { namespace sun { namespace star {
@@ -64,6 +67,9 @@ public:
     template< typename Type >
     void writeArray( Type* opnArray, sal_Int32 nElemCount );
 
+    template< typename Type >
+    void writeArray( const Type* opnArray, sal_Int32 nElemCount );
+
     /** Stream operator for all data types supported by the writeValue() function. */
     template< typename Type >
     BinaryOutputStream& operator<<( Type nValue ) { writeValue( nValue ); return *this; }
@@ -88,6 +94,14 @@ void BinaryOutputStream::writeArray( Type* opnArray, sal_Int32 nElemCount )
     writeMemory( opnArray, nWriteSize, sizeof( Type ) );
 }
 
+template< typename Type >
+void BinaryOutputStream::writeArray( const Type* opnArray, sal_Int32 nElemCount )
+{
+    boost::shared_array<Type> pArray(new Type[nElemCount]);
+    std::uninitialized_copy(opnArray, opnArray + nElemCount, pArray.get());
+    writeArray(pArray.get(), nElemCount);
+}
+
 typedef ::boost::shared_ptr< BinaryOutputStream > BinaryOutputStreamRef;
 
 
-- 
cgit v0.10.2

