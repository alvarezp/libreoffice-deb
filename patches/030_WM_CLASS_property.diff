--- oo_1.0.1_src/vcl/unx/source/window/salframe.cxx.WM_CLASS-property	2002-06-21 15:34:23.000000000 +0200
+++ oo_1.0.1_src/vcl/unx/source/window/salframe.cxx	2002-08-27 22:43:33.000000000 +0200
@@ -147,6 +147,13 @@
 #include <i18n_status.hxx>
 #endif
 
+#ifndef _RTL_BOOTSTRAP_HXX
+#include <rtl/bootstrap.hxx>
+#endif
+#ifndef _OSL_PROCESS_H
+#include <osl/process.h>
+#endif
+
 #include <algorithm>
 
 using namespace vcl_sal;
@@ -219,6 +226,62 @@ static void doReparentPresentationDialog
     pDisplay->GetXLib()->SetIgnoreXErrors( bIgnore );
 }
 
+static char* getFrameResName()
+{
+    /*  according to ICCCM:
+     *  first search command line for -name parameter
+     *  then try REOURCE_NAME environment variable
+     *  then use argv[0] stripped by directories
+     */
+    static char pResName[256] = "";
+    if( !*pResName )
+    {
+        int nArgs = osl_getCommandArgCount();
+        for( int n = 0; n < nArgs-1; n++ )
+        {
+            ::rtl::OUString aArg;
+            if( ! osl_getCommandArg( n, &aArg.pData ) &&
+                aArg.equalsIgnoreAsciiCaseAscii( "-name" ) &&
+                ! osl_getCommandArg( n+1, &aArg.pData ) )
+            {
+                strncpy( pResName, ::rtl::OUStringToOString( aArg, osl_getThreadTextEncoding() ).getStr(), sizeof(pResName)-1 );
+                break;
+            }
+        }
+        if( !*pResName )
+        {
+            const char* pEnv = getenv( "RESOURCE_NAME" );
+            if( pEnv && *pEnv )
+                strncpy( pResName, pEnv, sizeof(pResName)-1 );
+        }
+        if( !*pResName )
+            strcpy( pResName, "VCLSalFrame" );
+    }
+    return pResName;
+}
+
+static char* getFrameClassName()
+{
+    static char pClassName[256] = "";
+    if( !*pClassName )
+    {
+        ::rtl::OUString aIni, aProduct;
+        osl_getExecutableFile( &aIni.pData );
+        aIni = aIni.copy( 0, aIni.lastIndexOf( SAL_PATHDELIMITER )+1 );
+        aIni += ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( SAL_CONFIGFILE( "bootstrap" ) ) );
+        ::rtl::Bootstrap aBootstrap( aIni );
+        aBootstrap.getFrom( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "ProductKey" ) ), aProduct );
+
+        if( aProduct.getLength() )
+        {
+            strncpy( pClassName, ::rtl::OUStringToOString( aProduct, osl_getThreadTextEncoding() ).getStr(), sizeof( pClassName )-1 );
+        }
+        else
+            strcpy( pClassName, "VCLSalFrame" );
+    }
+    return pClassName;
+}
+
 // -=-= SalInstance =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 SalFrame *SalInstance::CreateFrame( SalFrame *pParent,
@@ -450,7 +513,7 @@ void SalFrameData::Init( ULONG nSalFrame
     pFrame_->maGeometry.nWidth	= w;
     pFrame_->maGeometry.nHeight	= h;
 
-	if( ! pParentData )
+	if( ! pParentData && ! (nSalFrameStyle & (SAL_FRAME_STYLE_FLOAT|SAL_FRAME_STYLE_CHILD)) )
 	{
         XSizeHints* pHints = XAllocSizeHints();
         pHints->flags = PWinGravity | PPosition | PSize;
@@ -470,8 +533,8 @@ void SalFrameData::Init( ULONG nSalFrame
 		XSetWMProtocols( GetXDisplay(), mhWindow, a, n );
 
         XClassHint* pClass = XAllocClassHint();
-        pClass->res_name = "VCLSalFrame";
-        pClass->res_class = "VCLSalFrame";
+        pClass->res_name  = getFrameResName();
+        pClass->res_class = getFrameClassName();
         XSetClassHint( GetXDisplay(), GetShellWindow(), pClass );
         XFree( pClass );
 
