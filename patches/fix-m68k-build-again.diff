From 79a6ffd82bc8a142cbc5777efae977e79c8f7bb6 Mon Sep 17 00:00:00 2001
From: Rene Engelhard <rene@debian.org>
Date: Mon, 26 Jun 2017 22:18:41 +0200
Subject: [PATCH] fix m68k build again

This reverts commit d5d6ee3b3e7cf3d93f892a452244051e4294fe6d and applies
the patch cleanly again. somehow it got mis-applied.

Change-Id: Id199d9086fb8e2e52bb810c8ddcbdd7fa7060676
---
 cppu/source/uno/check.cxx | 26 ++++++++++++++++++++------
 1 file changed, 20 insertions(+), 6 deletions(-)

diff --git a/cppu/source/uno/check.cxx b/cppu/source/uno/check.cxx
index 9a734a78e8cf..353e2c977493 100644
--- a/cppu/source/uno/check.cxx
+++ b/cppu/source/uno/check.cxx
@@ -153,7 +153,7 @@ static_assert( static_cast<sal_Bool>(false) == sal_False,
                "must be binary compatible" );
 #if SAL_TYPES_ALIGNMENT8 == 2
 static_assert(offsetof(AlignSize_Impl, dDouble) == 2, "offsetof(AlignSize_Impl, dDouble) != 2");
-static_assert(sizeof(AlignSize_Impl) == 12, "sizeof(AlignSize_Impl) != 12");
+static_assert(sizeof(AlignSize_Impl) == 10, "sizeof(AlignSize_Impl) != 10");
 #elif SAL_TYPES_ALIGNMENT8 == 4
 static_assert(offsetof(AlignSize_Impl, dDouble) == 4, "offsetof(AlignSize_Impl, dDouble) != 4");
 static_assert(sizeof(AlignSize_Impl) == 12, "sizeof(AlignSize_Impl) != 12");
@@ -177,13 +177,19 @@ static_assert(offsetof(uno_Any, pReserved) == 2 * sizeof(void *), "offsetof(uno_
 // string
 static_assert(sizeof(OUString) == sizeof(rtl_uString *), "binary compatibility test failed: sizeof(OUString) != sizeof(rtl_uString *)");
 // struct
+#if SAL_TYPES_ALIGNMENT8 == 2
+static_assert(sizeof(M) == 6, "sizeof(M) != 6");
+static_assert(sizeof(N) == 8, "sizeof(N) != 8");
+static_assert(sizeof(N2) == 8, "sizeof(N2) != 8");
+static_assert(offsetof(N2, p) == 6, "offsetof(N2, p) != 6");
+#else
 static_assert(sizeof(M) == 8, "sizeof(M) != 8");
-static_assert(offsetof(M, o) == 4, "offsetof(M, o) != 4");
 static_assert(sizeof(N) == 12, "sizeof(N) != 12");
-
 static_assert(sizeof(N2) == 12, "sizeof(N2) != 12");
-
 static_assert(offsetof(N2, p) == 8, "offsetof(N2, p) != 8");
+#endif
+static_assert(offsetof(M, o) == 4, "offsetof(M, o) != 4");
+
 #if SAL_TYPES_ALIGNMENT8 == 2
 static_assert(sizeof(O) == 16, "sizeof(O) != 16");
 #elif SAL_TYPES_ALIGNMENT8 == 4
@@ -193,13 +199,21 @@ static_assert(sizeof(O) == 24, "sizeof(O) != 24");
 #else
 # error unexpected alignment of 8 byte types
 #endif
+
+#if SAL_TYPES_ALIGNMENT8 == 2
+static_assert(sizeof(C2) == 6, "sizeof(C2) != 6");
+static_assert(sizeof(D) == 6, "sizeof(D) != 6");
+static_assert(offsetof(D, e) == 2, "offsetof(D, e) != 2");
+static_assert(offsetof(E, e) == 6, "offsetof(E, e) != 6");
+#else
+static_assert(sizeof(C2) == 8, "sizeof(C2) != 8");
 static_assert(sizeof(D) == 8, "sizeof(D) != 8");
 static_assert(offsetof(D, e) == 4, "offsetof(D, e) != 4");
-static_assert(offsetof(E, d) == 4, "offsetof(E, d) != 4");
 static_assert(offsetof(E, e) == 8, "offsetof(E, e) != 8");
+#endif
 
 static_assert(sizeof(C1) == 2, "sizeof(C1) != 2");
-static_assert(sizeof(C2) == 8, "sizeof(C2) != 8");
+static_assert(offsetof(E, d) == 4, "offsetof(E, d) != 4");
 
 #if SAL_TYPES_ALIGNMENT8 == 2
 static_assert(sizeof(C3) == 18, "sizeof(C3) != 18");
-- 
2.11.0

