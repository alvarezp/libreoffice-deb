From f643e1f687e27e7f46c53d7298772d4dddb3e660 Mon Sep 17 00:00:00 2001
From: David Tardon <dtardon@redhat.com>
Date: Sun, 12 Nov 2017 18:46:48 +0100
Subject: Upgrade to ICU 60.1

Change-Id: I07837be7faac0b2238b0cba8fb981e4c4d24c498

diff --git a/i18npool/source/breakiterator/breakiterator_unicode.cxx b/i18npool/source/breakiterator/breakiterator_unicode.cxx
index bd9d09a..b4ca111 100644
--- a/i18npool/source/breakiterator/breakiterator_unicode.cxx
+++ b/i18npool/source/breakiterator/breakiterator_unicode.cxx
@@ -544,6 +544,27 @@ LineBreakResults SAL_CALL BreakIterator_Unicode::getLineBreak(
         } else { //word boundary break
             lbr.breakIndex = pLineBI->preceding(nStartPos);
             lbr.breakType = BreakType::WORDBOUNDARY;
+
+            // Special case for Slash U+002F SOLIDUS in URI and path names.
+            // TR14 defines that as SY: Symbols Allowing Break After (A).
+            // This is unwanted in paths, see also i#17155
+            if (lbr.breakIndex > 0 && Text[lbr.breakIndex-1] == '/')
+            {
+                // Look backward and take any whitespace before as a break
+                // opportunity. This also glues something like "w/o".
+                // Avoid an overly long path and break it as was indicated.
+                // Overly long here is arbitrarily defined.
+                const sal_Int32 nOverlyLong = 66;
+                sal_Int32 nPos = lbr.breakIndex - 1;
+                while (nPos > 0 && lbr.breakIndex - nPos < nOverlyLong)
+                {
+                    if (u_isWhitespace(Text.iterateCodePoints( &nPos, -1)))
+                    {
+                        lbr.breakIndex = nPos + 1;
+                        break;
+                    }
+                }
+            }
         }
 
 #define WJ 0x2060   // Word Joiner
diff --git a/i18nutil/source/utility/unicode.cxx b/i18nutil/source/utility/unicode.cxx
index 94abe52..0173a4a 100644
--- a/i18nutil/source/utility/unicode.cxx
+++ b/i18nutil/source/utility/unicode.cxx
@@ -716,6 +716,17 @@ OString SAL_CALL unicode::getExemplarLanguageForUScriptCode(UScriptCode eScript)
             sRet = "mis";   // Zsye - Emoji variant
             break;
 #endif
+#if (U_ICU_VERSION_MAJOR_NUM >= 60)
+        case USCRIPT_MASARAM_GONDI:
+            sRet = "gon-Gonm";  // macro language code, could be wsg,esg,gno
+            break;
+        case USCRIPT_SOYOMBO:
+            sRet = "mn-Soyo";   // abugida to write Mongolian, also Tibetan and Sanskrit
+            break;
+        case USCRIPT_ZANABAZAR_SQUARE:
+            sRet = "mn-Zanb";   // abugida to write Mongolian
+            break;
+#endif
     }
     return sRet;
 }
#diff -urN svx-old/source/dialog/ucsubset.src svx/source/dialog/ucsubset.src
#--- a/svx/source/dialog/ucsubset.src	2017-11-03 15:12:31.000000000 +0100
#+++ b/svx/source/dialog/ucsubset.src	2017-11-17 10:55:54.044690772 +0100
#@@ -302,6 +302,13 @@
#         < "Osage"; RID_SUBSETSTR_OSAGE ; > ;
#         < "Tangut"; RID_SUBSETSTR_TANGUT ; > ;
#         < "Tangut Components"; RID_SUBSETSTR_TANGUT_COMPONENTS ; > ;
#+        < "CJK Unified Ideographs Extension F"; RID_SUBSETSTR_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_F ; > ;
#+        < "Kana Extended-A"; RID_SUBSETSTR_KANA_EXTENDED_A ; > ;
#+        < "Masaram Gondi"; RID_SUBSETSTR_MASARAM_GONDI ; > ;
#+        < "Nushu"; RID_SUBSETSTR_NUSHU ; > ;
#+        < "Soyombo"; RID_SUBSETSTR_SOYOMBO ; > ;
#+        < "Syriac Supplement"; RID_SUBSETSTR_SYRIAC_SUPPLEMENT ; > ;
#+        < "Zanabazar Square"; RID_SUBSETSTR_ZANABAZAR_SQUARE ; > ;
#     };
# };
#
#diff --git a/svx/source/dialog/charmap.cxx b/svx/source/dialog/charmap.cxx
#index 510ca60..9fc4f3f 100644
#--- a/svx/source/dialog/charmap.cxx
#+++ b/svx/source/dialog/charmap.cxx
#@@ -1822,6 +1822,29 @@ void SubsetMap::InitList()
#                     aAllSubsets.push_back( Subset( 0x18800, 0x18AFF, aStringList.GetString(aStringList.FindIndex(RID_SUBSETSTR_TANGUT_COMPONENTS)) ) );
#                     break;
# #endif
#+#if (U_ICU_VERSION_MAJOR_NUM >= 60)
#+                case UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_F:
#+                    aAllSubsets.push_back( Subset( 0x2CEB0, 0x2EBE0, aStringList.GetString(aStringList.FindIndex(RID_SUBSETSTR_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_F)) ) );
#+                    break;
#+                case UBLOCK_KANA_EXTENDED_A:
#+                    aAllSubsets.push_back( Subset( 0x1B100, 0x1B12F, aStringList.GetString(aStringList.FindIndex(RID_SUBSETSTR_KANA_EXTENDED_A)) ) );
#+                    break;
#+                case UBLOCK_MASARAM_GONDI:
#+                    aAllSubsets.push_back( Subset( 0x11D00, 0x11D5F, aStringList.GetString(aStringList.FindIndex(RID_SUBSETSTR_MASARAM_GONDI)) ) );
#+                    break;
#+                case UBLOCK_NUSHU:
#+                    aAllSubsets.push_back( Subset( 0x1B170, 0x1B2FF, aStringList.GetString(aStringList.FindIndex(RID_SUBSETSTR_NUSHU)) ) );
#+                    break;
#+                case UBLOCK_SOYOMBO:
#+                    aAllSubsets.push_back( Subset( 0x11A50, 0x11AAF, aStringList.GetString(aStringList.FindIndex(RID_SUBSETSTR_SOYOMBO)) ) );
#+                    break;
#+                case UBLOCK_SYRIAC_SUPPLEMENT:
#+                    aAllSubsets.push_back( Subset( 0x0860, 0x086f, aStringList.GetString(aStringList.FindIndex(RID_SUBSETSTR_SYRIAC_SUPPLEMENT)) ) );
#+                    break;
#+                case UBLOCK_ZANABAZAR_SQUARE:
#+                    aAllSubsets.push_back( Subset( 0x11A00, 0x11A4F, aStringList.GetString(aStringList.FindIndex(RID_SUBSETSTR_ZANABAZAR_SQUARE)) ) );
#+                    break;
#+#endif
# 
#             }
# 
#-- 
#cgit v0.10.2

